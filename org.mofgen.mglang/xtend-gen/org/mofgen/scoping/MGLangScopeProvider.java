/**
 * generated by Xtext 2.20.0
 */
package org.mofgen.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.mofgen.collectionModel.CollectionModelPackage;
import org.mofgen.mGLang.Assignment;
import org.mofgen.mGLang.CaseWithCast;
import org.mofgen.mGLang.Collection;
import org.mofgen.mGLang.Generator;
import org.mofgen.mGLang.MGLangPackage;
import org.mofgen.mGLang.Map;
import org.mofgen.mGLang.MofgenFile;
import org.mofgen.mGLang.Node;
import org.mofgen.mGLang.Pattern;
import org.mofgen.mGLang.PatternNodeReference;
import org.mofgen.mGLang.PatternVariable;
import org.mofgen.mGLang.RefOrCall;
import org.mofgen.scoping.AbstractMGLangScopeProvider;
import org.mofgen.utils.MofgenModelUtils;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MGLangScopeProvider extends AbstractMGLangScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _isNodeCreation = this.isNodeCreation(context, reference);
    if (_isNodeCreation) {
      return this.getScopeForNodeCreationType(((Node) context));
    }
    boolean _isReferenceType = this.isReferenceType(context, reference);
    if (_isReferenceType) {
      return this.getScopeForReferenceType(((PatternNodeReference) context));
    }
    boolean _isReferenceTarget = this.isReferenceTarget(context, reference);
    if (_isReferenceTarget) {
      return this.getScopeForReferenceTarget(((PatternNodeReference) context));
    }
    boolean _isNodeAttributeAssignmentType = this.isNodeAttributeAssignmentType(context, reference);
    if (_isNodeAttributeAssignmentType) {
      return this.getScopeForNodeAssignmentType(((Assignment) context));
    }
    boolean _isRefOrCall = this.isRefOrCall(context);
    if (_isRefOrCall) {
      return this.getScopeForRefOrCall(((RefOrCall) context));
    }
    boolean _isPatternVariableType = this.isPatternVariableType(context, reference);
    if (_isPatternVariableType) {
      return this.getScopeForPatternVariableType(((PatternVariable) context));
    }
    return super.getScope(context, reference);
  }
  
  public IScope getScopeForPatternVariableType(final PatternVariable pVar) {
    final List<Pattern> patterns = EcoreUtil2.<Pattern>getAllContentsOfType(this.getRootFile(pVar), Pattern.class);
    return Scopes.scopeFor(patterns);
  }
  
  public IScope getScopeForNodeCreationType(final Node n) {
    final MofgenFile file = this.getRootFile(n);
    final ArrayList<EClass> classes = MofgenModelUtils.getClasses(file);
    return Scopes.scopeFor(classes);
  }
  
  public IScope getScopeForReferenceType(final PatternNodeReference ref) {
    final MofgenFile file = this.getRootFile(ref);
    final Node src = EcoreUtil2.<Node>getContainerOfType(ref, Node.class);
    final ArrayList<EClass> classes = MofgenModelUtils.getClasses(file);
    final Function1<EClass, Boolean> _function = (EClass c) -> {
      EClass _type = src.getType();
      return Boolean.valueOf(Objects.equal(c, _type));
    };
    final Iterable<EClass> filteredClasses = IterableExtensions.<EClass>filter(classes, _function);
    boolean _isEmpty = IterableExtensions.isEmpty(filteredClasses);
    if (_isEmpty) {
      return IScope.NULLSCOPE;
    } else {
      return Scopes.scopeFor((((EClass[])Conversions.unwrapArray(filteredClasses, EClass.class))[0]).getEAllReferences());
    }
  }
  
  public IScope getScopeForAllNodes(final EObject context) {
    final MofgenFile root = this.getRootFile(context);
    final List<Node> allNodes = EcoreUtil2.<Node>getAllContentsOfType(root, Node.class);
    return Scopes.scopeFor(allNodes);
  }
  
  public IScope getScopeForReferenceTarget(final PatternNodeReference ref) {
    return this.getScopeForAllNodes(ref);
  }
  
  public IScope getScopeForNodeAssignmentType(final Assignment ass) {
    final Node srcNode = EcoreUtil2.<Node>getContainerOfType(ass, Node.class);
    final MofgenFile file = this.getRootFile(ass);
    final ArrayList<EClass> clazzez = MofgenModelUtils.getClasses(file);
    try {
      final Function1<EClass, Boolean> _function = (EClass c) -> {
        EClass _type = srcNode.getType();
        return Boolean.valueOf(Objects.equal(c, _type));
      };
      final Iterable<EClass> filteredClazzez = IterableExtensions.<EClass>filter(clazzez, _function);
      boolean _isEmpty = IterableExtensions.isEmpty(filteredClazzez);
      if (_isEmpty) {
        return IScope.NULLSCOPE;
      } else {
        return Scopes.scopeFor((((EClass[])Conversions.unwrapArray(filteredClazzez, EClass.class))[0]).getEAllAttributes());
      }
    } catch (final Throwable _t) {
      if (_t instanceof NullPointerException) {
        return IScope.NULLSCOPE;
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
  
  public Iterable<Node> getEventuallyShadowingNodes(final EObject obj) {
    final Iterable<CaseWithCast> parentCases = Iterables.<CaseWithCast>filter(EcoreUtil2.getAllContainers(obj), CaseWithCast.class);
    final Function1<CaseWithCast, Node> _function = (CaseWithCast c) -> {
      return c.getNode();
    };
    return IterableExtensions.<CaseWithCast, Node>map(parentCases, _function);
  }
  
  public IScope getScopeForRefOrCall(final RefOrCall r) {
    RefOrCall _target = r.getTarget();
    boolean _tripleEquals = (_target == null);
    if (_tripleEquals) {
      final Pattern pattern = EcoreUtil2.<Pattern>getContainerOfType(r, Pattern.class);
      final Generator gen = EcoreUtil2.<Generator>getContainerOfType(r, Generator.class);
      ArrayList<EObject> params = new ArrayList<EObject>();
      ArrayList<Node> patternNodes = new ArrayList<Node>();
      ArrayList<Collection> collections = new ArrayList<Collection>();
      if ((pattern != null)) {
        params.addAll(pattern.getParameters());
        patternNodes.addAll(pattern.getNodes());
        collections.addAll(EcoreUtil2.<Collection>getAllContentsOfType(pattern, Collection.class));
      } else {
        collections.addAll(EcoreUtil2.<Collection>getAllContentsOfType(gen, Collection.class));
      }
      final Iterable<Node> shadowingNodes = this.getEventuallyShadowingNodes(r);
      final ArrayList<Integer> indicesToRemove = CollectionLiterals.<Integer>newArrayList();
      for (final Node pNode : patternNodes) {
        for (final Node node : shadowingNodes) {
          boolean _equals = node.getName().equals(pNode.getName());
          if (_equals) {
            indicesToRemove.add(Integer.valueOf(patternNodes.indexOf(pNode)));
          }
        }
      }
      List<Integer> _reverse = ListExtensions.<Integer>reverse(indicesToRemove);
      for (final Integer index : _reverse) {
        patternNodes.remove(index);
      }
      Iterable<EObject> _plus = Iterables.<EObject>concat(params, patternNodes);
      Iterable<EObject> _plus_1 = Iterables.<EObject>concat(_plus, collections);
      return Scopes.scopeFor(_plus_1);
    } else {
      final RefOrCall trg = r.getTarget();
      final EObject ref = trg.getRef();
      final EClass refClass = ref.eClass();
      if ((ref instanceof Map)) {
        final EList<EOperation> ops = CollectionModelPackage.Literals.MAP.getEAllOperations();
        return Scopes.scopeFor(ops);
      }
      if ((ref instanceof org.mofgen.mGLang.List)) {
        final EList<EOperation> ops_1 = CollectionModelPackage.Literals.LIST.getEAllOperations();
        return Scopes.scopeFor(ops_1);
      }
      final EList<EAttribute> attrs = refClass.getEAllAttributes();
      final EList<EReference> refs = refClass.getEAllReferences();
      Iterable<EStructuralFeature> _plus_2 = Iterables.<EStructuralFeature>concat(attrs, refs);
      return Scopes.scopeFor(_plus_2);
    }
  }
  
  public boolean isReferenceType(final EObject context, final EReference reference) {
    return ((context instanceof PatternNodeReference) && 
      Objects.equal(reference, MGLangPackage.Literals.PATTERN_NODE_REFERENCE__TYPE));
  }
  
  public boolean isReferenceTarget(final EObject context, final EReference reference) {
    return ((context instanceof PatternNodeReference) && 
      Objects.equal(reference, MGLangPackage.Literals.PATTERN_NODE_REFERENCE__TARGET));
  }
  
  public boolean isNodeCreation(final EObject context, final EReference reference) {
    return ((context instanceof Node) && Objects.equal(reference, MGLangPackage.Literals.NODE__TYPE));
  }
  
  public boolean isNodeAttributeAssignmentType(final EObject context, final EReference reference) {
    return ((context instanceof Assignment) && Objects.equal(reference, MGLangPackage.Literals.ASSIGNMENT__TARGET));
  }
  
  public boolean isRefOrCall(final EObject context) {
    return (context instanceof RefOrCall);
  }
  
  public boolean isRefOrCallRef(final EObject context, final EReference reference) {
    return ((context instanceof RefOrCall) && Objects.equal(reference, MGLangPackage.Literals.REF_OR_CALL__REF));
  }
  
  public boolean isPatternVariableType(final EObject context, final EReference reference) {
    return ((context instanceof PatternVariable) && Objects.equal(reference, MGLangPackage.Literals.PATTERN_VARIABLE__TYPE));
  }
  
  public MofgenFile getRootFile(final EObject context) {
    EObject _rootContainer = EcoreUtil2.getRootContainer(context);
    return ((MofgenFile) _rootContainer);
  }
}
