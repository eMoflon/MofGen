grammar org.mofgen.MGLang with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mGLang "http://www.mofgen.org/MGLang"

MofgenFile:
	(imports+=Import)*
	(config=Config)
	(commands += FileCommand)*
;

FileCommand:
	Pattern | Generator
;

Import:
	'import' uri=STRING 'as' name=ID;

//TODO Config-Block needed or rather only use home-oneliner?
Config:
	{Config} 'config' '(' ')' '{'
	(expressions += ConfigExpression)*
	'}'
	;

ConfigExpression:
	HomeExpression | UseProjectAsHomeExpression
;

HomeExpression:
	'home' ASSIGNMENT_OP uri=STRING
;

UseProjectAsHomeExpression:
	'useProjectLocationAsHome' ASSIGNMENT_OP val = BooleanLiteral
;

Pattern:
	'pattern' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')') '{' (commands += PatternCommand )* '}'
	(return=PatternReturn)?;

PatternCommand:
	Collection | Node | ParamManipulation | Switch
;

PatternReturn:
	{PatternReturn} 'return' 'this' ('.' returnValue=[Node])?;

ParamManipulation:
	param=[ParameterNode] content=NodeContent;

Node:
	(srcModel=[Import]'.')? type=[ecore::EClass] name=ID (createdBy=NodeContent | (ASSIGNMENT_OP createdBy=PatternCall))?;

NodeContent:
	{NodeContent} '{' (refsAssigns+=NodeReferenceOrAssignmentOrControlFlow)* '}';

PatternCall:
	called=[Pattern] '(' (params+= ArithmeticExpression (',' params+=ArithmeticExpression)*)? ')';

NodeReferenceOrAssignmentOrControlFlow:
	(PatternNodeReference | Assignment | Switch);

PatternNodeReference:
	type=[ecore::EReference] '->' target=[Node];

Assignment:
	target=[ecore::ENamedElement] ASSIGNMENT_OP value=ArithmeticExpression
;
	
Parameter:
	PrimitiveParameter | ParameterNode;

PrimitiveParameter:
	type=PrimitiveType name=ID;

ParameterNode:
	(srcModel=[Import]'.')? type=[ecore::EClassifier] name=ID;

//Using generic eobject references to make enums possible.
RefOrCall:
	ref=[ecore::EObject] ({RefOrCall.target=current} '.' ref=[ecore::ENamedElement] ('(' (params = RefParams)? bracesSet?=')')?)*;

RefParams:
	params += ArithmeticExpression (',' params+=ArithmeticExpression)*;

Generator:
	{Generator} 'gen' '(' (params+=Parameter)* ')' '{' (commands+=GeneratorExpression)* '}';

GeneratorExpression: //Only serves as super class for all possible commands within generator
	ForStatement | Switch | Collection | PatternCall | PatternVariable | Variable | VariableManipulation | CollectionManipulation;

CollectionManipulation:
	trg=[Collection] '.' op=[ecore::EOperation] '(' (params = RefParams)? ')'
;

VariableManipulation:
	var=[Variable] ASSIGNMENT_OP val=ArithmeticExpression	
;

PatternVariable:
	type=[Pattern] name=ID ASSIGNMENT_OP patternCall=PatternCall;

Variable:
	'var' name=ID ASSIGNMENT_OP value=ArithmeticExpression
;

ForStatement:
	'for' head=ForHead '{' body=ForBody '}';

ForHead:
	RangeForHead | ForEachHead | ListForHead;

RangeForHead:
	iteratorVar=ID 'in' range=ForRange;

ForRange:
	start=ArithmeticExpression ':' end=ArithmeticExpression;

ForEachHead:
	src=RefOrCall '-' eref=[ecore::EReference] '->' iteratorVar=ID;

ListForHead:
	iteratorVar=ID 'in' list=[List]
;

ForBody:
	{ForBody} (commands+=GeneratorExpression)*;

SwitchExpression:
	ForStatement | Collection | PatternCall | PatternVariable | NodeReferenceOrAssignmentOrControlFlow
;

Switch:
	IfElseSwitch | SwitchCase;

IfElseSwitch:
	'switch' '{' (cases+=IfElseCase)+ (default=Default)? '}';

IfElseCase:
	'case' val=ArithmeticExpression ':' body=CaseBody;

Default:
	'default' ':' CaseBody;

SwitchCase:
	'switch' '(' attribute=RefOrCall ')' '{' (cases+=Case)+ (default=Default)? '}';

Case:
	CaseWithCast | CaseWithoutCast;

CaseWithCast:
	'case' node=Node ('when' when=ArithmeticExpression)? ':' body=CaseBody;

CaseWithoutCast:
	'case' val=ArithmeticExpression ':' body=CaseBody;

CaseBody:
	{CaseBody} '{' (expressions+=SwitchExpression)* '}' | expressions+=SwitchExpression;

Collection:
	List | Map;

List:
	'List' name=ID (defOrDecl=ListDefOrDecl)?;

ListDefOrDecl:
	ListDefinition | ListDeclaration
;

ListDeclaration:
	'of' type=[ecore::EClass]
;

ListDefinition:
	ASSIGNMENT_OP (ListAdHoc | RefOrCall);	//Can lists even be returned by any calls or is this redundant?

ListAdHoc:
	{ListAdHoc} '[' (elements+=ArithmeticExpression (',' elements+=ArithmeticExpression)*)? ']'
;

Map:
	'Map' name=ID (createdBy=MapDefOrDecl)?;

MapDefOrDecl:
	MapDefinition | MapDeclaration
;

MapDeclaration:
	'of' keyType=[ecore::EClass] '->' entryType=[ecore::EClass] //TODO: How to signal key to entry relation?
;

MapDefinition:
	ASSIGNMENT_OP (MapAdHoc | RefOrCall);	

MapAdHoc:
	{MapAdHoc} '[' (entries+=MapTupel (',' entries+=MapTupel)*)? ']';

MapTupel:
	'(' key=ArithmeticExpression ',' value=ArithmeticExpression ')';


	//======================================Arithmetics============================================
ArithmeticExpression:
	TertiaryExpression;

TertiaryExpression returns ArithmeticExpression:
	SecondaryExpression ({Tertiary.left=current} op=TertiaryOp right=SecondaryExpression)*;

SecondaryExpression returns ArithmeticExpression:
	PrimaryExpr ({Secondary.left=current} op=SecondaryOp right=PrimaryExpr)*;

PrimaryExpr returns ArithmeticExpression:
	RelationExpression ({Primary.left=current} op=PrimaryOp right=RelationExpression)*;

RelationExpression returns ArithmeticExpression:
	BaseExpr ({Rel.left=current} relation=RelationalOp right=BaseExpr)*;

BaseExpr returns ArithmeticExpression:
	'(' ArithmeticExpression ')' | {NegationExpression} '!' expr=BaseExpr | {FunctionCall} func=MathFunc '('
	expr=ArithmeticExpression ')' | {UnaryMinus} '-' expr=BaseExpr | Literal | RefOrCall | PatternCall;

Literal:
	BooleanLiteral | StringLiteral | NumberLiteral;

BooleanLiteral:
	val = (TRUE|FALSE)
;

StringLiteral:
	val = STRING;

NumberLiteral:
	val = DOUBLE;
	
enum MathFunc:
	SQRT='sqrt' | ABS='abs';

enum PrimitiveType:
	INT='int' | CHAR='char' | DOUBLE='double' | STRING='String' | BOOLEAN='boolean' //String as Primitive? (and therefore also better lowercase?)
;

terminal DOUBLE returns ecore::EDouble:
	INT ('.' INT)?
;

terminal TRUE returns ecore::EBoolean:
	'true';

terminal FALSE returns ecore::EBoolean:
	'false';

enum RelationalOp:
	GREATER='>' |
	GREATER_OR_EQUAL='>=' |
	EQUAL='==' |
	UNEQUAL='!=' |
	LESS_OR_EQUAL='<=' |
	LESS ='<';

enum TertiaryOp:
	PLUS='+' |
	MINUS='-' |
	OR='||';

enum SecondaryOp:
	MOD='%' |
	XOR='^';

enum PrimaryOp:
	MUL='*' |
	DIV='/' |
	AND='&&';

terminal ASSIGNMENT_OP:
	'=';

