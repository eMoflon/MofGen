/*
 * generated by Xtext 2.20.0
 */
package org.mofgen.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.mofgen.mGLang.MGLangPackage
import org.mofgen.utils.MofgenModelUtils
import org.eclipse.xtext.scoping.Scopes
import org.mofgen.mGLang.MofgenFile
import org.mofgen.mGLang.PatternNodeReference
import org.eclipse.xtext.scoping.IScope
import org.mofgen.mGLang.Node
import org.eclipse.xtext.EcoreUtil2
import org.mofgen.mGLang.Assignment
import org.mofgen.mGLang.NodeAttributeCall
import org.mofgen.mGLang.ParameterRef
import org.mofgen.mGLang.Pattern
import org.mofgen.mGLang.MethodCall
import org.mofgen.mGLang.ObjectParameter

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MGLangScopeProvider extends AbstractMGLangScopeProvider {

	override getScope(EObject context, EReference reference) {
		if(isNodeCreation(context, reference)){
			return getScopeForNodeCreationType(context as Node)
		}
		if(isReferenceType(context, reference)){
			return getScopeForReferenceType(context as PatternNodeReference)
		}
		if(isReferenceTarget(context, reference)){
			return getScopeForReferenceTarget(context as PatternNodeReference)
		}
		if(isNodeAttributeCallObject(context, reference)){
			return getScopeForNodeAttributeCallObject(context as NodeAttributeCall)
		}
		if(isNodeAttributeCallAttribute(context, reference)){
			return getScopeForNodeAttributeCallAttribute(context as NodeAttributeCall)
		}
		if(isNodeAttributeAssignmentType(context, reference)){
			return getScopeForNodeAssignmentType(context as Assignment)
		}
		if(isParameterRef(context, reference)){
			return getScopeForParameterRef(context as ParameterRef)
		}
		if(isMethodCallNode(context, reference)){
			return getScopeForMethodCallNode(context as MethodCall)
		}
		if(isMethodCallMethod(context, reference)){
			return getScopeForMethodCallMethod(context as MethodCall)
		}
		
		return super.getScope(context, reference)
		//return IScope.NULLSCOPE;
	}
	
	def getScopeForNodeCreationType(Node n){
		val file = getRootFile(n)
		val classes = MofgenModelUtils.getClasses(file)
		return Scopes.scopeFor(classes)
	}

	def getScopeForReferenceType(PatternNodeReference ref){
		val file = getRootFile(ref)
		val src = EcoreUtil2.getContainerOfType(ref, Node)
		val classes = MofgenModelUtils.getClasses(file)
		val filteredClasses = classes.filter[c|c == src.type]
		if(filteredClasses.empty){
			return IScope.NULLSCOPE
		}else{
			return Scopes.scopeFor(filteredClasses.get(0).EAllReferences)	
		}
		
	}
	
	def getScopeForAllNodes(EObject context){
		val root = getRootFile(context)
		val allNodes = EcoreUtil2.getAllContentsOfType(root, Node)
		return Scopes.scopeFor(allNodes)
	}
	
	def getScopeForReferenceTarget(PatternNodeReference ref){
		return getScopeForAllNodes(ref)
	}
	
	def getScopeForNodeAttributeCallObject(NodeAttributeCall call){
		return getScopeForAllNodes(call)
	}
	
	def getScopeForNodeAttributeCallAttribute(NodeAttributeCall call){
		val objType = call.node.type
		val file = getRootFile(call)
		val clazzez = MofgenModelUtils.getClasses(file).filter[c|c == objType]
		if(clazzez.isEmpty){
			return IScope.NULLSCOPE
		}else{
			return Scopes.scopeFor(clazzez.get(0).EAllAttributes)	
		}	
	}
	
	def getScopeForNodeAssignmentType(Assignment ass){
		val srcNode = EcoreUtil2.getContainerOfType(ass, Node)
		val file = getRootFile(ass)
		val clazzez = MofgenModelUtils.getClasses(file).filter[c|c == srcNode.type]
				if(clazzez.isEmpty){
			return IScope.NULLSCOPE
		}else{
			return Scopes.scopeFor(clazzez.get(0).EAllAttributes)	
		}	
	}
	
	def getScopeForParameterRef(ParameterRef ref){
		// get parameters of above Pattern
		val pattern = EcoreUtil2.getContainerOfType(ref, Pattern)
		val params = pattern.parameters
		return Scopes.scopeFor(params)
	}
	
	def getScopeForMethodCallNode(MethodCall mc){
		// get all nodes of pattern (params and defined)
		val pattern = EcoreUtil2.getContainerOfType(mc, Pattern)
		val params = pattern.parameters.filter(ObjectParameter)
		val nodes = pattern.nodes
		return Scopes.scopeFor(params + nodes)
	}
	
	def getScopeForMethodCallMethod(MethodCall mc){
		val node = mc.calledNode
		val file = getRootFile(mc)
		val calledClass = MofgenModelUtils.getClasses(file).filter[c|c == node.type].get(0)
		return Scopes.scopeFor(calledClass.EAllOperations)
	}
	
	def isReferenceType(EObject context, EReference reference){
		return context instanceof PatternNodeReference && reference == MGLangPackage.Literals.PATTERN_NODE_REFERENCE__TYPE
	}
	
	def isReferenceTarget(EObject context, EReference reference){
		return context instanceof PatternNodeReference && reference == MGLangPackage.Literals.PATTERN_NODE_REFERENCE__TARGET
	}
	
	def isNodeCreation(EObject context, EReference reference){
		return context instanceof Node && reference == MGLangPackage.Literals.NODE__TYPE
	}
	
	def isNodeAttributeCallObject(EObject context, EReference reference){
		return context instanceof NodeAttributeCall && reference == MGLangPackage.Literals.NODE_ATTRIBUTE_CALL__NODE
	}
	
	def isNodeAttributeCallAttribute(EObject context, EReference reference){
		return context instanceof NodeAttributeCall && reference == MGLangPackage.Literals.NODE_ATTRIBUTE_CALL__ATTRIBUTE
	}
	
	def isNodeAttributeAssignmentType(EObject context, EReference reference){
		return context instanceof Assignment && reference == MGLangPackage.Literals.ASSIGNMENT__TARGET
	}
	
	def isParameterRef(EObject context, EReference reference){
		return context instanceof ParameterRef && reference == MGLangPackage.Literals.PARAMETER_REF__REF
	}
	
	def isMethodCallNode(EObject context, EReference reference){
		return context instanceof MethodCall && reference == MGLangPackage.Literals.METHOD_CALL__CALLED_NODE
	}
		
	def isMethodCallMethod(EObject context, EReference reference){
		return context instanceof MethodCall && reference == MGLangPackage.Literals.METHOD_CALL__METHOD
	}
	
	def getRootFile(EObject context){
		return EcoreUtil2.getContainerOfType(context, MofgenFile)
	}
}
