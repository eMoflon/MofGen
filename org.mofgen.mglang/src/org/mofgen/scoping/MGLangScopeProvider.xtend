/*
 * generated by Xtext 2.20.0
 */
package org.mofgen.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.mofgen.mGLang.MGLangPackage
import org.mofgen.utils.MofgenModelUtils
import org.eclipse.xtext.scoping.Scopes
import org.mofgen.mGLang.MofgenFile
import org.mofgen.mGLang.PatternNodeReference

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MGLangScopeProvider extends AbstractMGLangScopeProvider {

//	override getScope(EObject context, EReference reference) {
//		if(isReferenceSource(context, reference)){
//			return getScopeForClasses(context as EditorNodeReference)
//		}
//		if(isReferenceType(context, reference)){
//			return getScopeForReferenceType(context as EditorNodeReference)
//		}
//		if(isReferenceTarget(context, reference)){
//			return getScopeForClasses(context as EditorNodeReference)
//		}
//	}

	def getScopeForReferenceType(PatternNodeReference ref){
		val src = ref.source
		val file = getRootFile(ref)
		val classes = MofgenModelUtils.getClasses(file)
		val srcClass = classes.filter[c|c.name.equals(src.name)].toList.get(0)
		return Scopes.scopeFor(srcClass.EAllReferences)
	}

	def getScopeForClasses(PatternNodeReference ref){
		val file = getRootFile(ref)
		return Scopes.scopeFor(MofgenModelUtils.getClasses(file))
	}

	def getRootFile(EObject context){
		var traverser = context
		while(!(context instanceof MofgenFile)){
			traverser = traverser.eContainer
		}
		
		return traverser as MofgenFile
	}

	def isReferenceSource(EObject context, EReference reference){
		return context instanceof PatternNodeReference && reference == MGLangPackage.Literals.PATTERN_NODE_REFERENCE__SOURCE
	}
	
	def isReferenceType(EObject context, EReference reference){
		return context instanceof PatternNodeReference && reference == MGLangPackage.Literals.PATTERN_NODE_REFERENCE__TYPE
	}
	
	def isReferenceTarget(EObject context, EReference reference){
		return context instanceof PatternNodeReference && reference == MGLangPackage.Literals.PATTERN_NODE_REFERENCE__TARGET
	}
	
}
