grammar org.mofgen.MGLang with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mGLang "http://www.mofgen.org/MGLang"

//TODO: How to get map and list methods? EList and EMap are not accessible. => Create Map and List from separate Ecore Model? --> Probably best thus they are directly usable....
MofgenFile:
	(imports+=Import)*
	(patterns+=Pattern |
	generators+=Generator)*;

Import:
	'import' name=STRING 'as' alias=ID;

Pattern:
//(abstract?='abstract')? // 'Abstract' necessary? TODO
	'pattern' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')') '{' (((colls+=Collection)*)? &
	((nodes+=Node)*)? & ((paramManipulations+=ParamManipulation)*)? & ((switches+=Switch)*)?) '}' (return=PatternReturn)?;

PatternReturn:
	{PatternReturn} 'return' 'this' ('.' returnValue=[Node])?;

ParamManipulation:
	param=[ParameterNode] content=NodeContent;

Node:
	type=[ecore::EClass] name=ID (createdBy=NodeContent | (ASSIGNMENT_OP createdBy=PatternCall))?;

NodeContent:
	{NodeContent} '{' (refsAssigns+=NodeReferenceOrAssignment)* '}';

PatternCall:
	called=[Pattern] '(' (params+=ArithmeticExpression)* ')';

NodeReferenceOrAssignment:
	(PatternNodeReference | Assignment)
;

PatternNodeReference:
	type=[ecore::EReference] '->' target=[Node];

Assignment:
	target=[ecore::EAttribute] ASSIGNMENT_OP value=ArithmeticExpression;
	//TODO make Enum Assignments possible

Parameter:
	PrimitiveParameter | ParameterNode;

PrimitiveParameter:
	type=PrimitiveType name=ID;

ParameterNode:
	type=[ecore::EClassifier] name=ID;

RefOrCall:
	ref=[RefType] ({RefOrCall.target = current} '.' called=[ecore::ETypedElement])* // Making Eoperations, attributes and reference accessible
;

Generator:
	{Generator} 'gen' '(' (params+=Parameter)* ')' '{' (commands+=GeneratorExpression)* '}';

	//TODO Wie hier patterns wie "examplePattern" und PatternObjects dazu mittels "ExamplePattern" ermöglichen? Eventuell in Scoping einklinken, alle Patterns holen und dann in PatternObject übersetzen?
GeneratorExpression: //Only serves as super class for all possible commands within generator
	ForStatement | Switch | Collection | PatternCall | PatternObjectCreation;

PatternObjectCreation:
	pObject=PatternObject ASSIGNMENT_OP patternCall=PatternCall;

PatternObject:
	type=[Pattern] name=ID;

ForStatement:
	'for' head=ForHead '{' body=ForBody '}';

ForHead:
	GeneralForHead | ForEachHead;

GeneralForHead:
	iteratorVar=ID 'in' range=ForRange;

ForEachHead:
	src=RefOrCall '-' eref=[ecore::EReference] '->' iteratorVar=ID;

RefType:
	Node | Parameter | Collection;

ForBody:
	{ForBody} (commands+=GeneratorExpression)*;

Switch:
	IfElseSwitch | SwitchCase
;

IfElseSwitch:
	'switch' '{' (cases+=IfElseCase)+ (default=Default)? '}';

IfElseCase:
	'case' val=ArithmeticExpression ':' body=CaseBody;

Default:
	'default' ':' CaseBody;

SwitchCase:
	'switch' '(' attribute=RefOrCall ')' '{' (cases+=Case)+ (default=Default)? '}';

Case:
	'case' node = Node ('when' when=ArithmeticExpression)? ':' body=CaseBody;

CaseBody:
	{CaseBody} '{' (expressions+=GeneratorExpression)* '}' | (expressions+=GeneratorExpression NEWLINE); //TODO: Test Newline?
	
Collection:
	List | Map;

List:
	'List' name=ID (ASSIGNMENT_OP ListAssignment);

ListAssignment:
	ListAdHoc | RefOrCall;

ListAdHoc:
	'[' elements+=Literal (',' elements+=Literal)* ']' //TODO Allow empty lists? --> Probably have no purpose here since one will not be able to manipulate them, right?
;

Map:
	'Map' name=ID (ASSIGNMENT_OP MapAssignment);

MapAssignment:
	MapAdHoc | RefOrCall;

MapAdHoc:
	'[' entries+=MapTupel (',' entries+=MapTupel)* ']';

MapTupel:
	'(' key=Literal ',' value=ArithmeticExpression ')';

ForRange:
	start=INT ':' end=INT;




	//======================================Arithmetics============================================
ArithmeticExpression:
	TertiaryExpression;

TertiaryExpression returns ArithmeticExpression:
	SecondaryExpression ({Tertiary.left=current} op=TertiaryOp right=SecondaryExpression)*;

SecondaryExpression returns ArithmeticExpression:
	PrimaryExpr ({Secondary.left=current} op=SecondaryOp right=PrimaryExpr)*;

PrimaryExpr returns ArithmeticExpression:
	RelationExpression ({Primary.left=current} op=PrimaryOp right=RelationExpression)*;

RelationExpression returns ArithmeticExpression:
	BaseExpr ({Rel.left=current} relation=RelationalOp right=BaseExpr)*;

BaseExpr returns ArithmeticExpression:
	'(' ArithmeticExpression ')' | {NegationExpression} '!' expr=BaseExpr | {FunctionCall} func=MathFunc '('
	expr=ArithmeticExpression ')' | {Literal} Literal |
	RefOrCall;

Literal:
	BooleanLiteral | StringLiteral | NumberLiteral;

BooleanLiteral returns ecore::EBoolean:
	TRUE | FALSE;

StringLiteral returns ecore::EString:
	STRING;

NumberLiteral returns ecore::EDouble:
	INT ('.' INT)?; //TODO: Negative Numbers?
enum MathFunc:
	SQRT='sqrt' | ABS='abs';

enum PrimitiveType:
	INT='int' | CHAR='char' | DOUBLE='double' | STRING='String' //TODO: String as Primitive? (and therefore also better lowercase?)
;

terminal TRUE returns ecore::EBoolean:
	'true';

terminal FALSE returns ecore::EBoolean:
	'false';

enum RelationalOp:
	GREATER='>' |
	GREATER_OR_EQUAL='>=' |
	EQUAL='==' |
	UNEQUAL='!=' |
	SMALLER_OR_EQUAL='<=' |
	SMALLER='<';

enum TertiaryOp:
	PLUS='+' |
	MINUS='-' |
	OR='||';

enum SecondaryOp:
	MOD='%' |
	XOR='^';

enum PrimaryOp:
	MUL='*' |
	DIV='/' |
	AND='&&';

terminal ASSIGNMENT_OP:
	'=';

terminal NEWLINE:
	'\n';
