/*
 * generated by Xtext 2.20.0
 */
grammar DebugInternalMGLang;

// Rule MofgenFile
ruleMofgenFile:
	ruleImport
	*
	(
		rulePattern
		    |
		ruleGenerator
	)*
;

// Rule Import
ruleImport:
	'import'
	RULE_STRING
	'as'
	RULE_ID
;

// Rule Pattern
rulePattern:
	'pattern'
	RULE_ID
	'('
	(
		ruleParameter
		(
			','
			ruleParameter
		)*
	)?
	')'
	'{'
	ruleNode
	*
	'}'
	rulePatternReturn
	?
;

// Rule PatternReturn
rulePatternReturn:
	'return'
	'this'
	(
		'.'
		RULE_ID
	)?
;

// Rule Node
ruleNode:
	RULE_ID
	RULE_ID
	(
		ruleNodeConstructor
		    |rulePatternCall
	)?
;

// Rule NodeConstructor
ruleNodeConstructor:
	'{'
	ruleNodeReferenceOrAssignment
	*
	'}'
;

// Rule PatternCall
rulePatternCall:
	RULE_ID
	'('
	ruleStringExpression
	*
	')'
;

// Rule NodeReferenceOrAssignment
ruleNodeReferenceOrAssignment:
	(
		rulePatternNodeReference
		    |
		ruleAssignment
	)
	(
		'['
		ruleBooleanExpression
		']'
	)?
;

// Rule PatternNodeReference
rulePatternNodeReference:
	RULE_ID
	'->'
	RULE_ID
;

// Rule Assignment
ruleAssignment:
	RULE_ID
	RULE_ASSIGNMENT_OP
	ruleStringExpression
;

// Rule NodeAttributeCall
ruleNodeAttributeCall:
	RULE_ID
	'.'
	RULE_ID
;

// Rule Parameter
ruleParameter:
	(
		rulePrimitiveParameter
		    |
		ruleObjectParameter
	)
;

// Rule PrimitiveParameter
rulePrimitiveParameter:
	rulePrimitiveType
	RULE_ID
;

// Rule ObjectParameter
ruleObjectParameter:
	RULE_ID
	RULE_ID
;

// Rule ParameterOrMethodCall
ruleParameterOrMethodCall:
	(
		ruleParameterRef
		    |
		ruleMethodCall
	)
;

// Rule ParameterRef
ruleParameterRef:
	RULE_ID
;

// Rule MethodCall
ruleMethodCall:
	RULE_ID
	'.'
	RULE_ID
;

// Rule BooleanExpression
ruleBooleanExpression:
	ruleBooleanOr
;

// Rule RelationExpression
ruleRelationExpression:
	ruleParameterOrMethodCall
	ruleRelationalOp
	ruleParameterOrMethodCall
;

// Rule BooleanOr
ruleBooleanOr:
	ruleBooleanXor
	(
		'||'
		ruleBooleanXor
	)*
;

// Rule BooleanXor
ruleBooleanXor:
	ruleBooleanAnd
	(
		'^'
		ruleBooleanAnd
	)*
;

// Rule BooleanAnd
ruleBooleanAnd:
	ruleBaseBoolean
	(
		'&&'
		ruleBaseBoolean
	)*
;

// Rule BaseBoolean
ruleBaseBoolean:
	(
		'!'
		'('
		ruleBooleanExpression
		')'
		    |
		'('
		ruleBooleanExpression
		')'
		    |
		ruleBoolean
		    |
		ruleRelationExpression
	)
;

// Rule StringExpression
ruleStringExpression:
	ruleStringConcatenation
;

// Rule StringConcatenation
ruleStringConcatenation:
	ruleStringLiteral
	(
		'+'
		ruleStringConcatenation
	)?
;

// Rule StringLiteral
ruleStringLiteral:
	RULE_STRING
;

// Rule Generator
ruleGenerator:
	'gen'
	'('
	')'
	'{'
	ruleGeneratorElement
	*
	'}'
;

// Rule GeneratorElement
ruleGeneratorElement:
	(
		ruleGeneratorCommand
		    |
		ruleForLoop
	)
;

// Rule GeneratorCommand
ruleGeneratorCommand:
	(
		rulePatternCall
		    |
		rulePatternObjectCreation
	)
;

// Rule PatternObjectCreation
rulePatternObjectCreation:
	rulePatternObject
	RULE_ASSIGNMENT_OP
	rulePatternCall
;

// Rule PatternObject
rulePatternObject:
	RULE_ID
	RULE_ID
;

// Rule ForLoop
ruleForLoop:
	'for'
	RULE_ID
	'in'
	ruleForCondition
	'{'
	ruleGeneratorCommand
	*
	'}'
;

// Rule ForCondition
ruleForCondition:
	(
		ruleForEachCollection
		    |
		ruleForRange
	)
;

// Rule ForEachCollection
ruleForEachCollection:
	ruleNodeAttributeCall
;

// Rule ForRange
ruleForRange:
	RULE_INT
	':'
	RULE_INT
;

// Rule Boolean
ruleBoolean:
	(
		'true'
		    |
		'false'
	)
;

// Rule PrimitiveType
rulePrimitiveType:
	(
		'int'
		    |
		'char'
		    |
		'double'
	)
;

// Rule RelationalOp
ruleRelationalOp:
	(
		'>'
		    |
		'>='
		    |
		'=='
		    |
		'!='
		    |
		'<='
		    |
		'<'
	)
;

RULE_INT : ('0'..'9')+;

RULE_NUMBER : '-'? RULE_INT ('.' RULE_INT)?;

RULE_ASSIGNMENT_OP : '=';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
