/*
 * generated by Xtext 2.20.0
 */
grammar InternalMGLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.mofgen.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mofgen.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mofgen.services.MGLangGrammarAccess;

}

@parser::members {

 	private MGLangGrammarAccess grammarAccess;

    public InternalMGLangParser(TokenStream input, MGLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MofgenFile";
   	}

   	@Override
   	protected MGLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMofgenFile
entryRuleMofgenFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMofgenFileRule()); }
	iv_ruleMofgenFile=ruleMofgenFile
	{ $current=$iv_ruleMofgenFile.current; }
	EOF;

// Rule MofgenFile
ruleMofgenFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMofgenFileRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.mofgen.MGLang.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_1_0_0());
					}
					lv_patterns_1_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMofgenFileRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_1_0,
							"org.mofgen.MGLang.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_1_1_0());
					}
					lv_generators_2_0=ruleGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMofgenFileRule());
						}
						add(
							$current,
							"generators",
							lv_generators_2_0,
							"org.mofgen.MGLang.Generator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2());
		}
		(
			(
				lv_alias_3_0=RULE_ID
				{
					newLeafNode(lv_alias_3_0, grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getPatternKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPatternRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"org.mofgen.MGLang.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0());
							}
							lv_parameters_5_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPatternRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_0,
									"org.mofgen.MGLang.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2());
			}
		)
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{ 
				  getUnorderedGroupHelper().enter(grammarAccess.getPatternAccess().getUnorderedGroup_4());
				}
				(
					(
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 0)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 0);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getPatternAccess().getCollsCollectionParserRuleCall_4_0_0());
									}
									lv_colls_9_0=ruleCollection
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPatternRule());
										}
										add(
											$current,
											"colls",
											lv_colls_9_0,
											"org.mofgen.MGLang.Collection");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPatternAccess().getUnorderedGroup_4());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 1)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 1);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getPatternAccess().getNodesNodeParserRuleCall_4_1_0());
									}
									lv_nodes_10_0=ruleNode
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPatternRule());
										}
										add(
											$current,
											"nodes",
											lv_nodes_10_0,
											"org.mofgen.MGLang.Node");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPatternAccess().getUnorderedGroup_4());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 2)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 2);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getPatternAccess().getParamManipulationsParamManipulationParserRuleCall_4_2_0());
									}
									lv_paramManipulations_11_0=ruleParamManipulation
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPatternRule());
										}
										add(
											$current,
											"paramManipulations",
											lv_paramManipulations_11_0,
											"org.mofgen.MGLang.ParamManipulation");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPatternAccess().getUnorderedGroup_4());
					}
				)
			)|
			(
				{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 3)}?=>(
					{
						getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 3);
					}
								({true}?=>((
									{
										newCompositeNode(grammarAccess.getPatternAccess().getSwitchesSwitchParserRuleCall_4_3_0());
									}
									lv_switches_12_0=ruleSwitch
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getPatternRule());
										}
										add(
											$current,
											"switches",
											lv_switches_12_0,
											"org.mofgen.MGLang.Switch");
										afterParserOrEnumRuleCall();
									}
								)
								))+
					{ 
						getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPatternAccess().getUnorderedGroup_4());
					}
				)
			)
					)*
				)
			)
				{ 
				  getUnorderedGroupHelper().leave(grammarAccess.getPatternAccess().getUnorderedGroup_4());
				}
		)
		otherlv_13='}'
		{
			newLeafNode(otherlv_13, grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0());
				}
				lv_return_14_0=rulePatternReturn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					set(
						$current,
						"return",
						lv_return_14_0,
						"org.mofgen.MGLang.PatternReturn");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePatternReturn
entryRulePatternReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternReturnRule()); }
	iv_rulePatternReturn=rulePatternReturn
	{ $current=$iv_rulePatternReturn.current; }
	EOF;

// Rule PatternReturn
rulePatternReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPatternReturnAccess().getPatternReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternReturnAccess().getReturnKeyword_1());
		}
		otherlv_2='this'
		{
			newLeafNode(otherlv_2, grammarAccess.getPatternReturnAccess().getThisKeyword_2());
		}
		(
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getPatternReturnAccess().getFullStopKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPatternReturnRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getPatternReturnAccess().getReturnValueNodeCrossReference_3_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleParamManipulation
entryRuleParamManipulation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamManipulationRule()); }
	iv_ruleParamManipulation=ruleParamManipulation
	{ $current=$iv_ruleParamManipulation.current; }
	EOF;

// Rule ParamManipulation
ruleParamManipulation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParamManipulationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getParamManipulationAccess().getParamParameterNodeCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParamManipulationAccess().getContentNodeContentParserRuleCall_1_0());
				}
				lv_content_1_0=ruleNodeContent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamManipulationRule());
					}
					set(
						$current,
						"content",
						lv_content_1_0,
						"org.mofgen.MGLang.NodeContent");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getCreatedByNodeContentParserRuleCall_2_0_0());
					}
					lv_createdBy_2_0=ruleNodeContent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"createdBy",
							lv_createdBy_2_0,
							"org.mofgen.MGLang.NodeContent");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				this_ASSIGNMENT_OP_3=RULE_ASSIGNMENT_OP
				{
					newLeafNode(this_ASSIGNMENT_OP_3, grammarAccess.getNodeAccess().getASSIGNMENT_OPTerminalRuleCall_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNodeAccess().getCreatedByPatternCallParserRuleCall_2_1_1_0());
						}
						lv_createdBy_4_0=rulePatternCall
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNodeRule());
							}
							set(
								$current,
								"createdBy",
								lv_createdBy_4_0,
								"org.mofgen.MGLang.PatternCall");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleNodeContent
entryRuleNodeContent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeContentRule()); }
	iv_ruleNodeContent=ruleNodeContent
	{ $current=$iv_ruleNodeContent.current; }
	EOF;

// Rule NodeContent
ruleNodeContent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNodeContentAccess().getNodeContentAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeContentAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeContentAccess().getRefsAssignsNodeReferenceOrAssignmentParserRuleCall_2_0());
				}
				lv_refsAssigns_2_0=ruleNodeReferenceOrAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeContentRule());
					}
					add(
						$current,
						"refsAssigns",
						lv_refsAssigns_2_0,
						"org.mofgen.MGLang.NodeReferenceOrAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getNodeContentAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulePatternCall
entryRulePatternCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternCallRule()); }
	iv_rulePatternCall=rulePatternCall
	{ $current=$iv_rulePatternCall.current; }
	EOF;

// Rule PatternCall
rulePatternCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternCallAccess().getCalledPatternCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternCallAccess().getParamsArithmeticExpressionParserRuleCall_2_0());
				}
				lv_params_2_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternCallRule());
					}
					add(
						$current,
						"params",
						lv_params_2_0,
						"org.mofgen.MGLang.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNodeReferenceOrAssignment
entryRuleNodeReferenceOrAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentRule()); }
	iv_ruleNodeReferenceOrAssignment=ruleNodeReferenceOrAssignment
	{ $current=$iv_ruleNodeReferenceOrAssignment.current; }
	EOF;

// Rule NodeReferenceOrAssignment
ruleNodeReferenceOrAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentAccess().getPatternNodeReferenceParserRuleCall_0());
		}
		this_PatternNodeReference_0=rulePatternNodeReference
		{
			$current = $this_PatternNodeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentAccess().getAssignmentParserRuleCall_1());
		}
		this_Assignment_1=ruleAssignment
		{
			$current = $this_Assignment_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePatternNodeReference
entryRulePatternNodeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternNodeReferenceRule()); }
	iv_rulePatternNodeReference=rulePatternNodeReference
	{ $current=$iv_rulePatternNodeReference.current; }
	EOF;

// Rule PatternNodeReference
rulePatternNodeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternNodeReferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_0_0());
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternNodeReferenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getTargetEAttributeCrossReference_0_0());
				}
			)
		)
		this_ASSIGNMENT_OP_1=RULE_ASSIGNMENT_OP
		{
			newLeafNode(this_ASSIGNMENT_OP_1, grammarAccess.getAssignmentAccess().getASSIGNMENT_OPTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueArithmeticExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.mofgen.MGLang.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterAccess().getPrimitiveParameterParserRuleCall_0());
		}
		this_PrimitiveParameter_0=rulePrimitiveParameter
		{
			$current = $this_PrimitiveParameter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParameterAccess().getParameterNodeParserRuleCall_1());
		}
		this_ParameterNode_1=ruleParameterNode
		{
			$current = $this_ParameterNode_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveParameter
entryRulePrimitiveParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveParameterRule()); }
	iv_rulePrimitiveParameter=rulePrimitiveParameter
	{ $current=$iv_rulePrimitiveParameter.current; }
	EOF;

// Rule PrimitiveParameter
rulePrimitiveParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveParameterAccess().getTypePrimitiveTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=rulePrimitiveType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.mofgen.MGLang.PrimitiveType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPrimitiveParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleParameterNode
entryRuleParameterNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterNodeRule()); }
	iv_ruleParameterNode=ruleParameterNode
	{ $current=$iv_ruleParameterNode.current; }
	EOF;

// Rule ParameterNode
ruleParameterNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterNodeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getParameterNodeAccess().getTypeEClassifierCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getParameterNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getParameterNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRefOrCall
entryRuleRefOrCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRefOrCallRule()); }
	iv_ruleRefOrCall=ruleRefOrCall
	{ $current=$iv_ruleRefOrCall.current; }
	EOF;

// Rule RefOrCall
ruleRefOrCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRefOrCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getRefOrCallAccess().getRefRefTypeCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRefOrCallAccess().getRefOrCallTargetAction_1_0(),
						$current);
				}
			)
			otherlv_2='.'
			{
				newLeafNode(otherlv_2, grammarAccess.getRefOrCallAccess().getFullStopKeyword_1_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRefOrCallRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getRefOrCallAccess().getRefETypedElementCrossReference_1_2_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleGenerator
entryRuleGenerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorRule()); }
	iv_ruleGenerator=ruleGenerator
	{ $current=$iv_ruleGenerator.current; }
	EOF;

// Rule Generator
ruleGenerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGeneratorAccess().getGeneratorAction_0(),
					$current);
			}
		)
		otherlv_1='gen'
		{
			newLeafNode(otherlv_1, grammarAccess.getGeneratorAccess().getGenKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneratorAccess().getParamsParameterParserRuleCall_3_0());
				}
				lv_params_3_0=ruleParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneratorRule());
					}
					add(
						$current,
						"params",
						lv_params_3_0,
						"org.mofgen.MGLang.Parameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5='{'
		{
			newLeafNode(otherlv_5, grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneratorAccess().getCommandsGeneratorExpressionParserRuleCall_6_0());
				}
				lv_commands_6_0=ruleGeneratorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneratorRule());
					}
					add(
						$current,
						"commands",
						lv_commands_6_0,
						"org.mofgen.MGLang.GeneratorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleGeneratorExpression
entryRuleGeneratorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorExpressionRule()); }
	iv_ruleGeneratorExpression=ruleGeneratorExpression
	{ $current=$iv_ruleGeneratorExpression.current; }
	EOF;

// Rule GeneratorExpression
ruleGeneratorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGeneratorExpressionAccess().getForStatementParserRuleCall_0());
		}
		this_ForStatement_0=ruleForStatement
		{
			$current = $this_ForStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGeneratorExpressionAccess().getSwitchParserRuleCall_1());
		}
		this_Switch_1=ruleSwitch
		{
			$current = $this_Switch_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGeneratorExpressionAccess().getCollectionParserRuleCall_2());
		}
		this_Collection_2=ruleCollection
		{
			$current = $this_Collection_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGeneratorExpressionAccess().getPatternCallParserRuleCall_3());
		}
		this_PatternCall_3=rulePatternCall
		{
			$current = $this_PatternCall_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGeneratorExpressionAccess().getPatternObjectCreationParserRuleCall_4());
		}
		this_PatternObjectCreation_4=rulePatternObjectCreation
		{
			$current = $this_PatternObjectCreation_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePatternObjectCreation
entryRulePatternObjectCreation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternObjectCreationRule()); }
	iv_rulePatternObjectCreation=rulePatternObjectCreation
	{ $current=$iv_rulePatternObjectCreation.current; }
	EOF;

// Rule PatternObjectCreation
rulePatternObjectCreation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternObjectCreationAccess().getPObjectPatternObjectParserRuleCall_0_0());
				}
				lv_pObject_0_0=rulePatternObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternObjectCreationRule());
					}
					set(
						$current,
						"pObject",
						lv_pObject_0_0,
						"org.mofgen.MGLang.PatternObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_ASSIGNMENT_OP_1=RULE_ASSIGNMENT_OP
		{
			newLeafNode(this_ASSIGNMENT_OP_1, grammarAccess.getPatternObjectCreationAccess().getASSIGNMENT_OPTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternObjectCreationAccess().getPatternCallPatternCallParserRuleCall_2_0());
				}
				lv_patternCall_2_0=rulePatternCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternObjectCreationRule());
					}
					set(
						$current,
						"patternCall",
						lv_patternCall_2_0,
						"org.mofgen.MGLang.PatternCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePatternObject
entryRulePatternObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternObjectRule()); }
	iv_rulePatternObject=rulePatternObject
	{ $current=$iv_rulePatternObject.current; }
	EOF;

// Rule PatternObject
rulePatternObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternObjectRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternObjectAccess().getTypePatternCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPatternObjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getHeadForHeadParserRuleCall_1_0());
				}
				lv_head_1_0=ruleForHead
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"head",
						lv_head_1_0,
						"org.mofgen.MGLang.ForHead");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getBodyForBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleForBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.mofgen.MGLang.ForBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleForHead
entryRuleForHead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForHeadRule()); }
	iv_ruleForHead=ruleForHead
	{ $current=$iv_ruleForHead.current; }
	EOF;

// Rule ForHead
ruleForHead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getForHeadAccess().getGeneralForHeadParserRuleCall_0());
		}
		this_GeneralForHead_0=ruleGeneralForHead
		{
			$current = $this_GeneralForHead_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getForHeadAccess().getForEachHeadParserRuleCall_1());
		}
		this_ForEachHead_1=ruleForEachHead
		{
			$current = $this_ForEachHead_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGeneralForHead
entryRuleGeneralForHead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneralForHeadRule()); }
	iv_ruleGeneralForHead=ruleGeneralForHead
	{ $current=$iv_ruleGeneralForHead.current; }
	EOF;

// Rule GeneralForHead
ruleGeneralForHead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_iteratorVar_0_0=RULE_ID
				{
					newLeafNode(lv_iteratorVar_0_0, grammarAccess.getGeneralForHeadAccess().getIteratorVarIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGeneralForHeadRule());
					}
					setWithLastConsumed(
						$current,
						"iteratorVar",
						lv_iteratorVar_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='in'
		{
			newLeafNode(otherlv_1, grammarAccess.getGeneralForHeadAccess().getInKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneralForHeadAccess().getRangeForRangeParserRuleCall_2_0());
				}
				lv_range_2_0=ruleForRange
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneralForHeadRule());
					}
					set(
						$current,
						"range",
						lv_range_2_0,
						"org.mofgen.MGLang.ForRange");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForEachHead
entryRuleForEachHead returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForEachHeadRule()); }
	iv_ruleForEachHead=ruleForEachHead
	{ $current=$iv_ruleForEachHead.current; }
	EOF;

// Rule ForEachHead
ruleForEachHead returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getForEachHeadAccess().getSrcRefOrCallParserRuleCall_0_0());
				}
				lv_src_0_0=ruleRefOrCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForEachHeadRule());
					}
					set(
						$current,
						"src",
						lv_src_0_0,
						"org.mofgen.MGLang.RefOrCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getForEachHeadAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForEachHeadRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getForEachHeadAccess().getErefEReferenceCrossReference_2_0());
				}
			)
		)
		otherlv_3='->'
		{
			newLeafNode(otherlv_3, grammarAccess.getForEachHeadAccess().getHyphenMinusGreaterThanSignKeyword_3());
		}
		(
			(
				lv_iteratorVar_4_0=RULE_ID
				{
					newLeafNode(lv_iteratorVar_4_0, grammarAccess.getForEachHeadAccess().getIteratorVarIDTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForEachHeadRule());
					}
					setWithLastConsumed(
						$current,
						"iteratorVar",
						lv_iteratorVar_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleForBody
entryRuleForBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForBodyRule()); }
	iv_ruleForBody=ruleForBody
	{ $current=$iv_ruleForBody.current; }
	EOF;

// Rule ForBody
ruleForBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForBodyAccess().getForBodyAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForBodyAccess().getCommandsGeneratorExpressionParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleGeneratorExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForBodyRule());
					}
					add(
						$current,
						"commands",
						lv_commands_1_0,
						"org.mofgen.MGLang.GeneratorExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSwitch
entryRuleSwitch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchRule()); }
	iv_ruleSwitch=ruleSwitch
	{ $current=$iv_ruleSwitch.current; }
	EOF;

// Rule Switch
ruleSwitch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSwitchAccess().getIfElseSwitchParserRuleCall_0());
		}
		this_IfElseSwitch_0=ruleIfElseSwitch
		{
			$current = $this_IfElseSwitch_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSwitchAccess().getSwitchCaseParserRuleCall_1());
		}
		this_SwitchCase_1=ruleSwitchCase
		{
			$current = $this_SwitchCase_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIfElseSwitch
entryRuleIfElseSwitch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseSwitchRule()); }
	iv_ruleIfElseSwitch=ruleIfElseSwitch
	{ $current=$iv_ruleIfElseSwitch.current; }
	EOF;

// Rule IfElseSwitch
ruleIfElseSwitch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseSwitchAccess().getSwitchKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getIfElseSwitchAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseSwitchAccess().getCasesIfElseCaseParserRuleCall_2_0());
				}
				lv_cases_2_0=ruleIfElseCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseSwitchRule());
					}
					add(
						$current,
						"cases",
						lv_cases_2_0,
						"org.mofgen.MGLang.IfElseCase");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseSwitchAccess().getDefaultDefaultParserRuleCall_3_0());
				}
				lv_default_3_0=ruleDefault
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseSwitchRule());
					}
					set(
						$current,
						"default",
						lv_default_3_0,
						"org.mofgen.MGLang.Default");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfElseSwitchAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleIfElseCase
entryRuleIfElseCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfElseCaseRule()); }
	iv_ruleIfElseCase=ruleIfElseCase
	{ $current=$iv_ruleIfElseCase.current; }
	EOF;

// Rule IfElseCase
ruleIfElseCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfElseCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseCaseAccess().getValArithmeticExpressionParserRuleCall_1_0());
				}
				lv_val_1_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseCaseRule());
					}
					set(
						$current,
						"val",
						lv_val_1_0,
						"org.mofgen.MGLang.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getIfElseCaseAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfElseCaseAccess().getBodyCaseBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleCaseBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfElseCaseRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.mofgen.MGLang.CaseBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefault
entryRuleDefault returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefaultRule()); }
	iv_ruleDefault=ruleDefault
	{ $current=$iv_ruleDefault.current; }
	EOF;

// Rule Default
ruleDefault returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='default'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefaultAccess().getDefaultKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefaultAccess().getColonKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getDefaultAccess().getCaseBodyParserRuleCall_2());
		}
		this_CaseBody_2=ruleCaseBody
		{
			$current = $this_CaseBody_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	iv_ruleSwitchCase=ruleSwitchCase
	{ $current=$iv_ruleSwitchCase.current; }
	EOF;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchCaseAccess().getSwitchKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchCaseAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchCaseAccess().getAttributeRefOrCallParserRuleCall_2_0());
				}
				lv_attribute_2_0=ruleRefOrCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
					}
					set(
						$current,
						"attribute",
						lv_attribute_2_0,
						"org.mofgen.MGLang.RefOrCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwitchCaseAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchCaseAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchCaseAccess().getCasesCaseParserRuleCall_5_0());
				}
				lv_cases_5_0=ruleCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
					}
					add(
						$current,
						"cases",
						lv_cases_5_0,
						"org.mofgen.MGLang.Case");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchCaseAccess().getDefaultDefaultParserRuleCall_6_0());
				}
				lv_default_6_0=ruleDefault
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
					}
					set(
						$current,
						"default",
						lv_default_6_0,
						"org.mofgen.MGLang.Default");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getSwitchCaseAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleCase
entryRuleCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseRule()); }
	iv_ruleCase=ruleCase
	{ $current=$iv_ruleCase.current; }
	EOF;

// Rule Case
ruleCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='case'
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseAccess().getCaseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getNodeNodeParserRuleCall_1_0());
				}
				lv_node_1_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"node",
						lv_node_1_0,
						"org.mofgen.MGLang.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='when'
			{
				newLeafNode(otherlv_2, grammarAccess.getCaseAccess().getWhenKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseAccess().getWhenArithmeticExpressionParserRuleCall_2_1_0());
					}
					lv_when_3_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseRule());
						}
						set(
							$current,
							"when",
							lv_when_3_0,
							"org.mofgen.MGLang.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getCaseAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseAccess().getBodyCaseBodyParserRuleCall_4_0());
				}
				lv_body_5_0=ruleCaseBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseRule());
					}
					set(
						$current,
						"body",
						lv_body_5_0,
						"org.mofgen.MGLang.CaseBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleCaseBody
entryRuleCaseBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseBodyRule()); }
	iv_ruleCaseBody=ruleCaseBody
	{ $current=$iv_ruleCaseBody.current; }
	EOF;

// Rule CaseBody
ruleCaseBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCaseBodyAccess().getCaseBodyAction_0_0(),
						$current);
				}
			)
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getCaseBodyAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseBodyAccess().getExpressionsGeneratorExpressionParserRuleCall_0_2_0());
					}
					lv_expressions_2_0=ruleGeneratorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseBodyRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"org.mofgen.MGLang.GeneratorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3='}'
			{
				newLeafNode(otherlv_3, grammarAccess.getCaseBodyAccess().getRightCurlyBracketKeyword_0_3());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getCaseBodyAccess().getExpressionsGeneratorExpressionParserRuleCall_1_0_0());
					}
					lv_expressions_4_0=ruleGeneratorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCaseBodyRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_4_0,
							"org.mofgen.MGLang.GeneratorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_NEWLINE_5=RULE_NEWLINE
			{
				newLeafNode(this_NEWLINE_5, grammarAccess.getCaseBodyAccess().getNEWLINETerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleCollection
entryRuleCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollectionRule()); }
	iv_ruleCollection=ruleCollection
	{ $current=$iv_ruleCollection.current; }
	EOF;

// Rule Collection
ruleCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getCollectionAccess().getListParserRuleCall_0());
		}
		this_List_0=ruleList
		{
			$current = $this_List_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCollectionAccess().getMapParserRuleCall_1());
		}
		this_Map_1=ruleMap
		{
			$current = $this_Map_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='List'
		{
			newLeafNode(otherlv_0, grammarAccess.getListAccess().getListKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getListAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getListRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			this_ASSIGNMENT_OP_2=RULE_ASSIGNMENT_OP
			{
				newLeafNode(this_ASSIGNMENT_OP_2, grammarAccess.getListAccess().getASSIGNMENT_OPTerminalRuleCall_2_0());
			}
			{
				newCompositeNode(grammarAccess.getListAccess().getListAssignmentParserRuleCall_2_1());
			}
			this_ListAssignment_3=ruleListAssignment
			{
				$current = $this_ListAssignment_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleListAssignment
entryRuleListAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListAssignmentRule()); }
	iv_ruleListAssignment=ruleListAssignment
	{ $current=$iv_ruleListAssignment.current; }
	EOF;

// Rule ListAssignment
ruleListAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getListAssignmentAccess().getListAdHocParserRuleCall_0());
		}
		this_ListAdHoc_0=ruleListAdHoc
		{
			$current = $this_ListAdHoc_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getListAssignmentAccess().getRefOrCallParserRuleCall_1());
		}
		this_RefOrCall_1=ruleRefOrCall
		{
			$current = $this_RefOrCall_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleListAdHoc
entryRuleListAdHoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListAdHocRule()); }
	iv_ruleListAdHoc=ruleListAdHoc
	{ $current=$iv_ruleListAdHoc.current; }
	EOF;

// Rule ListAdHoc
ruleListAdHoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getListAdHocAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getListAdHocAccess().getElementsLiteralParserRuleCall_1_0());
				}
				lv_elements_1_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListAdHocRule());
					}
					add(
						$current,
						"elements",
						lv_elements_1_0,
						"org.mofgen.MGLang.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getListAdHocAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getListAdHocAccess().getElementsLiteralParserRuleCall_2_1_0());
					}
					lv_elements_3_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListAdHocRule());
						}
						add(
							$current,
							"elements",
							lv_elements_3_0,
							"org.mofgen.MGLang.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getListAdHocAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMap
entryRuleMap returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapRule()); }
	iv_ruleMap=ruleMap
	{ $current=$iv_ruleMap.current; }
	EOF;

// Rule Map
ruleMap returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Map'
		{
			newLeafNode(otherlv_0, grammarAccess.getMapAccess().getMapKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getMapAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMapRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			this_ASSIGNMENT_OP_2=RULE_ASSIGNMENT_OP
			{
				newLeafNode(this_ASSIGNMENT_OP_2, grammarAccess.getMapAccess().getASSIGNMENT_OPTerminalRuleCall_2_0());
			}
			{
				newCompositeNode(grammarAccess.getMapAccess().getMapAssignmentParserRuleCall_2_1());
			}
			this_MapAssignment_3=ruleMapAssignment
			{
				$current = $this_MapAssignment_3.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMapAssignment
entryRuleMapAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapAssignmentRule()); }
	iv_ruleMapAssignment=ruleMapAssignment
	{ $current=$iv_ruleMapAssignment.current; }
	EOF;

// Rule MapAssignment
ruleMapAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMapAssignmentAccess().getMapAdHocParserRuleCall_0());
		}
		this_MapAdHoc_0=ruleMapAdHoc
		{
			$current = $this_MapAdHoc_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getMapAssignmentAccess().getRefOrCallParserRuleCall_1());
		}
		this_RefOrCall_1=ruleRefOrCall
		{
			$current = $this_RefOrCall_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleMapAdHoc
entryRuleMapAdHoc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapAdHocRule()); }
	iv_ruleMapAdHoc=ruleMapAdHoc
	{ $current=$iv_ruleMapAdHoc.current; }
	EOF;

// Rule MapAdHoc
ruleMapAdHoc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getMapAdHocAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapAdHocAccess().getEntriesMapTupelParserRuleCall_1_0());
				}
				lv_entries_1_0=ruleMapTupel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapAdHocRule());
					}
					add(
						$current,
						"entries",
						lv_entries_1_0,
						"org.mofgen.MGLang.MapTupel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getMapAdHocAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMapAdHocAccess().getEntriesMapTupelParserRuleCall_2_1_0());
					}
					lv_entries_3_0=ruleMapTupel
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMapAdHocRule());
						}
						add(
							$current,
							"entries",
							lv_entries_3_0,
							"org.mofgen.MGLang.MapTupel");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getMapAdHocAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleMapTupel
entryRuleMapTupel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMapTupelRule()); }
	iv_ruleMapTupel=ruleMapTupel
	{ $current=$iv_ruleMapTupel.current; }
	EOF;

// Rule MapTupel
ruleMapTupel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getMapTupelAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTupelAccess().getKeyLiteralParserRuleCall_1_0());
				}
				lv_key_1_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTupelRule());
					}
					set(
						$current,
						"key",
						lv_key_1_0,
						"org.mofgen.MGLang.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getMapTupelAccess().getCommaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMapTupelAccess().getValueArithmeticExpressionParserRuleCall_3_0());
				}
				lv_value_3_0=ruleArithmeticExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMapTupelRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.mofgen.MGLang.ArithmeticExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getMapTupelAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleForRange
entryRuleForRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRangeRule()); }
	iv_ruleForRange=ruleForRange
	{ $current=$iv_ruleForRange.current; }
	EOF;

// Rule ForRange
ruleForRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_start_0_0=RULE_INT
				{
					newLeafNode(lv_start_0_0, grammarAccess.getForRangeAccess().getStartINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForRangeRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getForRangeAccess().getColonKeyword_1());
		}
		(
			(
				lv_end_2_0=RULE_INT
				{
					newLeafNode(lv_end_2_0, grammarAccess.getForRangeAccess().getEndINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForRangeRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getTertiaryExpressionParserRuleCall());
	}
	this_TertiaryExpression_0=ruleTertiaryExpression
	{
		$current = $this_TertiaryExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleTertiaryExpression
entryRuleTertiaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTertiaryExpressionRule()); }
	iv_ruleTertiaryExpression=ruleTertiaryExpression
	{ $current=$iv_ruleTertiaryExpression.current; }
	EOF;

// Rule TertiaryExpression
ruleTertiaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTertiaryExpressionAccess().getSecondaryExpressionParserRuleCall_0());
		}
		this_SecondaryExpression_0=ruleSecondaryExpression
		{
			$current = $this_SecondaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getTertiaryExpressionAccess().getTertiaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTertiaryExpressionAccess().getOpTertiaryOpEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleTertiaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTertiaryExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.mofgen.MGLang.TertiaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTertiaryExpressionAccess().getRightSecondaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSecondaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTertiaryExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.mofgen.MGLang.SecondaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSecondaryExpression
entryRuleSecondaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSecondaryExpressionRule()); }
	iv_ruleSecondaryExpression=ruleSecondaryExpression
	{ $current=$iv_ruleSecondaryExpression.current; }
	EOF;

// Rule SecondaryExpression
ruleSecondaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSecondaryExpressionAccess().getPrimaryExprParserRuleCall_0());
		}
		this_PrimaryExpr_0=rulePrimaryExpr
		{
			$current = $this_PrimaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSecondaryExpressionAccess().getSecondaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSecondaryExpressionAccess().getOpSecondaryOpEnumRuleCall_1_1_0());
					}
					lv_op_2_0=ruleSecondaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSecondaryExpressionRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.mofgen.MGLang.SecondaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSecondaryExpressionAccess().getRightPrimaryExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimaryExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSecondaryExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.mofgen.MGLang.PrimaryExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExprRule()); }
	iv_rulePrimaryExpr=rulePrimaryExpr
	{ $current=$iv_rulePrimaryExpr.current; }
	EOF;

// Rule PrimaryExpr
rulePrimaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExprAccess().getRelationExpressionParserRuleCall_0());
		}
		this_RelationExpression_0=ruleRelationExpression
		{
			$current = $this_RelationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPrimaryExprAccess().getPrimaryLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getOpPrimaryOpEnumRuleCall_1_1_0());
					}
					lv_op_2_0=rulePrimaryOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"op",
							lv_op_2_0,
							"org.mofgen.MGLang.PrimaryOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExprAccess().getRightRelationExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleRelationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.mofgen.MGLang.RelationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationExpression
entryRuleRelationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationExpressionRule()); }
	iv_ruleRelationExpression=ruleRelationExpression
	{ $current=$iv_ruleRelationExpression.current; }
	EOF;

// Rule RelationExpression
ruleRelationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationExpressionAccess().getBaseExprParserRuleCall_0());
		}
		this_BaseExpr_0=ruleBaseExpr
		{
			$current = $this_BaseExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getRelationExpressionAccess().getRelLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationExpressionAccess().getRelationRelationalOpEnumRuleCall_1_1_0());
					}
					lv_relation_2_0=ruleRelationalOp
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationExpressionRule());
						}
						set(
							$current,
							"relation",
							lv_relation_2_0,
							"org.mofgen.MGLang.RelationalOp");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationExpressionAccess().getRightBaseExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBaseExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.mofgen.MGLang.BaseExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBaseExpr
entryRuleBaseExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBaseExprRule()); }
	iv_ruleBaseExpr=ruleBaseExpr
	{ $current=$iv_ruleBaseExpr.current; }
	EOF;

// Rule BaseExpr
ruleBaseExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getBaseExprAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getBaseExprAccess().getArithmeticExpressionParserRuleCall_0_1());
			}
			this_ArithmeticExpression_1=ruleArithmeticExpression
			{
				$current = $this_ArithmeticExpression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getBaseExprAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExprAccess().getNegationExpressionAction_1_0(),
						$current);
				}
			)
			otherlv_4='!'
			{
				newLeafNode(otherlv_4, grammarAccess.getBaseExprAccess().getExclamationMarkKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExprAccess().getExprBaseExprParserRuleCall_1_2_0());
					}
					lv_expr_5_0=ruleBaseExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExprRule());
						}
						set(
							$current,
							"expr",
							lv_expr_5_0,
							"org.mofgen.MGLang.BaseExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExprAccess().getFunctionCallAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExprAccess().getFuncMathFuncEnumRuleCall_2_1_0());
					}
					lv_func_7_0=ruleMathFunc
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExprRule());
						}
						set(
							$current,
							"func",
							lv_func_7_0,
							"org.mofgen.MGLang.MathFunc");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getBaseExprAccess().getLeftParenthesisKeyword_2_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBaseExprAccess().getExprArithmeticExpressionParserRuleCall_2_3_0());
					}
					lv_expr_9_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBaseExprRule());
						}
						set(
							$current,
							"expr",
							lv_expr_9_0,
							"org.mofgen.MGLang.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getBaseExprAccess().getRightParenthesisKeyword_2_4());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getBaseExprAccess().getLiteralAction_3_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getBaseExprAccess().getLiteralParserRuleCall_3_1());
			}
			ruleLiteral
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getBaseExprAccess().getRefOrCallParserRuleCall_4());
		}
		this_RefOrCall_13=ruleRefOrCall
		{
			$current = $this_RefOrCall_13.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current.getText(); }
	EOF;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0());
		}
		this_BooleanLiteral_0=ruleBooleanLiteral
		{
			$current.merge(this_BooleanLiteral_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1());
		}
		this_StringLiteral_1=ruleStringLiteral
		{
			$current.merge(this_StringLiteral_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2());
		}
		this_NumberLiteral_2=ruleNumberLiteral
		{
			$current.merge(this_NumberLiteral_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current.getText(); }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_TRUE_0=RULE_TRUE
		{
			$current.merge(this_TRUE_0);
		}
		{
			newLeafNode(this_TRUE_0, grammarAccess.getBooleanLiteralAccess().getTRUETerminalRuleCall_0());
		}
		    |
		this_FALSE_1=RULE_FALSE
		{
			$current.merge(this_FALSE_1);
		}
		{
			newLeafNode(this_FALSE_1, grammarAccess.getBooleanLiteralAccess().getFALSETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current.getText(); }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStringLiteralAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current.getText(); }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getNumberLiteralAccess().getFullStopKeyword_1_0());
			}
			this_INT_2=RULE_INT
			{
				$current.merge(this_INT_2);
			}
			{
				newLeafNode(this_INT_2, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1_1());
			}
		)?
	)
;

// Rule MathFunc
ruleMathFunc returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='sqrt'
			{
				$current = grammarAccess.getMathFuncAccess().getSQRTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMathFuncAccess().getSQRTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='abs'
			{
				$current = grammarAccess.getMathFuncAccess().getABSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMathFuncAccess().getABSEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='char'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='double'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='String'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getSTRINGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getPrimitiveTypeAccess().getSTRINGEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule RelationalOp
ruleRelationalOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getRelationalOpAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationalOpAccess().getGREATEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getRelationalOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationalOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getRelationalOpAccess().getEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationalOpAccess().getEQUALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!='
			{
				$current = grammarAccess.getRelationalOpAccess().getUNEQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationalOpAccess().getUNEQUALEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getRelationalOpAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRelationalOpAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<'
			{
				$current = grammarAccess.getRelationalOpAccess().getSMALLEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRelationalOpAccess().getSMALLEREnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule TertiaryOp
ruleTertiaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getTertiaryOpAccess().getPLUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTertiaryOpAccess().getPLUSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getTertiaryOpAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTertiaryOpAccess().getMINUSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='||'
			{
				$current = grammarAccess.getTertiaryOpAccess().getOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTertiaryOpAccess().getOREnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SecondaryOp
ruleSecondaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='%'
			{
				$current = grammarAccess.getSecondaryOpAccess().getMODEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSecondaryOpAccess().getMODEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='^'
			{
				$current = grammarAccess.getSecondaryOpAccess().getXOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSecondaryOpAccess().getXOREnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule PrimaryOp
rulePrimaryOp returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getPrimaryOpAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimaryOpAccess().getMULEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getPrimaryOpAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimaryOpAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='&&'
			{
				$current = grammarAccess.getPrimaryOpAccess().getANDEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimaryOpAccess().getANDEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_ASSIGNMENT_OP : '=';

RULE_NEWLINE : '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
