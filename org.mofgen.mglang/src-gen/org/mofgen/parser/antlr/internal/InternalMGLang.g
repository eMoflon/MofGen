/*
 * generated by Xtext 2.20.0
 */
grammar InternalMGLang;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.mofgen.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.mofgen.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mofgen.services.MGLangGrammarAccess;

}

@parser::members {

 	private MGLangGrammarAccess grammarAccess;

    public InternalMGLangParser(TokenStream input, MGLangGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "MofgenFile";
   	}

   	@Override
   	protected MGLangGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleMofgenFile
entryRuleMofgenFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMofgenFileRule()); }
	iv_ruleMofgenFile=ruleMofgenFile
	{ $current=$iv_ruleMofgenFile.current; }
	EOF;

// Rule MofgenFile
ruleMofgenFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0());
				}
				lv_imports_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMofgenFileRule());
					}
					add(
						$current,
						"imports",
						lv_imports_0_0,
						"org.mofgen.MGLang.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_1_0_0());
					}
					lv_patterns_1_0=rulePattern
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMofgenFileRule());
						}
						add(
							$current,
							"patterns",
							lv_patterns_1_0,
							"org.mofgen.MGLang.Pattern");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_1_1_0());
					}
					lv_generators_2_0=ruleGenerator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMofgenFileRule());
						}
						add(
							$current,
							"generators",
							lv_generators_2_0,
							"org.mofgen.MGLang.Generator");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='as'
		{
			newLeafNode(otherlv_2, grammarAccess.getImportAccess().getAsKeyword_2());
		}
		(
			(
				lv_alias_3_0=RULE_ID
				{
					newLeafNode(lv_alias_3_0, grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRulePattern
entryRulePattern returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternRule()); }
	iv_rulePattern=rulePattern
	{ $current=$iv_rulePattern.current; }
	EOF;

// Rule Pattern
rulePattern returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pattern'
		{
			newLeafNode(otherlv_0, grammarAccess.getPatternAccess().getPatternKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0());
						}
						lv_parameters_3_0=ruleParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPatternRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_3_0,
								"org.mofgen.MGLang.Parameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0());
							}
							lv_parameters_5_0=ruleParameter
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPatternRule());
								}
								add(
									$current,
									"parameters",
									lv_parameters_5_0,
									"org.mofgen.MGLang.Parameter");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2());
			}
		)
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getNodesNodeParserRuleCall_4_0());
				}
				lv_nodes_8_0=ruleNode
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_8_0,
						"org.mofgen.MGLang.Node");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0());
				}
				lv_return_10_0=rulePatternReturn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternRule());
					}
					set(
						$current,
						"return",
						lv_return_10_0,
						"org.mofgen.MGLang.PatternReturn");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRulePatternReturn
entryRulePatternReturn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternReturnRule()); }
	iv_rulePatternReturn=rulePatternReturn
	{ $current=$iv_rulePatternReturn.current; }
	EOF;

// Rule PatternReturn
rulePatternReturn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPatternReturnAccess().getPatternReturnAction_0(),
					$current);
			}
		)
		otherlv_1='return'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternReturnAccess().getReturnKeyword_1());
		}
		otherlv_2='this'
		{
			newLeafNode(otherlv_2, grammarAccess.getPatternReturnAccess().getThisKeyword_2());
		}
		(
			otherlv_3='.'
			{
				newLeafNode(otherlv_3, grammarAccess.getPatternReturnAccess().getFullStopKeyword_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPatternReturnRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getPatternReturnAccess().getReturnValueNodeCrossReference_3_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNode
entryRuleNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeRule()); }
	iv_ruleNode=ruleNode
	{ $current=$iv_ruleNode.current; }
	EOF;

// Rule Node
ruleNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeAccess().getCreatedByNodeConstructorParserRuleCall_2_0_0());
					}
					lv_createdBy_2_1=ruleNodeConstructor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"createdBy",
							lv_createdBy_2_1,
							"org.mofgen.MGLang.NodeConstructor");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getNodeAccess().getCreatedByPatternCallParserRuleCall_2_0_1());
					}
					lv_createdBy_2_2=rulePatternCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeRule());
						}
						set(
							$current,
							"createdBy",
							lv_createdBy_2_2,
							"org.mofgen.MGLang.PatternCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleNodeConstructor
entryRuleNodeConstructor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeConstructorRule()); }
	iv_ruleNodeConstructor=ruleNodeConstructor
	{ $current=$iv_ruleNodeConstructor.current; }
	EOF;

// Rule NodeConstructor
ruleNodeConstructor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNodeConstructorAccess().getNodeConstructorAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeConstructorAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNodeConstructorAccess().getRefsAssignsNodeReferenceOrAssignmentParserRuleCall_2_0());
				}
				lv_refsAssigns_2_0=ruleNodeReferenceOrAssignment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNodeConstructorRule());
					}
					add(
						$current,
						"refsAssigns",
						lv_refsAssigns_2_0,
						"org.mofgen.MGLang.NodeReferenceOrAssignment");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getNodeConstructorAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRulePatternCall
entryRulePatternCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternCallRule()); }
	iv_rulePatternCall=rulePatternCall
	{ $current=$iv_rulePatternCall.current; }
	EOF;

// Rule PatternCall
rulePatternCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternCallAccess().getCalledPatternCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternCallAccess().getParamsLiteralExpressionParserRuleCall_2_0());
				}
				lv_params_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternCallRule());
					}
					add(
						$current,
						"params",
						lv_params_2_0,
						"org.mofgen.MGLang.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNodeReferenceOrAssignment
entryRuleNodeReferenceOrAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentRule()); }
	iv_ruleNodeReferenceOrAssignment=ruleNodeReferenceOrAssignment
	{ $current=$iv_ruleNodeReferenceOrAssignment.current; }
	EOF;

// Rule NodeReferenceOrAssignment
ruleNodeReferenceOrAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentAccess().getPatternNodeReferenceParserRuleCall_0_0());
			}
			this_PatternNodeReference_0=rulePatternNodeReference
			{
				$current = $this_PatternNodeReference_0.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentAccess().getAssignmentParserRuleCall_0_1());
			}
			this_Assignment_1=ruleAssignment
			{
				$current = $this_Assignment_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			otherlv_2='['
			{
				newLeafNode(otherlv_2, grammarAccess.getNodeReferenceOrAssignmentAccess().getLeftSquareBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionConditionParserRuleCall_1_1_0());
					}
					lv_condition_3_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNodeReferenceOrAssignmentRule());
						}
						set(
							$current,
							"condition",
							lv_condition_3_0,
							"org.mofgen.MGLang.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=']'
			{
				newLeafNode(otherlv_4, grammarAccess.getNodeReferenceOrAssignmentAccess().getRightSquareBracketKeyword_1_2());
			}
		)?
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getLhsParameterCrossReference_0_0());
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConditionAccess().getRelationEditorRelationEnumRuleCall_1_0_0());
					}
					lv_relation_1_0=ruleEditorRelation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConditionRule());
						}
						set(
							$current,
							"relation",
							lv_relation_1_0,
							"org.mofgen.MGLang.EditorRelation");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getConditionRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getConditionAccess().getRhsParameterCrossReference_1_1_0());
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePatternNodeReference
entryRulePatternNodeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternNodeReferenceRule()); }
	iv_rulePatternNodeReference=rulePatternNodeReference
	{ $current=$iv_rulePatternNodeReference.current; }
	EOF;

// Rule PatternNodeReference
rulePatternNodeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternNodeReferenceRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_0_0());
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternNodeReferenceRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAssignmentAccess().getTargetEAttributeCrossReference_0_0());
				}
			)
		)
		this_ASSIGNMENT_OP_1=RULE_ASSIGNMENT_OP
		{
			newLeafNode(this_ASSIGNMENT_OP_1, grammarAccess.getAssignmentAccess().getASSIGNMENT_OPTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getValueLiteralExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.mofgen.MGLang.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNodeAttributeCall
entryRuleNodeAttributeCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNodeAttributeCallRule()); }
	iv_ruleNodeAttributeCall=ruleNodeAttributeCall
	{ $current=$iv_ruleNodeAttributeCall.current; }
	EOF;

// Rule NodeAttributeCall
ruleNodeAttributeCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeAttributeCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getNodeAttributeCallAccess().getNodeNodeCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getNodeAttributeCallAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNodeAttributeCallRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	iv_ruleParameter=ruleParameter
	{ $current=$iv_ruleParameter.current; }
	EOF;

// Rule Parameter
ruleParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterAccess().getPrimitiveParameterParserRuleCall_0());
		}
		this_PrimitiveParameter_0=rulePrimitiveParameter
		{
			$current = $this_PrimitiveParameter_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getParameterAccess().getObjectParameterParserRuleCall_1());
		}
		this_ObjectParameter_1=ruleObjectParameter
		{
			$current = $this_ObjectParameter_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimitiveParameter
entryRulePrimitiveParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimitiveParameterRule()); }
	iv_rulePrimitiveParameter=rulePrimitiveParameter
	{ $current=$iv_rulePrimitiveParameter.current; }
	EOF;

// Rule PrimitiveParameter
rulePrimitiveParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPrimitiveParameterAccess().getTypePrimitiveTypeEnumRuleCall_0_0());
				}
				lv_type_0_0=rulePrimitiveType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPrimitiveParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.mofgen.MGLang.PrimitiveType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPrimitiveParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimitiveParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleObjectParameter
entryRuleObjectParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectParameterRule()); }
	iv_ruleObjectParameter=ruleObjectParameter
	{ $current=$iv_ruleObjectParameter.current; }
	EOF;

// Rule ObjectParameter
ruleObjectParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectParameterRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getObjectParameterAccess().getTypeEClassifierCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjectParameterAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleStringConcatenation
entryRuleStringConcatenation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringConcatenationRule()); }
	iv_ruleStringConcatenation=ruleStringConcatenation
	{ $current=$iv_ruleStringConcatenation.current; }
	EOF;

// Rule StringConcatenation
ruleStringConcatenation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStringConcatenationAccess().getStringLiteralParserRuleCall_0());
		}
		this_StringLiteral_0=ruleStringLiteral
		{
			$current = $this_StringLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getStringConcatenationAccess().getConcatLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getStringConcatenationAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStringConcatenationAccess().getRightStringConcatenationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleStringConcatenation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStringConcatenationRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.mofgen.MGLang.StringConcatenation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleGenerator
entryRuleGenerator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorRule()); }
	iv_ruleGenerator=ruleGenerator
	{ $current=$iv_ruleGenerator.current; }
	EOF;

// Rule Generator
ruleGenerator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGeneratorAccess().getGeneratorAction_0(),
					$current);
			}
		)
		otherlv_1='gen'
		{
			newLeafNode(otherlv_1, grammarAccess.getGeneratorAccess().getGenKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2());
		}
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneratorAccess().getCommandsGeneratorElementParserRuleCall_5_0());
				}
				lv_commands_5_0=ruleGeneratorElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneratorRule());
					}
					add(
						$current,
						"commands",
						lv_commands_5_0,
						"org.mofgen.MGLang.GeneratorElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleGeneratorElement
entryRuleGeneratorElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorElementRule()); }
	iv_ruleGeneratorElement=ruleGeneratorElement
	{ $current=$iv_ruleGeneratorElement.current; }
	EOF;

// Rule GeneratorElement
ruleGeneratorElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGeneratorElementAccess().getGeneratorCommandParserRuleCall_0());
		}
		this_GeneratorCommand_0=ruleGeneratorCommand
		{
			$current = $this_GeneratorCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGeneratorElementAccess().getForLoopParserRuleCall_1());
		}
		this_ForLoop_1=ruleForLoop
		{
			$current = $this_ForLoop_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleGeneratorCommand
entryRuleGeneratorCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorCommandRule()); }
	iv_ruleGeneratorCommand=ruleGeneratorCommand
	{ $current=$iv_ruleGeneratorCommand.current; }
	EOF;

// Rule GeneratorCommand
ruleGeneratorCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getGeneratorCommandAccess().getPatternCallParserRuleCall_0());
		}
		this_PatternCall_0=rulePatternCall
		{
			$current = $this_PatternCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getGeneratorCommandAccess().getPatternObjectCreationParserRuleCall_1());
		}
		this_PatternObjectCreation_1=rulePatternObjectCreation
		{
			$current = $this_PatternObjectCreation_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePatternObjectCreation
entryRulePatternObjectCreation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternObjectCreationRule()); }
	iv_rulePatternObjectCreation=rulePatternObjectCreation
	{ $current=$iv_rulePatternObjectCreation.current; }
	EOF;

// Rule PatternObjectCreation
rulePatternObjectCreation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternObjectCreationAccess().getPObjectPatternObjectParserRuleCall_0_0());
				}
				lv_pObject_0_0=rulePatternObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternObjectCreationRule());
					}
					set(
						$current,
						"pObject",
						lv_pObject_0_0,
						"org.mofgen.MGLang.PatternObject");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_ASSIGNMENT_OP_1=RULE_ASSIGNMENT_OP
		{
			newLeafNode(this_ASSIGNMENT_OP_1, grammarAccess.getPatternObjectCreationAccess().getASSIGNMENT_OPTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPatternObjectCreationAccess().getPatternCallPatternCallParserRuleCall_2_0());
				}
				lv_patternCall_2_0=rulePatternCall
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPatternObjectCreationRule());
					}
					set(
						$current,
						"patternCall",
						lv_patternCall_2_0,
						"org.mofgen.MGLang.PatternCall");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePatternObject
entryRulePatternObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPatternObjectRule()); }
	iv_rulePatternObject=rulePatternObject
	{ $current=$iv_rulePatternObject.current; }
	EOF;

// Rule PatternObject
rulePatternObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternObjectRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getPatternObjectAccess().getTypePatternCrossReference_0_0());
				}
			)
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPatternObjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPatternObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleForLoop
entryRuleForLoop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForLoopRule()); }
	iv_ruleForLoop=ruleForLoop
	{ $current=$iv_ruleForLoop.current; }
	EOF;

// Rule ForLoop
ruleForLoop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForLoopAccess().getForKeyword_0());
		}
		(
			(
				lv_iteratorVar_1_0=RULE_ID
				{
					newLeafNode(lv_iteratorVar_1_0, grammarAccess.getForLoopAccess().getIteratorVarIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForLoopRule());
					}
					setWithLastConsumed(
						$current,
						"iteratorVar",
						lv_iteratorVar_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='in'
		{
			newLeafNode(otherlv_2, grammarAccess.getForLoopAccess().getInKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getIteratingConditionForConditionParserRuleCall_3_0());
				}
				lv_iteratingCondition_3_0=ruleForCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					set(
						$current,
						"iteratingCondition",
						lv_iteratingCondition_3_0,
						"org.mofgen.MGLang.ForCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForLoopAccess().getCommandsGeneratorCommandParserRuleCall_5_0());
				}
				lv_commands_5_0=ruleGeneratorCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForLoopRule());
					}
					add(
						$current,
						"commands",
						lv_commands_5_0,
						"org.mofgen.MGLang.GeneratorCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleForCondition
entryRuleForCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForConditionRule()); }
	iv_ruleForCondition=ruleForCondition
	{ $current=$iv_ruleForCondition.current; }
	EOF;

// Rule ForCondition
ruleForCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getForConditionAccess().getForEachCollectionParserRuleCall_0());
		}
		this_ForEachCollection_0=ruleForEachCollection
		{
			$current = $this_ForEachCollection_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getForConditionAccess().getForRangeParserRuleCall_1());
		}
		this_ForRange_1=ruleForRange
		{
			$current = $this_ForRange_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForEachCollection
entryRuleForEachCollection returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForEachCollectionRule()); }
	iv_ruleForEachCollection=ruleForEachCollection
	{ $current=$iv_ruleForEachCollection.current; }
	EOF;

// Rule ForEachCollection
ruleForEachCollection returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getForEachCollectionAccess().getCollNodeAttributeCallParserRuleCall_0());
			}
			lv_coll_0_0=ruleNodeAttributeCall
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getForEachCollectionRule());
				}
				set(
					$current,
					"coll",
					lv_coll_0_0,
					"org.mofgen.MGLang.NodeAttributeCall");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleForRange
entryRuleForRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRangeRule()); }
	iv_ruleForRange=ruleForRange
	{ $current=$iv_ruleForRange.current; }
	EOF;

// Rule ForRange
ruleForRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_start_0_0=RULE_INT
				{
					newLeafNode(lv_start_0_0, grammarAccess.getForRangeAccess().getStartINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForRangeRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getForRangeAccess().getColonKeyword_1());
		}
		(
			(
				lv_end_2_0=RULE_INT
				{
					newLeafNode(lv_end_2_0, grammarAccess.getForRangeAccess().getEndINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForRangeRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						lv_value_1_1='true'
						{
							newLeafNode(lv_value_1_1, grammarAccess.getLiteralExpressionAccess().getValueTrueKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLiteralExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_1_1, null);
						}
						    |
						lv_value_1_2='false'
						{
							newLeafNode(lv_value_1_2, grammarAccess.getLiteralExpressionAccess().getValueFalseKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getLiteralExpressionRule());
							}
							setWithLastConsumed($current, "value", lv_value_1_2, null);
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getNumberLiteralAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_value_3_0='-'
					{
						newLeafNode(lv_value_3_0, grammarAccess.getLiteralExpressionAccess().getValueHyphenMinusKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
						setWithLastConsumed($current, "value", lv_value_3_0, "-");
					}
				)
			)?
			this_INT_4=RULE_INT
			{
				newLeafNode(this_INT_4, grammarAccess.getLiteralExpressionAccess().getINTTerminalRuleCall_1_2());
			}
			(
				otherlv_5='.'
				{
					newLeafNode(otherlv_5, grammarAccess.getLiteralExpressionAccess().getFullStopKeyword_1_3_0());
				}
				this_INT_6=RULE_INT
				{
					newLeafNode(this_INT_6, grammarAccess.getLiteralExpressionAccess().getINTTerminalRuleCall_1_3_1());
				}
			)?
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralExpressionAccess().getValueStringConcatenationParserRuleCall_2_1_0());
					}
					lv_value_8_0=ruleStringConcatenation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_8_0,
							"org.mofgen.MGLang.StringConcatenation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Rule PrimitiveType
rulePrimitiveType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='char'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='double'
			{
				$current = grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule EditorRelation
ruleEditorRelation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>'
			{
				$current = grammarAccess.getEditorRelationAccess().getGREATEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEditorRelationAccess().getGREATEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>='
			{
				$current = grammarAccess.getEditorRelationAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEditorRelationAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getEditorRelationAccess().getEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEditorRelationAccess().getEQUALEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!='
			{
				$current = grammarAccess.getEditorRelationAccess().getUNEQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEditorRelationAccess().getUNEQUALEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getEditorRelationAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getEditorRelationAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<'
			{
				$current = grammarAccess.getEditorRelationAccess().getSMALLEREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getEditorRelationAccess().getSMALLEREnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ASSIGNMENT_OP : '=';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
