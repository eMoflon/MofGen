/**
 * generated by Xtext 2.20.0
 */
package org.mofgen.mGLang.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.mofgen.mGLang.And;
import org.mofgen.mGLang.Assignment;
import org.mofgen.mGLang.BooleanExpression;
import org.mofgen.mGLang.BooleanLiteral;
import org.mofgen.mGLang.Concat;
import org.mofgen.mGLang.ForCondition;
import org.mofgen.mGLang.ForEachCollection;
import org.mofgen.mGLang.ForLoop;
import org.mofgen.mGLang.ForRange;
import org.mofgen.mGLang.GenPatternCall;
import org.mofgen.mGLang.Generator;
import org.mofgen.mGLang.GeneratorCommand;
import org.mofgen.mGLang.GeneratorElement;
import org.mofgen.mGLang.Import;
import org.mofgen.mGLang.MGLangFactory;
import org.mofgen.mGLang.MGLangPackage;
import org.mofgen.mGLang.MethodCall;
import org.mofgen.mGLang.MofgenFile;
import org.mofgen.mGLang.NegatedBoolean;
import org.mofgen.mGLang.Node;
import org.mofgen.mGLang.NodeAttributeCall;
import org.mofgen.mGLang.NodeConstructor;
import org.mofgen.mGLang.NodeReferenceOrAssignment;
import org.mofgen.mGLang.NumberLiteral;
import org.mofgen.mGLang.ObjectParameter;
import org.mofgen.mGLang.Or;
import org.mofgen.mGLang.Parameter;
import org.mofgen.mGLang.ParameterOrMethodCall;
import org.mofgen.mGLang.ParameterRef;
import org.mofgen.mGLang.Pattern;
import org.mofgen.mGLang.PatternCall;
import org.mofgen.mGLang.PatternNodeReference;
import org.mofgen.mGLang.PatternObject;
import org.mofgen.mGLang.PatternObjectCreation;
import org.mofgen.mGLang.PatternReturn;
import org.mofgen.mGLang.PrimitiveParameter;
import org.mofgen.mGLang.PrimitiveType;
import org.mofgen.mGLang.RelationalOp;
import org.mofgen.mGLang.STRING;
import org.mofgen.mGLang.StringExpression;
import org.mofgen.mGLang.Xor;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MGLangFactoryImpl extends EFactoryImpl implements MGLangFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MGLangFactory init()
  {
    try
    {
      MGLangFactory theMGLangFactory = (MGLangFactory)EPackage.Registry.INSTANCE.getEFactory(MGLangPackage.eNS_URI);
      if (theMGLangFactory != null)
      {
        return theMGLangFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MGLangFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MGLangFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MGLangPackage.MOFGEN_FILE: return createMofgenFile();
      case MGLangPackage.IMPORT: return createImport();
      case MGLangPackage.PATTERN: return createPattern();
      case MGLangPackage.PATTERN_RETURN: return createPatternReturn();
      case MGLangPackage.NODE: return createNode();
      case MGLangPackage.NODE_CONSTRUCTOR: return createNodeConstructor();
      case MGLangPackage.PATTERN_CALL: return createPatternCall();
      case MGLangPackage.NODE_REFERENCE_OR_ASSIGNMENT: return createNodeReferenceOrAssignment();
      case MGLangPackage.PATTERN_NODE_REFERENCE: return createPatternNodeReference();
      case MGLangPackage.ASSIGNMENT: return createAssignment();
      case MGLangPackage.NODE_ATTRIBUTE_CALL: return createNodeAttributeCall();
      case MGLangPackage.PARAMETER: return createParameter();
      case MGLangPackage.PRIMITIVE_PARAMETER: return createPrimitiveParameter();
      case MGLangPackage.OBJECT_PARAMETER: return createObjectParameter();
      case MGLangPackage.PARAMETER_OR_METHOD_CALL: return createParameterOrMethodCall();
      case MGLangPackage.PARAMETER_REF: return createParameterRef();
      case MGLangPackage.METHOD_CALL: return createMethodCall();
      case MGLangPackage.BOOLEAN_EXPRESSION: return createBooleanExpression();
      case MGLangPackage.NUMBER_LITERAL: return createNumberLiteral();
      case MGLangPackage.STRING_EXPRESSION: return createStringExpression();
      case MGLangPackage.STRING: return createSTRING();
      case MGLangPackage.GENERATOR: return createGenerator();
      case MGLangPackage.GENERATOR_ELEMENT: return createGeneratorElement();
      case MGLangPackage.GENERATOR_COMMAND: return createGeneratorCommand();
      case MGLangPackage.GEN_PATTERN_CALL: return createGenPatternCall();
      case MGLangPackage.PATTERN_OBJECT_CREATION: return createPatternObjectCreation();
      case MGLangPackage.PATTERN_OBJECT: return createPatternObject();
      case MGLangPackage.FOR_LOOP: return createForLoop();
      case MGLangPackage.FOR_CONDITION: return createForCondition();
      case MGLangPackage.FOR_EACH_COLLECTION: return createForEachCollection();
      case MGLangPackage.FOR_RANGE: return createForRange();
      case MGLangPackage.OR: return createOr();
      case MGLangPackage.XOR: return createXor();
      case MGLangPackage.AND: return createAnd();
      case MGLangPackage.NEGATED_BOOLEAN: return createNegatedBoolean();
      case MGLangPackage.BOOLEAN_LITERAL: return createBooleanLiteral();
      case MGLangPackage.CONCAT: return createConcat();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MGLangPackage.BOOLEAN:
        return createBooleanFromString(eDataType, initialValue);
      case MGLangPackage.PRIMITIVE_TYPE:
        return createPrimitiveTypeFromString(eDataType, initialValue);
      case MGLangPackage.RELATIONAL_OP:
        return createRelationalOpFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MGLangPackage.BOOLEAN:
        return convertBooleanToString(eDataType, instanceValue);
      case MGLangPackage.PRIMITIVE_TYPE:
        return convertPrimitiveTypeToString(eDataType, instanceValue);
      case MGLangPackage.RELATIONAL_OP:
        return convertRelationalOpToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MofgenFile createMofgenFile()
  {
    MofgenFileImpl mofgenFile = new MofgenFileImpl();
    return mofgenFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pattern createPattern()
  {
    PatternImpl pattern = new PatternImpl();
    return pattern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternReturn createPatternReturn()
  {
    PatternReturnImpl patternReturn = new PatternReturnImpl();
    return patternReturn;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Node createNode()
  {
    NodeImpl node = new NodeImpl();
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeConstructor createNodeConstructor()
  {
    NodeConstructorImpl nodeConstructor = new NodeConstructorImpl();
    return nodeConstructor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternCall createPatternCall()
  {
    PatternCallImpl patternCall = new PatternCallImpl();
    return patternCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeReferenceOrAssignment createNodeReferenceOrAssignment()
  {
    NodeReferenceOrAssignmentImpl nodeReferenceOrAssignment = new NodeReferenceOrAssignmentImpl();
    return nodeReferenceOrAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternNodeReference createPatternNodeReference()
  {
    PatternNodeReferenceImpl patternNodeReference = new PatternNodeReferenceImpl();
    return patternNodeReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NodeAttributeCall createNodeAttributeCall()
  {
    NodeAttributeCallImpl nodeAttributeCall = new NodeAttributeCallImpl();
    return nodeAttributeCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimitiveParameter createPrimitiveParameter()
  {
    PrimitiveParameterImpl primitiveParameter = new PrimitiveParameterImpl();
    return primitiveParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjectParameter createObjectParameter()
  {
    ObjectParameterImpl objectParameter = new ObjectParameterImpl();
    return objectParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterOrMethodCall createParameterOrMethodCall()
  {
    ParameterOrMethodCallImpl parameterOrMethodCall = new ParameterOrMethodCallImpl();
    return parameterOrMethodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterRef createParameterRef()
  {
    ParameterRefImpl parameterRef = new ParameterRefImpl();
    return parameterRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MethodCall createMethodCall()
  {
    MethodCallImpl methodCall = new MethodCallImpl();
    return methodCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanExpression createBooleanExpression()
  {
    BooleanExpressionImpl booleanExpression = new BooleanExpressionImpl();
    return booleanExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberLiteral createNumberLiteral()
  {
    NumberLiteralImpl numberLiteral = new NumberLiteralImpl();
    return numberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpression createStringExpression()
  {
    StringExpressionImpl stringExpression = new StringExpressionImpl();
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public STRING createSTRING()
  {
    STRINGImpl string = new STRINGImpl();
    return string;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generator createGenerator()
  {
    GeneratorImpl generator = new GeneratorImpl();
    return generator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneratorElement createGeneratorElement()
  {
    GeneratorElementImpl generatorElement = new GeneratorElementImpl();
    return generatorElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneratorCommand createGeneratorCommand()
  {
    GeneratorCommandImpl generatorCommand = new GeneratorCommandImpl();
    return generatorCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GenPatternCall createGenPatternCall()
  {
    GenPatternCallImpl genPatternCall = new GenPatternCallImpl();
    return genPatternCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternObjectCreation createPatternObjectCreation()
  {
    PatternObjectCreationImpl patternObjectCreation = new PatternObjectCreationImpl();
    return patternObjectCreation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PatternObject createPatternObject()
  {
    PatternObjectImpl patternObject = new PatternObjectImpl();
    return patternObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForLoop createForLoop()
  {
    ForLoopImpl forLoop = new ForLoopImpl();
    return forLoop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForCondition createForCondition()
  {
    ForConditionImpl forCondition = new ForConditionImpl();
    return forCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForEachCollection createForEachCollection()
  {
    ForEachCollectionImpl forEachCollection = new ForEachCollectionImpl();
    return forEachCollection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForRange createForRange()
  {
    ForRangeImpl forRange = new ForRangeImpl();
    return forRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Xor createXor()
  {
    XorImpl xor = new XorImpl();
    return xor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NegatedBoolean createNegatedBoolean()
  {
    NegatedBooleanImpl negatedBoolean = new NegatedBooleanImpl();
    return negatedBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanLiteral createBooleanLiteral()
  {
    BooleanLiteralImpl booleanLiteral = new BooleanLiteralImpl();
    return booleanLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concat createConcat()
  {
    ConcatImpl concat = new ConcatImpl();
    return concat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public org.mofgen.mGLang.Boolean createBooleanFromString(EDataType eDataType, String initialValue)
  {
    org.mofgen.mGLang.Boolean result = org.mofgen.mGLang.Boolean.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PrimitiveType createPrimitiveTypeFromString(EDataType eDataType, String initialValue)
  {
    PrimitiveType result = PrimitiveType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPrimitiveTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RelationalOp createRelationalOpFromString(EDataType eDataType, String initialValue)
  {
    RelationalOp result = RelationalOp.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRelationalOpToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MGLangPackage getMGLangPackage()
  {
    return (MGLangPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MGLangPackage getPackage()
  {
    return MGLangPackage.eINSTANCE;
  }

} //MGLangFactoryImpl
