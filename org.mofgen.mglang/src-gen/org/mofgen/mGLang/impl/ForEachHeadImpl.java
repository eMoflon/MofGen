/**
 * generated by Xtext 2.20.0
 */
package org.mofgen.mGLang.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.mofgen.mGLang.ForEachHead;
import org.mofgen.mGLang.MGLangPackage;
import org.mofgen.mGLang.RefOrCall;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Each Head</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.mofgen.mGLang.impl.ForEachHeadImpl#getSrc <em>Src</em>}</li>
 *   <li>{@link org.mofgen.mGLang.impl.ForEachHeadImpl#getEref <em>Eref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForEachHeadImpl extends ForHeadImpl implements ForEachHead
{
  /**
   * The cached value of the '{@link #getSrc() <em>Src</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSrc()
   * @generated
   * @ordered
   */
  protected RefOrCall src;

  /**
   * The cached value of the '{@link #getEref() <em>Eref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEref()
   * @generated
   * @ordered
   */
  protected EReference eref;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForEachHeadImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MGLangPackage.Literals.FOR_EACH_HEAD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RefOrCall getSrc()
  {
    return src;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSrc(RefOrCall newSrc, NotificationChain msgs)
  {
    RefOrCall oldSrc = src;
    src = newSrc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGLangPackage.FOR_EACH_HEAD__SRC, oldSrc, newSrc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSrc(RefOrCall newSrc)
  {
    if (newSrc != src)
    {
      NotificationChain msgs = null;
      if (src != null)
        msgs = ((InternalEObject)src).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.FOR_EACH_HEAD__SRC, null, msgs);
      if (newSrc != null)
        msgs = ((InternalEObject)newSrc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.FOR_EACH_HEAD__SRC, null, msgs);
      msgs = basicSetSrc(newSrc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGLangPackage.FOR_EACH_HEAD__SRC, newSrc, newSrc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getEref()
  {
    if (eref != null && eref.eIsProxy())
    {
      InternalEObject oldEref = (InternalEObject)eref;
      eref = (EReference)eResolveProxy(oldEref);
      if (eref != oldEref)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MGLangPackage.FOR_EACH_HEAD__EREF, oldEref, eref));
      }
    }
    return eref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference basicGetEref()
  {
    return eref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEref(EReference newEref)
  {
    EReference oldEref = eref;
    eref = newEref;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGLangPackage.FOR_EACH_HEAD__EREF, oldEref, eref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_EACH_HEAD__SRC:
        return basicSetSrc(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_EACH_HEAD__SRC:
        return getSrc();
      case MGLangPackage.FOR_EACH_HEAD__EREF:
        if (resolve) return getEref();
        return basicGetEref();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_EACH_HEAD__SRC:
        setSrc((RefOrCall)newValue);
        return;
      case MGLangPackage.FOR_EACH_HEAD__EREF:
        setEref((EReference)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_EACH_HEAD__SRC:
        setSrc((RefOrCall)null);
        return;
      case MGLangPackage.FOR_EACH_HEAD__EREF:
        setEref((EReference)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_EACH_HEAD__SRC:
        return src != null;
      case MGLangPackage.FOR_EACH_HEAD__EREF:
        return eref != null;
    }
    return super.eIsSet(featureID);
  }

} //ForEachHeadImpl
