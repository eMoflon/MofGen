/**
 * generated by Xtext 2.20.0
 */
package org.mofgen.mGLang.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.mofgen.mGLang.ForCondition;
import org.mofgen.mGLang.ForLoop;
import org.mofgen.mGLang.GeneratorCommand;
import org.mofgen.mGLang.MGLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Loop</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.mofgen.mGLang.impl.ForLoopImpl#getIteratorVar <em>Iterator Var</em>}</li>
 *   <li>{@link org.mofgen.mGLang.impl.ForLoopImpl#getIteratingCondition <em>Iterating Condition</em>}</li>
 *   <li>{@link org.mofgen.mGLang.impl.ForLoopImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForLoopImpl extends GeneratorElementImpl implements ForLoop
{
  /**
   * The default value of the '{@link #getIteratorVar() <em>Iterator Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIteratorVar()
   * @generated
   * @ordered
   */
  protected static final String ITERATOR_VAR_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIteratorVar() <em>Iterator Var</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIteratorVar()
   * @generated
   * @ordered
   */
  protected String iteratorVar = ITERATOR_VAR_EDEFAULT;

  /**
   * The cached value of the '{@link #getIteratingCondition() <em>Iterating Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIteratingCondition()
   * @generated
   * @ordered
   */
  protected ForCondition iteratingCondition;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<GeneratorCommand> commands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForLoopImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MGLangPackage.Literals.FOR_LOOP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getIteratorVar()
  {
    return iteratorVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIteratorVar(String newIteratorVar)
  {
    String oldIteratorVar = iteratorVar;
    iteratorVar = newIteratorVar;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGLangPackage.FOR_LOOP__ITERATOR_VAR, oldIteratorVar, iteratorVar));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForCondition getIteratingCondition()
  {
    return iteratingCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIteratingCondition(ForCondition newIteratingCondition, NotificationChain msgs)
  {
    ForCondition oldIteratingCondition = iteratingCondition;
    iteratingCondition = newIteratingCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGLangPackage.FOR_LOOP__ITERATING_CONDITION, oldIteratingCondition, newIteratingCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIteratingCondition(ForCondition newIteratingCondition)
  {
    if (newIteratingCondition != iteratingCondition)
    {
      NotificationChain msgs = null;
      if (iteratingCondition != null)
        msgs = ((InternalEObject)iteratingCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.FOR_LOOP__ITERATING_CONDITION, null, msgs);
      if (newIteratingCondition != null)
        msgs = ((InternalEObject)newIteratingCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.FOR_LOOP__ITERATING_CONDITION, null, msgs);
      msgs = basicSetIteratingCondition(newIteratingCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGLangPackage.FOR_LOOP__ITERATING_CONDITION, newIteratingCondition, newIteratingCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GeneratorCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<GeneratorCommand>(GeneratorCommand.class, this, MGLangPackage.FOR_LOOP__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_LOOP__ITERATING_CONDITION:
        return basicSetIteratingCondition(null, msgs);
      case MGLangPackage.FOR_LOOP__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_LOOP__ITERATOR_VAR:
        return getIteratorVar();
      case MGLangPackage.FOR_LOOP__ITERATING_CONDITION:
        return getIteratingCondition();
      case MGLangPackage.FOR_LOOP__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_LOOP__ITERATOR_VAR:
        setIteratorVar((String)newValue);
        return;
      case MGLangPackage.FOR_LOOP__ITERATING_CONDITION:
        setIteratingCondition((ForCondition)newValue);
        return;
      case MGLangPackage.FOR_LOOP__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends GeneratorCommand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_LOOP__ITERATOR_VAR:
        setIteratorVar(ITERATOR_VAR_EDEFAULT);
        return;
      case MGLangPackage.FOR_LOOP__ITERATING_CONDITION:
        setIteratingCondition((ForCondition)null);
        return;
      case MGLangPackage.FOR_LOOP__COMMANDS:
        getCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MGLangPackage.FOR_LOOP__ITERATOR_VAR:
        return ITERATOR_VAR_EDEFAULT == null ? iteratorVar != null : !ITERATOR_VAR_EDEFAULT.equals(iteratorVar);
      case MGLangPackage.FOR_LOOP__ITERATING_CONDITION:
        return iteratingCondition != null;
      case MGLangPackage.FOR_LOOP__COMMANDS:
        return commands != null && !commands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (iteratorVar: ");
    result.append(iteratorVar);
    result.append(')');
    return result.toString();
  }

} //ForLoopImpl
