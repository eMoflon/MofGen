/**
 * generated by Xtext 2.20.0
 */
package org.mofgen.mGLang.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.mofgen.mGLang.ArithmeticExpression;
import org.mofgen.mGLang.ElseIfOrElse;
import org.mofgen.mGLang.GeneratorExpression;
import org.mofgen.mGLang.MGLangPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Else If Or Else</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.mofgen.mGLang.impl.ElseIfOrElseImpl#getCond <em>Cond</em>}</li>
 *   <li>{@link org.mofgen.mGLang.impl.ElseIfOrElseImpl#getThen <em>Then</em>}</li>
 *   <li>{@link org.mofgen.mGLang.impl.ElseIfOrElseImpl#getElseIf <em>Else If</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ElseIfOrElseImpl extends MinimalEObjectImpl.Container implements ElseIfOrElse
{
  /**
   * The cached value of the '{@link #getCond() <em>Cond</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCond()
   * @generated
   * @ordered
   */
  protected ArithmeticExpression cond;

  /**
   * The cached value of the '{@link #getThen() <em>Then</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThen()
   * @generated
   * @ordered
   */
  protected EList<GeneratorExpression> then;

  /**
   * The cached value of the '{@link #getElseIf() <em>Else If</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElseIf()
   * @generated
   * @ordered
   */
  protected ElseIfOrElse elseIf;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElseIfOrElseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MGLangPackage.Literals.ELSE_IF_OR_ELSE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticExpression getCond()
  {
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCond(ArithmeticExpression newCond, NotificationChain msgs)
  {
    ArithmeticExpression oldCond = cond;
    cond = newCond;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGLangPackage.ELSE_IF_OR_ELSE__COND, oldCond, newCond);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCond(ArithmeticExpression newCond)
  {
    if (newCond != cond)
    {
      NotificationChain msgs = null;
      if (cond != null)
        msgs = ((InternalEObject)cond).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.ELSE_IF_OR_ELSE__COND, null, msgs);
      if (newCond != null)
        msgs = ((InternalEObject)newCond).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.ELSE_IF_OR_ELSE__COND, null, msgs);
      msgs = basicSetCond(newCond, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGLangPackage.ELSE_IF_OR_ELSE__COND, newCond, newCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<GeneratorExpression> getThen()
  {
    if (then == null)
    {
      then = new EObjectContainmentEList<GeneratorExpression>(GeneratorExpression.class, this, MGLangPackage.ELSE_IF_OR_ELSE__THEN);
    }
    return then;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElseIfOrElse getElseIf()
  {
    return elseIf;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetElseIf(ElseIfOrElse newElseIf, NotificationChain msgs)
  {
    ElseIfOrElse oldElseIf = elseIf;
    elseIf = newElseIf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF, oldElseIf, newElseIf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElseIf(ElseIfOrElse newElseIf)
  {
    if (newElseIf != elseIf)
    {
      NotificationChain msgs = null;
      if (elseIf != null)
        msgs = ((InternalEObject)elseIf).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF, null, msgs);
      if (newElseIf != null)
        msgs = ((InternalEObject)newElseIf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF, null, msgs);
      msgs = basicSetElseIf(newElseIf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF, newElseIf, newElseIf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MGLangPackage.ELSE_IF_OR_ELSE__COND:
        return basicSetCond(null, msgs);
      case MGLangPackage.ELSE_IF_OR_ELSE__THEN:
        return ((InternalEList<?>)getThen()).basicRemove(otherEnd, msgs);
      case MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF:
        return basicSetElseIf(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MGLangPackage.ELSE_IF_OR_ELSE__COND:
        return getCond();
      case MGLangPackage.ELSE_IF_OR_ELSE__THEN:
        return getThen();
      case MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF:
        return getElseIf();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MGLangPackage.ELSE_IF_OR_ELSE__COND:
        setCond((ArithmeticExpression)newValue);
        return;
      case MGLangPackage.ELSE_IF_OR_ELSE__THEN:
        getThen().clear();
        getThen().addAll((Collection<? extends GeneratorExpression>)newValue);
        return;
      case MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF:
        setElseIf((ElseIfOrElse)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MGLangPackage.ELSE_IF_OR_ELSE__COND:
        setCond((ArithmeticExpression)null);
        return;
      case MGLangPackage.ELSE_IF_OR_ELSE__THEN:
        getThen().clear();
        return;
      case MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF:
        setElseIf((ElseIfOrElse)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MGLangPackage.ELSE_IF_OR_ELSE__COND:
        return cond != null;
      case MGLangPackage.ELSE_IF_OR_ELSE__THEN:
        return then != null && !then.isEmpty();
      case MGLangPackage.ELSE_IF_OR_ELSE__ELSE_IF:
        return elseIf != null;
    }
    return super.eIsSet(featureID);
  }

} //ElseIfOrElseImpl
