/**
 * generated by Xtext 2.20.0
 */
package org.mofgen.mGLang.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.mofgen.mGLang.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.mofgen.mGLang.MGLangPackage
 * @generated
 */
public class MGLangSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MGLangPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MGLangSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MGLangPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MGLangPackage.MOFGEN_FILE:
      {
        MofgenFile mofgenFile = (MofgenFile)theEObject;
        T result = caseMofgenFile(mofgenFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.IMPORT:
      {
        Import import_ = (Import)theEObject;
        T result = caseImport(import_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PATTERN:
      {
        Pattern pattern = (Pattern)theEObject;
        T result = casePattern(pattern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PATTERN_RETURN:
      {
        PatternReturn patternReturn = (PatternReturn)theEObject;
        T result = casePatternReturn(patternReturn);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PARAM_MANIPULATION:
      {
        ParamManipulation paramManipulation = (ParamManipulation)theEObject;
        T result = caseParamManipulation(paramManipulation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.NODE:
      {
        Node node = (Node)theEObject;
        T result = caseNode(node);
        if (result == null) result = caseNodeOrParameterOrCollection(node);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.NODE_CONTENT:
      {
        NodeContent nodeContent = (NodeContent)theEObject;
        T result = caseNodeContent(nodeContent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PATTERN_CALL:
      {
        PatternCall patternCall = (PatternCall)theEObject;
        T result = casePatternCall(patternCall);
        if (result == null) result = caseGeneratorCommand(patternCall);
        if (result == null) result = caseDefault(patternCall);
        if (result == null) result = caseCaseBody(patternCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.NODE_REFERENCE_OR_ASSIGNMENT:
      {
        NodeReferenceOrAssignment nodeReferenceOrAssignment = (NodeReferenceOrAssignment)theEObject;
        T result = caseNodeReferenceOrAssignment(nodeReferenceOrAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PATTERN_NODE_REFERENCE:
      {
        PatternNodeReference patternNodeReference = (PatternNodeReference)theEObject;
        T result = casePatternNodeReference(patternNodeReference);
        if (result == null) result = caseNodeReferenceOrAssignment(patternNodeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseNodeReferenceOrAssignment(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.NODE_ATTRIBUTE_CALL:
      {
        NodeAttributeCall nodeAttributeCall = (NodeAttributeCall)theEObject;
        T result = caseNodeAttributeCall(nodeAttributeCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PARAMETER:
      {
        Parameter parameter = (Parameter)theEObject;
        T result = caseParameter(parameter);
        if (result == null) result = caseNodeOrParameterOrCollection(parameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PRIMITIVE_PARAMETER:
      {
        PrimitiveParameter primitiveParameter = (PrimitiveParameter)theEObject;
        T result = casePrimitiveParameter(primitiveParameter);
        if (result == null) result = caseParameter(primitiveParameter);
        if (result == null) result = caseNodeOrParameterOrCollection(primitiveParameter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PARAMETER_NODE:
      {
        ParameterNode parameterNode = (ParameterNode)theEObject;
        T result = caseParameterNode(parameterNode);
        if (result == null) result = caseParameter(parameterNode);
        if (result == null) result = caseNodeOrParameterOrCollection(parameterNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PARAMETER_REF_OR_METHOD_CALL:
      {
        ParameterRefOrMethodCall parameterRefOrMethodCall = (ParameterRefOrMethodCall)theEObject;
        T result = caseParameterRefOrMethodCall(parameterRefOrMethodCall);
        if (result == null) result = caseArithmeticExpression(parameterRefOrMethodCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PARAMETER_REF:
      {
        ParameterRef parameterRef = (ParameterRef)theEObject;
        T result = caseParameterRef(parameterRef);
        if (result == null) result = caseParameterRefOrMethodCall(parameterRef);
        if (result == null) result = caseArithmeticExpression(parameterRef);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.METHOD_CALL:
      {
        MethodCall methodCall = (MethodCall)theEObject;
        T result = caseMethodCall(methodCall);
        if (result == null) result = caseParameterRefOrMethodCall(methodCall);
        if (result == null) result = caseArithmeticExpression(methodCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.ARITHMETIC_EXPRESSION:
      {
        ArithmeticExpression arithmeticExpression = (ArithmeticExpression)theEObject;
        T result = caseArithmeticExpression(arithmeticExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.GENERATOR:
      {
        Generator generator = (Generator)theEObject;
        T result = caseGenerator(generator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.GENERATOR_COMMAND:
      {
        GeneratorCommand generatorCommand = (GeneratorCommand)theEObject;
        T result = caseGeneratorCommand(generatorCommand);
        if (result == null) result = caseDefault(generatorCommand);
        if (result == null) result = caseCaseBody(generatorCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PATTERN_OBJECT_CREATION:
      {
        PatternObjectCreation patternObjectCreation = (PatternObjectCreation)theEObject;
        T result = casePatternObjectCreation(patternObjectCreation);
        if (result == null) result = caseGeneratorCommand(patternObjectCreation);
        if (result == null) result = caseDefault(patternObjectCreation);
        if (result == null) result = caseCaseBody(patternObjectCreation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PATTERN_OBJECT:
      {
        PatternObject patternObject = (PatternObject)theEObject;
        T result = casePatternObject(patternObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.FOR_STATEMENT:
      {
        ForStatement forStatement = (ForStatement)theEObject;
        T result = caseForStatement(forStatement);
        if (result == null) result = caseGeneratorCommand(forStatement);
        if (result == null) result = caseDefault(forStatement);
        if (result == null) result = caseCaseBody(forStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.FOR_HEAD:
      {
        ForHead forHead = (ForHead)theEObject;
        T result = caseForHead(forHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.GENERAL_FOR_HEAD:
      {
        GeneralForHead generalForHead = (GeneralForHead)theEObject;
        T result = caseGeneralForHead(generalForHead);
        if (result == null) result = caseForHead(generalForHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.FOR_EACH_HEAD:
      {
        ForEachHead forEachHead = (ForEachHead)theEObject;
        T result = caseForEachHead(forEachHead);
        if (result == null) result = caseForHead(forEachHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.NODE_OR_PARAMETER_OR_COLLECTION:
      {
        NodeOrParameterOrCollection nodeOrParameterOrCollection = (NodeOrParameterOrCollection)theEObject;
        T result = caseNodeOrParameterOrCollection(nodeOrParameterOrCollection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.FOR_BODY:
      {
        ForBody forBody = (ForBody)theEObject;
        T result = caseForBody(forBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseGeneratorCommand(ifStatement);
        if (result == null) result = caseDefault(ifStatement);
        if (result == null) result = caseCaseBody(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.SINGLE_LINE_IF:
      {
        SingleLineIf singleLineIf = (SingleLineIf)theEObject;
        T result = caseSingleLineIf(singleLineIf);
        if (result == null) result = caseIfStatement(singleLineIf);
        if (result == null) result = caseGeneratorCommand(singleLineIf);
        if (result == null) result = caseDefault(singleLineIf);
        if (result == null) result = caseCaseBody(singleLineIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.GEN_COMMAND_BLOCK:
      {
        GenCommandBlock genCommandBlock = (GenCommandBlock)theEObject;
        T result = caseGenCommandBlock(genCommandBlock);
        if (result == null) result = caseForBody(genCommandBlock);
        if (result == null) result = caseCaseBody(genCommandBlock);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.BLOCK_IF:
      {
        BlockIf blockIf = (BlockIf)theEObject;
        T result = caseBlockIf(blockIf);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.IF_HEAD_AND_BODY:
      {
        IfHeadAndBody ifHeadAndBody = (IfHeadAndBody)theEObject;
        T result = caseIfHeadAndBody(ifHeadAndBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.IF_HEAD:
      {
        IfHead ifHead = (IfHead)theEObject;
        T result = caseIfHead(ifHead);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.IF_BODY:
      {
        IfBody ifBody = (IfBody)theEObject;
        T result = caseIfBody(ifBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.SWITCH_CASE:
      {
        SwitchCase switchCase = (SwitchCase)theEObject;
        T result = caseSwitchCase(switchCase);
        if (result == null) result = caseGeneratorCommand(switchCase);
        if (result == null) result = caseDefault(switchCase);
        if (result == null) result = caseCaseBody(switchCase);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.DEFAULT:
      {
        Default default_ = (Default)theEObject;
        T result = caseDefault(default_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.CASE:
      {
        Case case_ = (Case)theEObject;
        T result = caseCase(case_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.CASE_BODY:
      {
        CaseBody caseBody = (CaseBody)theEObject;
        T result = caseCaseBody(caseBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.COLLECTION:
      {
        Collection collection = (Collection)theEObject;
        T result = caseCollection(collection);
        if (result == null) result = caseGeneratorCommand(collection);
        if (result == null) result = caseNodeOrParameterOrCollection(collection);
        if (result == null) result = caseDefault(collection);
        if (result == null) result = caseCaseBody(collection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.LIST:
      {
        List list = (List)theEObject;
        T result = caseList(list);
        if (result == null) result = caseCollection(list);
        if (result == null) result = caseGeneratorCommand(list);
        if (result == null) result = caseNodeOrParameterOrCollection(list);
        if (result == null) result = caseDefault(list);
        if (result == null) result = caseCaseBody(list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.LIST_AD_HOC:
      {
        ListAdHoc listAdHoc = (ListAdHoc)theEObject;
        T result = caseListAdHoc(listAdHoc);
        if (result == null) result = caseList(listAdHoc);
        if (result == null) result = caseCollection(listAdHoc);
        if (result == null) result = caseGeneratorCommand(listAdHoc);
        if (result == null) result = caseNodeOrParameterOrCollection(listAdHoc);
        if (result == null) result = caseDefault(listAdHoc);
        if (result == null) result = caseCaseBody(listAdHoc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.MAP:
      {
        Map map = (Map)theEObject;
        T result = caseMap(map);
        if (result == null) result = caseCollection(map);
        if (result == null) result = caseGeneratorCommand(map);
        if (result == null) result = caseNodeOrParameterOrCollection(map);
        if (result == null) result = caseDefault(map);
        if (result == null) result = caseCaseBody(map);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.MAP_AD_HOC:
      {
        MapAdHoc mapAdHoc = (MapAdHoc)theEObject;
        T result = caseMapAdHoc(mapAdHoc);
        if (result == null) result = caseMap(mapAdHoc);
        if (result == null) result = caseCollection(mapAdHoc);
        if (result == null) result = caseGeneratorCommand(mapAdHoc);
        if (result == null) result = caseNodeOrParameterOrCollection(mapAdHoc);
        if (result == null) result = caseDefault(mapAdHoc);
        if (result == null) result = caseCaseBody(mapAdHoc);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.MAP_TUPEL:
      {
        MapTupel mapTupel = (MapTupel)theEObject;
        T result = caseMapTupel(mapTupel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.FOR_RANGE:
      {
        ForRange forRange = (ForRange)theEObject;
        T result = caseForRange(forRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.TERTIARY:
      {
        Tertiary tertiary = (Tertiary)theEObject;
        T result = caseTertiary(tertiary);
        if (result == null) result = caseArithmeticExpression(tertiary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.SECONDARY:
      {
        Secondary secondary = (Secondary)theEObject;
        T result = caseSecondary(secondary);
        if (result == null) result = caseArithmeticExpression(secondary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.PRIMARY:
      {
        Primary primary = (Primary)theEObject;
        T result = casePrimary(primary);
        if (result == null) result = caseArithmeticExpression(primary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.REL:
      {
        Rel rel = (Rel)theEObject;
        T result = caseRel(rel);
        if (result == null) result = caseArithmeticExpression(rel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.NEGATION_EXPRESSION:
      {
        NegationExpression negationExpression = (NegationExpression)theEObject;
        T result = caseNegationExpression(negationExpression);
        if (result == null) result = caseArithmeticExpression(negationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.FUNCTION_CALL:
      {
        FunctionCall functionCall = (FunctionCall)theEObject;
        T result = caseFunctionCall(functionCall);
        if (result == null) result = caseArithmeticExpression(functionCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MGLangPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseArithmeticExpression(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mofgen File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mofgen File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMofgenFile(MofgenFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImport(Import object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePattern(Pattern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Return</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Return</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternReturn(PatternReturn object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Param Manipulation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Param Manipulation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParamManipulation(ParamManipulation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNode(Node object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Content</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Content</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeContent(NodeContent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternCall(PatternCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Reference Or Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Reference Or Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeReferenceOrAssignment(NodeReferenceOrAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Node Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Node Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternNodeReference(PatternNodeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Attribute Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Attribute Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeAttributeCall(NodeAttributeCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameter(Parameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primitive Parameter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primitive Parameter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimitiveParameter(PrimitiveParameter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterNode(ParameterNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Ref Or Method Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Ref Or Method Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterRefOrMethodCall(ParameterRefOrMethodCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter Ref</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter Ref</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterRef(ParameterRef object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Method Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Method Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMethodCall(MethodCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arithmetic Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArithmeticExpression(ArithmeticExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenerator(Generator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generator Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generator Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneratorCommand(GeneratorCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Object Creation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Object Creation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternObjectCreation(PatternObjectCreation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternObject(PatternObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForStatement(ForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Head</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Head</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForHead(ForHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>General For Head</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>General For Head</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralForHead(GeneralForHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Each Head</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Each Head</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForEachHead(ForEachHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Node Or Parameter Or Collection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Node Or Parameter Or Collection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNodeOrParameterOrCollection(NodeOrParameterOrCollection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForBody(ForBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Line If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Line If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleLineIf(SingleLineIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gen Command Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gen Command Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGenCommandBlock(GenCommandBlock object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockIf(BlockIf object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Head And Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Head And Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfHeadAndBody(IfHeadAndBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Head</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Head</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfHead(IfHead object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfBody(IfBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Switch Case</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Switch Case</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSwitchCase(SwitchCase object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Default</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Default</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefault(Default object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCase(Case object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Case Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Case Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCaseBody(CaseBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollection(Collection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseList(List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List Ad Hoc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List Ad Hoc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseListAdHoc(ListAdHoc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMap(Map object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Ad Hoc</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Ad Hoc</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapAdHoc(MapAdHoc object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Map Tupel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Map Tupel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapTupel(MapTupel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForRange(ForRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tertiary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tertiary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTertiary(Tertiary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Secondary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Secondary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSecondary(Secondary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Primary</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Primary</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrimary(Primary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rel</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rel</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRel(Rel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Negation Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Negation Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNegationExpression(NegationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCall(FunctionCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MGLangSwitch
