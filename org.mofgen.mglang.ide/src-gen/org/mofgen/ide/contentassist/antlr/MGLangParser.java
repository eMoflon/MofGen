/*
 * generated by Xtext 2.20.0
 */
package org.mofgen.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.mofgen.ide.contentassist.antlr.internal.InternalMGLangParser;
import org.mofgen.services.MGLangGrammarAccess;

public class MGLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MGLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MGLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMofgenFileAccess().getAlternatives_1(), "rule__MofgenFile__Alternatives_1");
			builder.put(grammarAccess.getNodeAccess().getAlternatives_2(), "rule__Node__Alternatives_2");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives(), "rule__NodeReferenceOrAssignment__Alternatives");
			builder.put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
			builder.put(grammarAccess.getGeneratorExpressionAccess().getAlternatives(), "rule__GeneratorExpression__Alternatives");
			builder.put(grammarAccess.getForHeadAccess().getAlternatives(), "rule__ForHead__Alternatives");
			builder.put(grammarAccess.getRefTypeAccess().getAlternatives(), "rule__RefType__Alternatives");
			builder.put(grammarAccess.getSwitchAccess().getAlternatives(), "rule__Switch__Alternatives");
			builder.put(grammarAccess.getCaseBodyAccess().getAlternatives(), "rule__CaseBody__Alternatives");
			builder.put(grammarAccess.getCollectionAccess().getAlternatives(), "rule__Collection__Alternatives");
			builder.put(grammarAccess.getListAssignmentAccess().getAlternatives(), "rule__ListAssignment__Alternatives");
			builder.put(grammarAccess.getMapAssignmentAccess().getAlternatives(), "rule__MapAssignment__Alternatives");
			builder.put(grammarAccess.getBaseExprAccess().getAlternatives(), "rule__BaseExpr__Alternatives");
			builder.put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
			builder.put(grammarAccess.getBooleanLiteralAccess().getAlternatives(), "rule__BooleanLiteral__Alternatives");
			builder.put(grammarAccess.getMathFuncAccess().getAlternatives(), "rule__MathFunc__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
			builder.put(grammarAccess.getRelationalOpAccess().getAlternatives(), "rule__RelationalOp__Alternatives");
			builder.put(grammarAccess.getTertiaryOpAccess().getAlternatives(), "rule__TertiaryOp__Alternatives");
			builder.put(grammarAccess.getSecondaryOpAccess().getAlternatives(), "rule__SecondaryOp__Alternatives");
			builder.put(grammarAccess.getPrimaryOpAccess().getAlternatives(), "rule__PrimaryOp__Alternatives");
			builder.put(grammarAccess.getMofgenFileAccess().getGroup(), "rule__MofgenFile__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2_1(), "rule__Pattern__Group_2_1__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2_1_1(), "rule__Pattern__Group_2_1_1__0");
			builder.put(grammarAccess.getPatternReturnAccess().getGroup(), "rule__PatternReturn__Group__0");
			builder.put(grammarAccess.getPatternReturnAccess().getGroup_3(), "rule__PatternReturn__Group_3__0");
			builder.put(grammarAccess.getParamManipulationAccess().getGroup(), "rule__ParamManipulation__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup_2_1(), "rule__Node__Group_2_1__0");
			builder.put(grammarAccess.getNodeContentAccess().getGroup(), "rule__NodeContent__Group__0");
			builder.put(grammarAccess.getPatternCallAccess().getGroup(), "rule__PatternCall__Group__0");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getGroup(), "rule__PatternNodeReference__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getPrimitiveParameterAccess().getGroup(), "rule__PrimitiveParameter__Group__0");
			builder.put(grammarAccess.getParameterNodeAccess().getGroup(), "rule__ParameterNode__Group__0");
			builder.put(grammarAccess.getRefOrCallAccess().getGroup(), "rule__RefOrCall__Group__0");
			builder.put(grammarAccess.getRefOrCallAccess().getGroup_1(), "rule__RefOrCall__Group_1__0");
			builder.put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getGroup(), "rule__PatternObjectCreation__Group__0");
			builder.put(grammarAccess.getPatternObjectAccess().getGroup(), "rule__PatternObject__Group__0");
			builder.put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
			builder.put(grammarAccess.getGeneralForHeadAccess().getGroup(), "rule__GeneralForHead__Group__0");
			builder.put(grammarAccess.getForEachHeadAccess().getGroup(), "rule__ForEachHead__Group__0");
			builder.put(grammarAccess.getForBodyAccess().getGroup(), "rule__ForBody__Group__0");
			builder.put(grammarAccess.getIfElseSwitchAccess().getGroup(), "rule__IfElseSwitch__Group__0");
			builder.put(grammarAccess.getIfElseCaseAccess().getGroup(), "rule__IfElseCase__Group__0");
			builder.put(grammarAccess.getDefaultAccess().getGroup(), "rule__Default__Group__0");
			builder.put(grammarAccess.getSwitchCaseAccess().getGroup(), "rule__SwitchCase__Group__0");
			builder.put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
			builder.put(grammarAccess.getCaseAccess().getGroup_2(), "rule__Case__Group_2__0");
			builder.put(grammarAccess.getCaseBodyAccess().getGroup_0(), "rule__CaseBody__Group_0__0");
			builder.put(grammarAccess.getCaseBodyAccess().getGroup_1(), "rule__CaseBody__Group_1__0");
			builder.put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
			builder.put(grammarAccess.getListAccess().getGroup_2(), "rule__List__Group_2__0");
			builder.put(grammarAccess.getListAdHocAccess().getGroup(), "rule__ListAdHoc__Group__0");
			builder.put(grammarAccess.getListAdHocAccess().getGroup_2(), "rule__ListAdHoc__Group_2__0");
			builder.put(grammarAccess.getMapAccess().getGroup(), "rule__Map__Group__0");
			builder.put(grammarAccess.getMapAccess().getGroup_2(), "rule__Map__Group_2__0");
			builder.put(grammarAccess.getMapAdHocAccess().getGroup(), "rule__MapAdHoc__Group__0");
			builder.put(grammarAccess.getMapAdHocAccess().getGroup_2(), "rule__MapAdHoc__Group_2__0");
			builder.put(grammarAccess.getMapTupelAccess().getGroup(), "rule__MapTupel__Group__0");
			builder.put(grammarAccess.getForRangeAccess().getGroup(), "rule__ForRange__Group__0");
			builder.put(grammarAccess.getTertiaryExpressionAccess().getGroup(), "rule__TertiaryExpression__Group__0");
			builder.put(grammarAccess.getTertiaryExpressionAccess().getGroup_1(), "rule__TertiaryExpression__Group_1__0");
			builder.put(grammarAccess.getSecondaryExpressionAccess().getGroup(), "rule__SecondaryExpression__Group__0");
			builder.put(grammarAccess.getSecondaryExpressionAccess().getGroup_1(), "rule__SecondaryExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExprAccess().getGroup(), "rule__PrimaryExpr__Group__0");
			builder.put(grammarAccess.getPrimaryExprAccess().getGroup_1(), "rule__PrimaryExpr__Group_1__0");
			builder.put(grammarAccess.getRelationExpressionAccess().getGroup(), "rule__RelationExpression__Group__0");
			builder.put(grammarAccess.getRelationExpressionAccess().getGroup_1(), "rule__RelationExpression__Group_1__0");
			builder.put(grammarAccess.getBaseExprAccess().getGroup_0(), "rule__BaseExpr__Group_0__0");
			builder.put(grammarAccess.getBaseExprAccess().getGroup_1(), "rule__BaseExpr__Group_1__0");
			builder.put(grammarAccess.getBaseExprAccess().getGroup_2(), "rule__BaseExpr__Group_2__0");
			builder.put(grammarAccess.getBaseExprAccess().getGroup_3(), "rule__BaseExpr__Group_3__0");
			builder.put(grammarAccess.getNumberLiteralAccess().getGroup(), "rule__NumberLiteral__Group__0");
			builder.put(grammarAccess.getNumberLiteralAccess().getGroup_1(), "rule__NumberLiteral__Group_1__0");
			builder.put(grammarAccess.getMofgenFileAccess().getImportsAssignment_0(), "rule__MofgenFile__ImportsAssignment_0");
			builder.put(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0(), "rule__MofgenFile__PatternsAssignment_1_0");
			builder.put(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1(), "rule__MofgenFile__GeneratorsAssignment_1_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
			builder.put(grammarAccess.getImportAccess().getAliasAssignment_3(), "rule__Import__AliasAssignment_3");
			builder.put(grammarAccess.getPatternAccess().getNameAssignment_1(), "rule__Pattern__NameAssignment_1");
			builder.put(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0(), "rule__Pattern__ParametersAssignment_2_1_0");
			builder.put(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1(), "rule__Pattern__ParametersAssignment_2_1_1_1");
			builder.put(grammarAccess.getPatternAccess().getCollsAssignment_4_0(), "rule__Pattern__CollsAssignment_4_0");
			builder.put(grammarAccess.getPatternAccess().getNodesAssignment_4_1(), "rule__Pattern__NodesAssignment_4_1");
			builder.put(grammarAccess.getPatternAccess().getParamManipulationsAssignment_4_2(), "rule__Pattern__ParamManipulationsAssignment_4_2");
			builder.put(grammarAccess.getPatternAccess().getSwitchesAssignment_4_3(), "rule__Pattern__SwitchesAssignment_4_3");
			builder.put(grammarAccess.getPatternAccess().getReturnAssignment_6(), "rule__Pattern__ReturnAssignment_6");
			builder.put(grammarAccess.getPatternReturnAccess().getReturnValueAssignment_3_1(), "rule__PatternReturn__ReturnValueAssignment_3_1");
			builder.put(grammarAccess.getParamManipulationAccess().getParamAssignment_0(), "rule__ParamManipulation__ParamAssignment_0");
			builder.put(grammarAccess.getParamManipulationAccess().getContentAssignment_1(), "rule__ParamManipulation__ContentAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getTypeAssignment_0(), "rule__Node__TypeAssignment_0");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getCreatedByAssignment_2_0(), "rule__Node__CreatedByAssignment_2_0");
			builder.put(grammarAccess.getNodeAccess().getCreatedByAssignment_2_1_1(), "rule__Node__CreatedByAssignment_2_1_1");
			builder.put(grammarAccess.getNodeContentAccess().getRefsAssignsAssignment_2(), "rule__NodeContent__RefsAssignsAssignment_2");
			builder.put(grammarAccess.getPatternCallAccess().getCalledAssignment_0(), "rule__PatternCall__CalledAssignment_0");
			builder.put(grammarAccess.getPatternCallAccess().getParamsAssignment_2(), "rule__PatternCall__ParamsAssignment_2");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_0(), "rule__PatternNodeReference__TypeAssignment_0");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_2(), "rule__PatternNodeReference__TargetAssignment_2");
			builder.put(grammarAccess.getAssignmentAccess().getTargetAssignment_0(), "rule__Assignment__TargetAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getPrimitiveParameterAccess().getTypeAssignment_0(), "rule__PrimitiveParameter__TypeAssignment_0");
			builder.put(grammarAccess.getPrimitiveParameterAccess().getNameAssignment_1(), "rule__PrimitiveParameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterNodeAccess().getTypeAssignment_0(), "rule__ParameterNode__TypeAssignment_0");
			builder.put(grammarAccess.getParameterNodeAccess().getNameAssignment_1(), "rule__ParameterNode__NameAssignment_1");
			builder.put(grammarAccess.getRefOrCallAccess().getRefAssignment_0(), "rule__RefOrCall__RefAssignment_0");
			builder.put(grammarAccess.getRefOrCallAccess().getCalledAssignment_1_2(), "rule__RefOrCall__CalledAssignment_1_2");
			builder.put(grammarAccess.getGeneratorAccess().getParamsAssignment_3(), "rule__Generator__ParamsAssignment_3");
			builder.put(grammarAccess.getGeneratorAccess().getCommandsAssignment_6(), "rule__Generator__CommandsAssignment_6");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0(), "rule__PatternObjectCreation__PObjectAssignment_0");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2(), "rule__PatternObjectCreation__PatternCallAssignment_2");
			builder.put(grammarAccess.getPatternObjectAccess().getTypeAssignment_0(), "rule__PatternObject__TypeAssignment_0");
			builder.put(grammarAccess.getPatternObjectAccess().getNameAssignment_1(), "rule__PatternObject__NameAssignment_1");
			builder.put(grammarAccess.getForStatementAccess().getHeadAssignment_1(), "rule__ForStatement__HeadAssignment_1");
			builder.put(grammarAccess.getForStatementAccess().getBodyAssignment_3(), "rule__ForStatement__BodyAssignment_3");
			builder.put(grammarAccess.getGeneralForHeadAccess().getIteratorVarAssignment_0(), "rule__GeneralForHead__IteratorVarAssignment_0");
			builder.put(grammarAccess.getGeneralForHeadAccess().getRangeAssignment_2(), "rule__GeneralForHead__RangeAssignment_2");
			builder.put(grammarAccess.getForEachHeadAccess().getSrcAssignment_0(), "rule__ForEachHead__SrcAssignment_0");
			builder.put(grammarAccess.getForEachHeadAccess().getErefAssignment_2(), "rule__ForEachHead__ErefAssignment_2");
			builder.put(grammarAccess.getForEachHeadAccess().getIteratorVarAssignment_4(), "rule__ForEachHead__IteratorVarAssignment_4");
			builder.put(grammarAccess.getForBodyAccess().getCommandsAssignment_1(), "rule__ForBody__CommandsAssignment_1");
			builder.put(grammarAccess.getIfElseSwitchAccess().getCasesAssignment_2(), "rule__IfElseSwitch__CasesAssignment_2");
			builder.put(grammarAccess.getIfElseSwitchAccess().getDefaultAssignment_3(), "rule__IfElseSwitch__DefaultAssignment_3");
			builder.put(grammarAccess.getIfElseCaseAccess().getValAssignment_1(), "rule__IfElseCase__ValAssignment_1");
			builder.put(grammarAccess.getIfElseCaseAccess().getBodyAssignment_3(), "rule__IfElseCase__BodyAssignment_3");
			builder.put(grammarAccess.getSwitchCaseAccess().getAttributeAssignment_2(), "rule__SwitchCase__AttributeAssignment_2");
			builder.put(grammarAccess.getSwitchCaseAccess().getCasesAssignment_5(), "rule__SwitchCase__CasesAssignment_5");
			builder.put(grammarAccess.getSwitchCaseAccess().getDefaultAssignment_6(), "rule__SwitchCase__DefaultAssignment_6");
			builder.put(grammarAccess.getCaseAccess().getNodeAssignment_1(), "rule__Case__NodeAssignment_1");
			builder.put(grammarAccess.getCaseAccess().getWhenAssignment_2_1(), "rule__Case__WhenAssignment_2_1");
			builder.put(grammarAccess.getCaseAccess().getBodyAssignment_4(), "rule__Case__BodyAssignment_4");
			builder.put(grammarAccess.getCaseBodyAccess().getExpressionsAssignment_0_2(), "rule__CaseBody__ExpressionsAssignment_0_2");
			builder.put(grammarAccess.getCaseBodyAccess().getExpressionsAssignment_1_0(), "rule__CaseBody__ExpressionsAssignment_1_0");
			builder.put(grammarAccess.getListAccess().getNameAssignment_1(), "rule__List__NameAssignment_1");
			builder.put(grammarAccess.getListAdHocAccess().getElementsAssignment_1(), "rule__ListAdHoc__ElementsAssignment_1");
			builder.put(grammarAccess.getListAdHocAccess().getElementsAssignment_2_1(), "rule__ListAdHoc__ElementsAssignment_2_1");
			builder.put(grammarAccess.getMapAccess().getNameAssignment_1(), "rule__Map__NameAssignment_1");
			builder.put(grammarAccess.getMapAdHocAccess().getEntriesAssignment_1(), "rule__MapAdHoc__EntriesAssignment_1");
			builder.put(grammarAccess.getMapAdHocAccess().getEntriesAssignment_2_1(), "rule__MapAdHoc__EntriesAssignment_2_1");
			builder.put(grammarAccess.getMapTupelAccess().getKeyAssignment_1(), "rule__MapTupel__KeyAssignment_1");
			builder.put(grammarAccess.getMapTupelAccess().getValueAssignment_3(), "rule__MapTupel__ValueAssignment_3");
			builder.put(grammarAccess.getForRangeAccess().getStartAssignment_0(), "rule__ForRange__StartAssignment_0");
			builder.put(grammarAccess.getForRangeAccess().getEndAssignment_2(), "rule__ForRange__EndAssignment_2");
			builder.put(grammarAccess.getTertiaryExpressionAccess().getOpAssignment_1_1(), "rule__TertiaryExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getTertiaryExpressionAccess().getRightAssignment_1_2(), "rule__TertiaryExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getSecondaryExpressionAccess().getOpAssignment_1_1(), "rule__SecondaryExpression__OpAssignment_1_1");
			builder.put(grammarAccess.getSecondaryExpressionAccess().getRightAssignment_1_2(), "rule__SecondaryExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getPrimaryExprAccess().getOpAssignment_1_1(), "rule__PrimaryExpr__OpAssignment_1_1");
			builder.put(grammarAccess.getPrimaryExprAccess().getRightAssignment_1_2(), "rule__PrimaryExpr__RightAssignment_1_2");
			builder.put(grammarAccess.getRelationExpressionAccess().getRelationAssignment_1_1(), "rule__RelationExpression__RelationAssignment_1_1");
			builder.put(grammarAccess.getRelationExpressionAccess().getRightAssignment_1_2(), "rule__RelationExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getBaseExprAccess().getExprAssignment_1_2(), "rule__BaseExpr__ExprAssignment_1_2");
			builder.put(grammarAccess.getBaseExprAccess().getFuncAssignment_2_1(), "rule__BaseExpr__FuncAssignment_2_1");
			builder.put(grammarAccess.getBaseExprAccess().getExprAssignment_2_3(), "rule__BaseExpr__ExprAssignment_2_3");
			builder.put(grammarAccess.getPatternAccess().getUnorderedGroup_4(), "rule__Pattern__UnorderedGroup_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MGLangGrammarAccess grammarAccess;

	@Override
	protected InternalMGLangParser createParser() {
		InternalMGLangParser result = new InternalMGLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MGLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MGLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
