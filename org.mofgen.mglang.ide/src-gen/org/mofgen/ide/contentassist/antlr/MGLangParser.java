/*
 * generated by Xtext 2.20.0
 */
package org.mofgen.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.mofgen.ide.contentassist.antlr.internal.InternalMGLangParser;
import org.mofgen.services.MGLangGrammarAccess;

public class MGLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MGLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MGLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMofgenFileAccess().getAlternatives_1(), "rule__MofgenFile__Alternatives_1");
			builder.put(grammarAccess.getPatternAccess().getAlternatives_4(), "rule__Pattern__Alternatives_4");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives_0(), "rule__NodeReferenceOrAssignment__Alternatives_0");
			builder.put(grammarAccess.getGeneratorElementAccess().getAlternatives(), "rule__GeneratorElement__Alternatives");
			builder.put(grammarAccess.getGeneratorCommandAccess().getAlternatives(), "rule__GeneratorCommand__Alternatives");
			builder.put(grammarAccess.getForConditionAccess().getAlternatives(), "rule__ForCondition__Alternatives");
			builder.put(grammarAccess.getEditorRelationAccess().getAlternatives(), "rule__EditorRelation__Alternatives");
			builder.put(grammarAccess.getMofgenFileAccess().getGroup(), "rule__MofgenFile__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2_1(), "rule__Pattern__Group_2_1__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2_1_1(), "rule__Pattern__Group_2_1_1__0");
			builder.put(grammarAccess.getPatternReturnAccess().getGroup(), "rule__PatternReturn__Group__0");
			builder.put(grammarAccess.getPatternNodeCreationAccess().getGroup(), "rule__PatternNodeCreation__Group__0");
			builder.put(grammarAccess.getNodeConstructorAccess().getGroup(), "rule__NodeConstructor__Group__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup(), "rule__NodeReferenceOrAssignment__Group__0");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup_1(), "rule__NodeReferenceOrAssignment__Group_1__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getGroup(), "rule__PatternNodeReference__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getNodeAttributeCallAccess().getGroup(), "rule__NodeAttributeCall__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
			builder.put(grammarAccess.getPatternCallAccess().getGroup(), "rule__PatternCall__Group__0");
			builder.put(grammarAccess.getPatternCallAccess().getGroup_1(), "rule__PatternCall__Group_1__0");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getGroup(), "rule__PatternObjectCreation__Group__0");
			builder.put(grammarAccess.getPatternObjectAccess().getGroup(), "rule__PatternObject__Group__0");
			builder.put(grammarAccess.getForLoopAccess().getGroup(), "rule__ForLoop__Group__0");
			builder.put(grammarAccess.getForRangeAccess().getGroup(), "rule__ForRange__Group__0");
			builder.put(grammarAccess.getMofgenFileAccess().getImportsAssignment_0(), "rule__MofgenFile__ImportsAssignment_0");
			builder.put(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0(), "rule__MofgenFile__PatternsAssignment_1_0");
			builder.put(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1(), "rule__MofgenFile__GeneratorsAssignment_1_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
			builder.put(grammarAccess.getImportAccess().getAliasAssignment_3(), "rule__Import__AliasAssignment_3");
			builder.put(grammarAccess.getPatternAccess().getNameAssignment_1(), "rule__Pattern__NameAssignment_1");
			builder.put(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0(), "rule__Pattern__ParametersAssignment_2_1_0");
			builder.put(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1(), "rule__Pattern__ParametersAssignment_2_1_1_1");
			builder.put(grammarAccess.getPatternAccess().getNodesAssignment_4_0(), "rule__Pattern__NodesAssignment_4_0");
			builder.put(grammarAccess.getPatternAccess().getRefsAssignsAssignment_4_1(), "rule__Pattern__RefsAssignsAssignment_4_1");
			builder.put(grammarAccess.getPatternAccess().getReturnAssignment_6(), "rule__Pattern__ReturnAssignment_6");
			builder.put(grammarAccess.getPatternReturnAccess().getThisUsedAssignment_1(), "rule__PatternReturn__ThisUsedAssignment_1");
			builder.put(grammarAccess.getPatternNodeCreationAccess().getNodeAssignment_0(), "rule__PatternNodeCreation__NodeAssignment_0");
			builder.put(grammarAccess.getPatternNodeCreationAccess().getConstructorAssignment_1(), "rule__PatternNodeCreation__ConstructorAssignment_1");
			builder.put(grammarAccess.getNodeConstructorAccess().getParamsAssignment_2(), "rule__NodeConstructor__ParamsAssignment_2");
			builder.put(grammarAccess.getNodeAccess().getTypeAssignment_0(), "rule__Node__TypeAssignment_0");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionAssignment_1_1(), "rule__NodeReferenceOrAssignment__ConditionAssignment_1_1");
			builder.put(grammarAccess.getConditionAccess().getLhsAssignment_0(), "rule__Condition__LhsAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getRelationAssignment_1_0(), "rule__Condition__RelationAssignment_1_0");
			builder.put(grammarAccess.getConditionAccess().getRhsAssignment_1_1(), "rule__Condition__RhsAssignment_1_1");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getSourceAssignment_0(), "rule__PatternNodeReference__SourceAssignment_0");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_2(), "rule__PatternNodeReference__TypeAssignment_2");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_4(), "rule__PatternNodeReference__TargetAssignment_4");
			builder.put(grammarAccess.getAssignmentAccess().getObjectAssignment_0(), "rule__Assignment__ObjectAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getNodeAttributeCallAccess().getObjectAssignment_0(), "rule__NodeAttributeCall__ObjectAssignment_0");
			builder.put(grammarAccess.getNodeAttributeCallAccess().getAttributeAssignment_2(), "rule__NodeAttributeCall__AttributeAssignment_2");
			builder.put(grammarAccess.getParameterAccess().getNameAssignment_0(), "rule__Parameter__NameAssignment_0");
			builder.put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
			builder.put(grammarAccess.getGeneratorAccess().getNameAssignment_1(), "rule__Generator__NameAssignment_1");
			builder.put(grammarAccess.getGeneratorAccess().getCommandsAssignment_5(), "rule__Generator__CommandsAssignment_5");
			builder.put(grammarAccess.getPatternCallAccess().getCalledPatternAssignment_0(), "rule__PatternCall__CalledPatternAssignment_0");
			builder.put(grammarAccess.getPatternCallAccess().getParamsAssignment_1_1(), "rule__PatternCall__ParamsAssignment_1_1");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0(), "rule__PatternObjectCreation__PObjectAssignment_0");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2(), "rule__PatternObjectCreation__PatternCallAssignment_2");
			builder.put(grammarAccess.getPatternObjectAccess().getTypeAssignment_0(), "rule__PatternObject__TypeAssignment_0");
			builder.put(grammarAccess.getPatternObjectAccess().getNameAssignment_1(), "rule__PatternObject__NameAssignment_1");
			builder.put(grammarAccess.getForLoopAccess().getIteratorVarAssignment_1(), "rule__ForLoop__IteratorVarAssignment_1");
			builder.put(grammarAccess.getForLoopAccess().getIteratingConditionAssignment_3(), "rule__ForLoop__IteratingConditionAssignment_3");
			builder.put(grammarAccess.getForLoopAccess().getCommandsAssignment_5(), "rule__ForLoop__CommandsAssignment_5");
			builder.put(grammarAccess.getForEachCollectionAccess().getCollAssignment(), "rule__ForEachCollection__CollAssignment");
			builder.put(grammarAccess.getForRangeAccess().getStartAssignment_0(), "rule__ForRange__StartAssignment_0");
			builder.put(grammarAccess.getForRangeAccess().getEndAssignment_2(), "rule__ForRange__EndAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MGLangGrammarAccess grammarAccess;

	@Override
	protected InternalMGLangParser createParser() {
		InternalMGLangParser result = new InternalMGLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MGLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MGLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
