/*
 * generated by Xtext 2.20.0
 */
package org.mofgen.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.mofgen.ide.contentassist.antlr.internal.InternalMGLangParser;
import org.mofgen.services.MGLangGrammarAccess;

public class MGLangParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MGLangGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MGLangGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMofgenFileAccess().getAlternatives_1(), "rule__MofgenFile__Alternatives_1");
			builder.put(grammarAccess.getNodeAccess().getCreatedByAlternatives_2_0(), "rule__Node__CreatedByAlternatives_2_0");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives_0(), "rule__NodeReferenceOrAssignment__Alternatives_0");
			builder.put(grammarAccess.getParameterAccess().getAlternatives(), "rule__Parameter__Alternatives");
			builder.put(grammarAccess.getParameterOrMethodCallAccess().getAlternatives(), "rule__ParameterOrMethodCall__Alternatives");
			builder.put(grammarAccess.getBaseBooleanAccess().getAlternatives(), "rule__BaseBoolean__Alternatives");
			builder.put(grammarAccess.getGeneratorElementAccess().getAlternatives(), "rule__GeneratorElement__Alternatives");
			builder.put(grammarAccess.getGeneratorCommandAccess().getAlternatives(), "rule__GeneratorCommand__Alternatives");
			builder.put(grammarAccess.getForConditionAccess().getAlternatives(), "rule__ForCondition__Alternatives");
			builder.put(grammarAccess.getBooleanAccess().getAlternatives(), "rule__Boolean__Alternatives");
			builder.put(grammarAccess.getPrimitiveTypeAccess().getAlternatives(), "rule__PrimitiveType__Alternatives");
			builder.put(grammarAccess.getRelationalOpAccess().getAlternatives(), "rule__RelationalOp__Alternatives");
			builder.put(grammarAccess.getMofgenFileAccess().getGroup(), "rule__MofgenFile__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2_1(), "rule__Pattern__Group_2_1__0");
			builder.put(grammarAccess.getPatternAccess().getGroup_2_1_1(), "rule__Pattern__Group_2_1_1__0");
			builder.put(grammarAccess.getPatternReturnAccess().getGroup(), "rule__PatternReturn__Group__0");
			builder.put(grammarAccess.getPatternReturnAccess().getGroup_3(), "rule__PatternReturn__Group_3__0");
			builder.put(grammarAccess.getNodeAccess().getGroup(), "rule__Node__Group__0");
			builder.put(grammarAccess.getNodeConstructorAccess().getGroup(), "rule__NodeConstructor__Group__0");
			builder.put(grammarAccess.getPatternCallAccess().getGroup(), "rule__PatternCall__Group__0");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup(), "rule__NodeReferenceOrAssignment__Group__0");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup_1(), "rule__NodeReferenceOrAssignment__Group_1__0");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getGroup(), "rule__PatternNodeReference__Group__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getNodeAttributeCallAccess().getGroup(), "rule__NodeAttributeCall__Group__0");
			builder.put(grammarAccess.getPrimitiveParameterAccess().getGroup(), "rule__PrimitiveParameter__Group__0");
			builder.put(grammarAccess.getObjectParameterAccess().getGroup(), "rule__ObjectParameter__Group__0");
			builder.put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
			builder.put(grammarAccess.getRelationExpressionAccess().getGroup(), "rule__RelationExpression__Group__0");
			builder.put(grammarAccess.getBooleanOrAccess().getGroup(), "rule__BooleanOr__Group__0");
			builder.put(grammarAccess.getBooleanOrAccess().getGroup_1(), "rule__BooleanOr__Group_1__0");
			builder.put(grammarAccess.getBooleanXorAccess().getGroup(), "rule__BooleanXor__Group__0");
			builder.put(grammarAccess.getBooleanXorAccess().getGroup_1(), "rule__BooleanXor__Group_1__0");
			builder.put(grammarAccess.getBooleanAndAccess().getGroup(), "rule__BooleanAnd__Group__0");
			builder.put(grammarAccess.getBooleanAndAccess().getGroup_1(), "rule__BooleanAnd__Group_1__0");
			builder.put(grammarAccess.getBaseBooleanAccess().getGroup_0(), "rule__BaseBoolean__Group_0__0");
			builder.put(grammarAccess.getBaseBooleanAccess().getGroup_1(), "rule__BaseBoolean__Group_1__0");
			builder.put(grammarAccess.getBaseBooleanAccess().getGroup_2(), "rule__BaseBoolean__Group_2__0");
			builder.put(grammarAccess.getStringConcatenationAccess().getGroup(), "rule__StringConcatenation__Group__0");
			builder.put(grammarAccess.getStringConcatenationAccess().getGroup_1(), "rule__StringConcatenation__Group_1__0");
			builder.put(grammarAccess.getGeneratorAccess().getGroup(), "rule__Generator__Group__0");
			builder.put(grammarAccess.getGenPatternCallAccess().getGroup(), "rule__GenPatternCall__Group__0");
			builder.put(grammarAccess.getGenPatternCallAccess().getGroup_1(), "rule__GenPatternCall__Group_1__0");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getGroup(), "rule__PatternObjectCreation__Group__0");
			builder.put(grammarAccess.getPatternObjectAccess().getGroup(), "rule__PatternObject__Group__0");
			builder.put(grammarAccess.getForLoopAccess().getGroup(), "rule__ForLoop__Group__0");
			builder.put(grammarAccess.getForRangeAccess().getGroup(), "rule__ForRange__Group__0");
			builder.put(grammarAccess.getMofgenFileAccess().getImportsAssignment_0(), "rule__MofgenFile__ImportsAssignment_0");
			builder.put(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0(), "rule__MofgenFile__PatternsAssignment_1_0");
			builder.put(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1(), "rule__MofgenFile__GeneratorsAssignment_1_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
			builder.put(grammarAccess.getImportAccess().getAliasAssignment_3(), "rule__Import__AliasAssignment_3");
			builder.put(grammarAccess.getPatternAccess().getNameAssignment_1(), "rule__Pattern__NameAssignment_1");
			builder.put(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0(), "rule__Pattern__ParametersAssignment_2_1_0");
			builder.put(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1(), "rule__Pattern__ParametersAssignment_2_1_1_1");
			builder.put(grammarAccess.getPatternAccess().getNodesAssignment_4(), "rule__Pattern__NodesAssignment_4");
			builder.put(grammarAccess.getPatternAccess().getReturnAssignment_6(), "rule__Pattern__ReturnAssignment_6");
			builder.put(grammarAccess.getPatternReturnAccess().getReturnValueAssignment_3_1(), "rule__PatternReturn__ReturnValueAssignment_3_1");
			builder.put(grammarAccess.getNodeAccess().getTypeAssignment_0(), "rule__Node__TypeAssignment_0");
			builder.put(grammarAccess.getNodeAccess().getNameAssignment_1(), "rule__Node__NameAssignment_1");
			builder.put(grammarAccess.getNodeAccess().getCreatedByAssignment_2(), "rule__Node__CreatedByAssignment_2");
			builder.put(grammarAccess.getNodeConstructorAccess().getRefsAssignsAssignment_2(), "rule__NodeConstructor__RefsAssignsAssignment_2");
			builder.put(grammarAccess.getPatternCallAccess().getCalledAssignment_0(), "rule__PatternCall__CalledAssignment_0");
			builder.put(grammarAccess.getPatternCallAccess().getParamsAssignment_2(), "rule__PatternCall__ParamsAssignment_2");
			builder.put(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionAssignment_1_1(), "rule__NodeReferenceOrAssignment__ConditionAssignment_1_1");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_0(), "rule__PatternNodeReference__TypeAssignment_0");
			builder.put(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_2(), "rule__PatternNodeReference__TargetAssignment_2");
			builder.put(grammarAccess.getAssignmentAccess().getTargetAssignment_0(), "rule__Assignment__TargetAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getNodeAttributeCallAccess().getNodeAssignment_0(), "rule__NodeAttributeCall__NodeAssignment_0");
			builder.put(grammarAccess.getNodeAttributeCallAccess().getAttributeAssignment_2(), "rule__NodeAttributeCall__AttributeAssignment_2");
			builder.put(grammarAccess.getPrimitiveParameterAccess().getTypeAssignment_0(), "rule__PrimitiveParameter__TypeAssignment_0");
			builder.put(grammarAccess.getPrimitiveParameterAccess().getNameAssignment_1(), "rule__PrimitiveParameter__NameAssignment_1");
			builder.put(grammarAccess.getObjectParameterAccess().getTypeAssignment_0(), "rule__ObjectParameter__TypeAssignment_0");
			builder.put(grammarAccess.getObjectParameterAccess().getNameAssignment_1(), "rule__ObjectParameter__NameAssignment_1");
			builder.put(grammarAccess.getParameterRefAccess().getRefAssignment(), "rule__ParameterRef__RefAssignment");
			builder.put(grammarAccess.getMethodCallAccess().getCalledNodeAssignment_0(), "rule__MethodCall__CalledNodeAssignment_0");
			builder.put(grammarAccess.getMethodCallAccess().getMethodAssignment_2(), "rule__MethodCall__MethodAssignment_2");
			builder.put(grammarAccess.getRelationExpressionAccess().getLhsAssignment_0(), "rule__RelationExpression__LhsAssignment_0");
			builder.put(grammarAccess.getRelationExpressionAccess().getRelationAssignment_1(), "rule__RelationExpression__RelationAssignment_1");
			builder.put(grammarAccess.getRelationExpressionAccess().getRhsAssignment_2(), "rule__RelationExpression__RhsAssignment_2");
			builder.put(grammarAccess.getBooleanOrAccess().getRightAssignment_1_2(), "rule__BooleanOr__RightAssignment_1_2");
			builder.put(grammarAccess.getBooleanXorAccess().getRightAssignment_1_2(), "rule__BooleanXor__RightAssignment_1_2");
			builder.put(grammarAccess.getBooleanAndAccess().getRightAssignment_1_2(), "rule__BooleanAnd__RightAssignment_1_2");
			builder.put(grammarAccess.getBaseBooleanAccess().getExprAssignment_0_3(), "rule__BaseBoolean__ExprAssignment_0_3");
			builder.put(grammarAccess.getBaseBooleanAccess().getValueAssignment_2_1(), "rule__BaseBoolean__ValueAssignment_2_1");
			builder.put(grammarAccess.getNumberLiteralAccess().getValueAssignment(), "rule__NumberLiteral__ValueAssignment");
			builder.put(grammarAccess.getStringConcatenationAccess().getRightAssignment_1_2(), "rule__StringConcatenation__RightAssignment_1_2");
			builder.put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
			builder.put(grammarAccess.getGeneratorAccess().getCommandsAssignment_5(), "rule__Generator__CommandsAssignment_5");
			builder.put(grammarAccess.getGenPatternCallAccess().getCalledPatternAssignment_0(), "rule__GenPatternCall__CalledPatternAssignment_0");
			builder.put(grammarAccess.getGenPatternCallAccess().getParamsAssignment_1_1(), "rule__GenPatternCall__ParamsAssignment_1_1");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0(), "rule__PatternObjectCreation__PObjectAssignment_0");
			builder.put(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2(), "rule__PatternObjectCreation__PatternCallAssignment_2");
			builder.put(grammarAccess.getPatternObjectAccess().getTypeAssignment_0(), "rule__PatternObject__TypeAssignment_0");
			builder.put(grammarAccess.getPatternObjectAccess().getNameAssignment_1(), "rule__PatternObject__NameAssignment_1");
			builder.put(grammarAccess.getForLoopAccess().getIteratorVarAssignment_1(), "rule__ForLoop__IteratorVarAssignment_1");
			builder.put(grammarAccess.getForLoopAccess().getIteratingConditionAssignment_3(), "rule__ForLoop__IteratingConditionAssignment_3");
			builder.put(grammarAccess.getForLoopAccess().getCommandsAssignment_5(), "rule__ForLoop__CommandsAssignment_5");
			builder.put(grammarAccess.getForEachCollectionAccess().getCollAssignment(), "rule__ForEachCollection__CollAssignment");
			builder.put(grammarAccess.getForRangeAccess().getStartAssignment_0(), "rule__ForRange__StartAssignment_0");
			builder.put(grammarAccess.getForRangeAccess().getEndAssignment_2(), "rule__ForRange__EndAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MGLangGrammarAccess grammarAccess;

	@Override
	protected InternalMGLangParser createParser() {
		InternalMGLangParser result = new InternalMGLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MGLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MGLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
