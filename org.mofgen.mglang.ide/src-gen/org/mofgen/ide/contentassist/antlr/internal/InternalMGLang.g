/*
 * generated by Xtext 2.20.0
 */
grammar InternalMGLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.mofgen.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.mofgen.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mofgen.services.MGLangGrammarAccess;

}
@parser::members {
	private MGLangGrammarAccess grammarAccess;

	public void setGrammarAccess(MGLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMofgenFile
entryRuleMofgenFile
:
{ before(grammarAccess.getMofgenFileRule()); }
	 ruleMofgenFile
{ after(grammarAccess.getMofgenFileRule()); } 
	 EOF 
;

// Rule MofgenFile
ruleMofgenFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMofgenFileAccess().getGroup()); }
		(rule__MofgenFile__Group__0)
		{ after(grammarAccess.getMofgenFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternReturn
entryRulePatternReturn
:
{ before(grammarAccess.getPatternReturnRule()); }
	 rulePatternReturn
{ after(grammarAccess.getPatternReturnRule()); } 
	 EOF 
;

// Rule PatternReturn
rulePatternReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternReturnAccess().getGroup()); }
		(rule__PatternReturn__Group__0)
		{ after(grammarAccess.getPatternReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getGroup()); }
		(rule__Node__Group__0)
		{ after(grammarAccess.getNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeConstructor
entryRuleNodeConstructor
:
{ before(grammarAccess.getNodeConstructorRule()); }
	 ruleNodeConstructor
{ after(grammarAccess.getNodeConstructorRule()); } 
	 EOF 
;

// Rule NodeConstructor
ruleNodeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeConstructorAccess().getGroup()); }
		(rule__NodeConstructor__Group__0)
		{ after(grammarAccess.getNodeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternCall
entryRulePatternCall
:
{ before(grammarAccess.getPatternCallRule()); }
	 rulePatternCall
{ after(grammarAccess.getPatternCallRule()); } 
	 EOF 
;

// Rule PatternCall
rulePatternCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternCallAccess().getGroup()); }
		(rule__PatternCall__Group__0)
		{ after(grammarAccess.getPatternCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeReferenceOrAssignment
entryRuleNodeReferenceOrAssignment
:
{ before(grammarAccess.getNodeReferenceOrAssignmentRule()); }
	 ruleNodeReferenceOrAssignment
{ after(grammarAccess.getNodeReferenceOrAssignmentRule()); } 
	 EOF 
;

// Rule NodeReferenceOrAssignment
ruleNodeReferenceOrAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup()); }
		(rule__NodeReferenceOrAssignment__Group__0)
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternNodeReference
entryRulePatternNodeReference
:
{ before(grammarAccess.getPatternNodeReferenceRule()); }
	 rulePatternNodeReference
{ after(grammarAccess.getPatternNodeReferenceRule()); } 
	 EOF 
;

// Rule PatternNodeReference
rulePatternNodeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getGroup()); }
		(rule__PatternNodeReference__Group__0)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeAttributeCall
entryRuleNodeAttributeCall
:
{ before(grammarAccess.getNodeAttributeCallRule()); }
	 ruleNodeAttributeCall
{ after(grammarAccess.getNodeAttributeCallRule()); } 
	 EOF 
;

// Rule NodeAttributeCall
ruleNodeAttributeCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAttributeCallAccess().getGroup()); }
		(rule__NodeAttributeCall__Group__0)
		{ after(grammarAccess.getNodeAttributeCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getAlternatives()); }
		(rule__Parameter__Alternatives)
		{ after(grammarAccess.getParameterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveParameter
entryRulePrimitiveParameter
:
{ before(grammarAccess.getPrimitiveParameterRule()); }
	 rulePrimitiveParameter
{ after(grammarAccess.getPrimitiveParameterRule()); } 
	 EOF 
;

// Rule PrimitiveParameter
rulePrimitiveParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveParameterAccess().getGroup()); }
		(rule__PrimitiveParameter__Group__0)
		{ after(grammarAccess.getPrimitiveParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectParameter
entryRuleObjectParameter
:
{ before(grammarAccess.getObjectParameterRule()); }
	 ruleObjectParameter
{ after(grammarAccess.getObjectParameterRule()); } 
	 EOF 
;

// Rule ObjectParameter
ruleObjectParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectParameterAccess().getGroup()); }
		(rule__ObjectParameter__Group__0)
		{ after(grammarAccess.getObjectParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterOrMethodCall
entryRuleParameterOrMethodCall
:
{ before(grammarAccess.getParameterOrMethodCallRule()); }
	 ruleParameterOrMethodCall
{ after(grammarAccess.getParameterOrMethodCallRule()); } 
	 EOF 
;

// Rule ParameterOrMethodCall
ruleParameterOrMethodCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterOrMethodCallAccess().getAlternatives()); }
		(rule__ParameterOrMethodCall__Alternatives)
		{ after(grammarAccess.getParameterOrMethodCallAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterRef
entryRuleParameterRef
:
{ before(grammarAccess.getParameterRefRule()); }
	 ruleParameterRef
{ after(grammarAccess.getParameterRefRule()); } 
	 EOF 
;

// Rule ParameterRef
ruleParameterRef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterRefAccess().getRefAssignment()); }
		(rule__ParameterRef__RefAssignment)
		{ after(grammarAccess.getParameterRefAccess().getRefAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMethodCall
entryRuleMethodCall
:
{ before(grammarAccess.getMethodCallRule()); }
	 ruleMethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMethodCallAccess().getGroup()); }
		(rule__MethodCall__Group__0)
		{ after(grammarAccess.getMethodCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getBooleanOrParserRuleCall()); }
		ruleBooleanOr
		{ after(grammarAccess.getBooleanExpressionAccess().getBooleanOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationExpression
entryRuleRelationExpression
:
{ before(grammarAccess.getRelationExpressionRule()); }
	 ruleRelationExpression
{ after(grammarAccess.getRelationExpressionRule()); } 
	 EOF 
;

// Rule RelationExpression
ruleRelationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getGroup()); }
		(rule__RelationExpression__Group__0)
		{ after(grammarAccess.getRelationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanOr
entryRuleBooleanOr
:
{ before(grammarAccess.getBooleanOrRule()); }
	 ruleBooleanOr
{ after(grammarAccess.getBooleanOrRule()); } 
	 EOF 
;

// Rule BooleanOr
ruleBooleanOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanOrAccess().getGroup()); }
		(rule__BooleanOr__Group__0)
		{ after(grammarAccess.getBooleanOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanXor
entryRuleBooleanXor
:
{ before(grammarAccess.getBooleanXorRule()); }
	 ruleBooleanXor
{ after(grammarAccess.getBooleanXorRule()); } 
	 EOF 
;

// Rule BooleanXor
ruleBooleanXor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanXorAccess().getGroup()); }
		(rule__BooleanXor__Group__0)
		{ after(grammarAccess.getBooleanXorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanAnd
entryRuleBooleanAnd
:
{ before(grammarAccess.getBooleanAndRule()); }
	 ruleBooleanAnd
{ after(grammarAccess.getBooleanAndRule()); } 
	 EOF 
;

// Rule BooleanAnd
ruleBooleanAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAndAccess().getGroup()); }
		(rule__BooleanAnd__Group__0)
		{ after(grammarAccess.getBooleanAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseBoolean
entryRuleBaseBoolean
:
{ before(grammarAccess.getBaseBooleanRule()); }
	 ruleBaseBoolean
{ after(grammarAccess.getBaseBooleanRule()); } 
	 EOF 
;

// Rule BaseBoolean
ruleBaseBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseBooleanAccess().getAlternatives()); }
		(rule__BaseBoolean__Alternatives)
		{ after(grammarAccess.getBaseBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getStringConcatenationParserRuleCall()); }
		ruleStringConcatenation
		{ after(grammarAccess.getStringExpressionAccess().getStringConcatenationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringConcatenation
entryRuleStringConcatenation
:
{ before(grammarAccess.getStringConcatenationRule()); }
	 ruleStringConcatenation
{ after(grammarAccess.getStringConcatenationRule()); } 
	 EOF 
;

// Rule StringConcatenation
ruleStringConcatenation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringConcatenationAccess().getGroup()); }
		(rule__StringConcatenation__Group__0)
		{ after(grammarAccess.getStringConcatenationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
		(rule__StringLiteral__ValueAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGenerator
entryRuleGenerator
:
{ before(grammarAccess.getGeneratorRule()); }
	 ruleGenerator
{ after(grammarAccess.getGeneratorRule()); } 
	 EOF 
;

// Rule Generator
ruleGenerator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorAccess().getGroup()); }
		(rule__Generator__Group__0)
		{ after(grammarAccess.getGeneratorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneratorElement
entryRuleGeneratorElement
:
{ before(grammarAccess.getGeneratorElementRule()); }
	 ruleGeneratorElement
{ after(grammarAccess.getGeneratorElementRule()); } 
	 EOF 
;

// Rule GeneratorElement
ruleGeneratorElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorElementAccess().getAlternatives()); }
		(rule__GeneratorElement__Alternatives)
		{ after(grammarAccess.getGeneratorElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneratorCommand
entryRuleGeneratorCommand
:
{ before(grammarAccess.getGeneratorCommandRule()); }
	 ruleGeneratorCommand
{ after(grammarAccess.getGeneratorCommandRule()); } 
	 EOF 
;

// Rule GeneratorCommand
ruleGeneratorCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorCommandAccess().getAlternatives()); }
		(rule__GeneratorCommand__Alternatives)
		{ after(grammarAccess.getGeneratorCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternObjectCreation
entryRulePatternObjectCreation
:
{ before(grammarAccess.getPatternObjectCreationRule()); }
	 rulePatternObjectCreation
{ after(grammarAccess.getPatternObjectCreationRule()); } 
	 EOF 
;

// Rule PatternObjectCreation
rulePatternObjectCreation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternObjectCreationAccess().getGroup()); }
		(rule__PatternObjectCreation__Group__0)
		{ after(grammarAccess.getPatternObjectCreationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternObject
entryRulePatternObject
:
{ before(grammarAccess.getPatternObjectRule()); }
	 rulePatternObject
{ after(grammarAccess.getPatternObjectRule()); } 
	 EOF 
;

// Rule PatternObject
rulePatternObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternObjectAccess().getGroup()); }
		(rule__PatternObject__Group__0)
		{ after(grammarAccess.getPatternObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoop
entryRuleForLoop
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopAccess().getGroup()); }
		(rule__ForLoop__Group__0)
		{ after(grammarAccess.getForLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForCondition
entryRuleForCondition
:
{ before(grammarAccess.getForConditionRule()); }
	 ruleForCondition
{ after(grammarAccess.getForConditionRule()); } 
	 EOF 
;

// Rule ForCondition
ruleForCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForConditionAccess().getAlternatives()); }
		(rule__ForCondition__Alternatives)
		{ after(grammarAccess.getForConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForEachCollection
entryRuleForEachCollection
:
{ before(grammarAccess.getForEachCollectionRule()); }
	 ruleForEachCollection
{ after(grammarAccess.getForEachCollectionRule()); } 
	 EOF 
;

// Rule ForEachCollection
ruleForEachCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForEachCollectionAccess().getCollAssignment()); }
		(rule__ForEachCollection__CollAssignment)
		{ after(grammarAccess.getForEachCollectionAccess().getCollAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForRange
entryRuleForRange
:
{ before(grammarAccess.getForRangeRule()); }
	 ruleForRange
{ after(grammarAccess.getForRangeRule()); } 
	 EOF 
;

// Rule ForRange
ruleForRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForRangeAccess().getGroup()); }
		(rule__ForRange__Group__0)
		{ after(grammarAccess.getForRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Boolean
ruleBoolean
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getAlternatives()); }
		(rule__Boolean__Alternatives)
		{ after(grammarAccess.getBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PrimitiveType
rulePrimitiveType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
		(rule__PrimitiveType__Alternatives)
		{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationalOp
ruleRelationalOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
		(rule__RelationalOp__Alternatives)
		{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0()); }
		(rule__MofgenFile__PatternsAssignment_1_0)
		{ after(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1()); }
		(rule__MofgenFile__GeneratorsAssignment_1_1)
		{ after(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__CreatedByAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getCreatedByNodeConstructorParserRuleCall_2_0_0()); }
		ruleNodeConstructor
		{ after(grammarAccess.getNodeAccess().getCreatedByNodeConstructorParserRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getCreatedByPatternCallParserRuleCall_2_0_1()); }
		rulePatternCall
		{ after(grammarAccess.getNodeAccess().getCreatedByPatternCallParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getPatternNodeReferenceParserRuleCall_0_0()); }
		rulePatternNodeReference
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getPatternNodeReferenceParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getAssignmentParserRuleCall_0_1()); }
		ruleAssignment
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getAssignmentParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getPrimitiveParameterParserRuleCall_0()); }
		rulePrimitiveParameter
		{ after(grammarAccess.getParameterAccess().getPrimitiveParameterParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getObjectParameterParserRuleCall_1()); }
		ruleObjectParameter
		{ after(grammarAccess.getParameterAccess().getObjectParameterParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterOrMethodCall__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterOrMethodCallAccess().getParameterRefParserRuleCall_0()); }
		ruleParameterRef
		{ after(grammarAccess.getParameterOrMethodCallAccess().getParameterRefParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterOrMethodCallAccess().getMethodCallParserRuleCall_1()); }
		ruleMethodCall
		{ after(grammarAccess.getParameterOrMethodCallAccess().getMethodCallParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseBooleanAccess().getGroup_0()); }
		(rule__BaseBoolean__Group_0__0)
		{ after(grammarAccess.getBaseBooleanAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBaseBooleanAccess().getGroup_1()); }
		(rule__BaseBoolean__Group_1__0)
		{ after(grammarAccess.getBaseBooleanAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getBaseBooleanAccess().getGroup_2()); }
		(rule__BaseBoolean__Group_2__0)
		{ after(grammarAccess.getBaseBooleanAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getBaseBooleanAccess().getRelationExpressionParserRuleCall_3()); }
		ruleRelationExpression
		{ after(grammarAccess.getBaseBooleanAccess().getRelationExpressionParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratorElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorElementAccess().getGeneratorCommandParserRuleCall_0()); }
		ruleGeneratorCommand
		{ after(grammarAccess.getGeneratorElementAccess().getGeneratorCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorElementAccess().getForLoopParserRuleCall_1()); }
		ruleForLoop
		{ after(grammarAccess.getGeneratorElementAccess().getForLoopParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratorCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorCommandAccess().getPatternCallParserRuleCall_0()); }
		rulePatternCall
		{ after(grammarAccess.getGeneratorCommandAccess().getPatternCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorCommandAccess().getPatternObjectCreationParserRuleCall_1()); }
		rulePatternObjectCreation
		{ after(grammarAccess.getGeneratorCommandAccess().getPatternObjectCreationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForCondition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForConditionAccess().getForEachCollectionParserRuleCall_0()); }
		ruleForEachCollection
		{ after(grammarAccess.getForConditionAccess().getForEachCollectionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getForConditionAccess().getForRangeParserRuleCall_1()); }
		ruleForRange
		{ after(grammarAccess.getForConditionAccess().getForRangeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getTRUEEnumLiteralDeclaration_0()); }
		('true')
		{ after(grammarAccess.getBooleanAccess().getTRUEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanAccess().getFALSEEnumLiteralDeclaration_1()); }
		('false')
		{ after(grammarAccess.getBooleanAccess().getFALSEEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0()); }
		('int')
		{ after(grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1()); }
		('char')
		{ after(grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2()); }
		('double')
		{ after(grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOpAccess().getGREATEREnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getRelationalOpAccess().getGREATEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); }
		('>=')
		{ after(grammarAccess.getRelationalOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getEQUALEnumLiteralDeclaration_2()); }
		('==')
		{ after(grammarAccess.getRelationalOpAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getUNEQUALEnumLiteralDeclaration_3()); }
		('!=')
		{ after(grammarAccess.getRelationalOpAccess().getUNEQUALEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getRelationalOpAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getSMALLEREnumLiteralDeclaration_5()); }
		('<')
		{ after(grammarAccess.getRelationalOpAccess().getSMALLEREnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__0__Impl
	rule__MofgenFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getImportsAssignment_0()); }
	(rule__MofgenFile__ImportsAssignment_0)*
	{ after(grammarAccess.getMofgenFileAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getAlternatives_1()); }
	(rule__MofgenFile__Alternatives_1)*
	{ after(grammarAccess.getMofgenFileAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getNameAssignment_1()); }
	(rule__Import__NameAssignment_1)
	{ after(grammarAccess.getImportAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getImportAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAliasAssignment_3()); }
	(rule__Import__AliasAssignment_3)
	{ after(grammarAccess.getImportAccess().getAliasAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
	'pattern'
	{ after(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
	rule__Pattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getNameAssignment_1()); }
	(rule__Pattern__NameAssignment_1)
	{ after(grammarAccess.getPatternAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__2__Impl
	rule__Pattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2()); }
	(rule__Pattern__Group_2__0)
	{ after(grammarAccess.getPatternAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__3__Impl
	rule__Pattern__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__4__Impl
	rule__Pattern__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getNodesAssignment_4()); }
	(rule__Pattern__NodesAssignment_4)*
	{ after(grammarAccess.getPatternAccess().getNodesAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__5__Impl
	rule__Pattern__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getReturnAssignment_6()); }
	(rule__Pattern__ReturnAssignment_6)?
	{ after(grammarAccess.getPatternAccess().getReturnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__0__Impl
	rule__Pattern__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__1__Impl
	rule__Pattern__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2_1()); }
	(rule__Pattern__Group_2_1__0)?
	{ after(grammarAccess.getPatternAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1__0__Impl
	rule__Pattern__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0()); }
	(rule__Pattern__ParametersAssignment_2_1_0)
	{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2_1_1()); }
	(rule__Pattern__Group_2_1_1__0)*
	{ after(grammarAccess.getPatternAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1_1__0__Impl
	rule__Pattern__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0()); }
	','
	{ after(grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1()); }
	(rule__Pattern__ParametersAssignment_2_1_1_1)
	{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__0__Impl
	rule__PatternReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getPatternReturnAction_0()); }
	()
	{ after(grammarAccess.getPatternReturnAccess().getPatternReturnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__1__Impl
	rule__PatternReturn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getReturnKeyword_1()); }
	'return'
	{ after(grammarAccess.getPatternReturnAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__2__Impl
	rule__PatternReturn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getThisKeyword_2()); }
	'this'
	{ after(grammarAccess.getPatternReturnAccess().getThisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getGroup_3()); }
	(rule__PatternReturn__Group_3__0)?
	{ after(grammarAccess.getPatternReturnAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternReturn__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group_3__0__Impl
	rule__PatternReturn__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getFullStopKeyword_3_0()); }
	'.'
	{ after(grammarAccess.getPatternReturnAccess().getFullStopKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getReturnValueAssignment_3_1()); }
	(rule__PatternReturn__ReturnValueAssignment_3_1)
	{ after(grammarAccess.getPatternReturnAccess().getReturnValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getTypeAssignment_0()); }
	(rule__Node__TypeAssignment_0)
	{ after(grammarAccess.getNodeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNameAssignment_1()); }
	(rule__Node__NameAssignment_1)
	{ after(grammarAccess.getNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getCreatedByAssignment_2()); }
	(rule__Node__CreatedByAssignment_2)?
	{ after(grammarAccess.getNodeAccess().getCreatedByAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__0__Impl
	rule__NodeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getNodeConstructorAction_0()); }
	()
	{ after(grammarAccess.getNodeConstructorAccess().getNodeConstructorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__1__Impl
	rule__NodeConstructor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getNodeConstructorAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__2__Impl
	rule__NodeConstructor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getRefsAssignsAssignment_2()); }
	(rule__NodeConstructor__RefsAssignsAssignment_2)*
	{ after(grammarAccess.getNodeConstructorAccess().getRefsAssignsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getNodeConstructorAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__0__Impl
	rule__PatternCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getCalledAssignment_0()); }
	(rule__PatternCall__CalledAssignment_0)
	{ after(grammarAccess.getPatternCallAccess().getCalledAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__1__Impl
	rule__PatternCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__2__Impl
	rule__PatternCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getParamsAssignment_2()); }
	(rule__PatternCall__ParamsAssignment_2)*
	{ after(grammarAccess.getPatternCallAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeReferenceOrAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group__0__Impl
	rule__NodeReferenceOrAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives_0()); }
	(rule__NodeReferenceOrAssignment__Alternatives_0)
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup_1()); }
	(rule__NodeReferenceOrAssignment__Group_1__0)?
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeReferenceOrAssignment__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group_1__0__Impl
	rule__NodeReferenceOrAssignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group_1__1__Impl
	rule__NodeReferenceOrAssignment__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionAssignment_1_1()); }
	(rule__NodeReferenceOrAssignment__ConditionAssignment_1_1)
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternNodeReference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__0__Impl
	rule__PatternNodeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_0()); }
	(rule__PatternNodeReference__TypeAssignment_0)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__1__Impl
	rule__PatternNodeReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_2()); }
	(rule__PatternNodeReference__TargetAssignment_2)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
	(rule__Assignment__TargetAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getAssignmentAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeAttributeCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeAttributeCall__Group__0__Impl
	rule__NodeAttributeCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAttributeCallAccess().getNodeAssignment_0()); }
	(rule__NodeAttributeCall__NodeAssignment_0)
	{ after(grammarAccess.getNodeAttributeCallAccess().getNodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeAttributeCall__Group__1__Impl
	rule__NodeAttributeCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAttributeCallAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getNodeAttributeCallAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeAttributeCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAttributeCallAccess().getAttributeAssignment_2()); }
	(rule__NodeAttributeCall__AttributeAssignment_2)
	{ after(grammarAccess.getNodeAttributeCallAccess().getAttributeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveParameter__Group__0__Impl
	rule__PrimitiveParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveParameterAccess().getTypeAssignment_0()); }
	(rule__PrimitiveParameter__TypeAssignment_0)
	{ after(grammarAccess.getPrimitiveParameterAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveParameterAccess().getNameAssignment_1()); }
	(rule__PrimitiveParameter__NameAssignment_1)
	{ after(grammarAccess.getPrimitiveParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectParameter__Group__0__Impl
	rule__ObjectParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectParameterAccess().getTypeAssignment_0()); }
	(rule__ObjectParameter__TypeAssignment_0)
	{ after(grammarAccess.getObjectParameterAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectParameterAccess().getNameAssignment_1()); }
	(rule__ObjectParameter__NameAssignment_1)
	{ after(grammarAccess.getObjectParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__0__Impl
	rule__MethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getCalledNodeAssignment_0()); }
	(rule__MethodCall__CalledNodeAssignment_0)
	{ after(grammarAccess.getMethodCallAccess().getCalledNodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__1__Impl
	rule__MethodCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getMethodCallAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MethodCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMethodCallAccess().getMethodAssignment_2()); }
	(rule__MethodCall__MethodAssignment_2)
	{ after(grammarAccess.getMethodCallAccess().getMethodAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group__0__Impl
	rule__RelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getLhsAssignment_0()); }
	(rule__RelationExpression__LhsAssignment_0)
	{ after(grammarAccess.getRelationExpressionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group__1__Impl
	rule__RelationExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getRelationAssignment_1()); }
	(rule__RelationExpression__RelationAssignment_1)
	{ after(grammarAccess.getRelationExpressionAccess().getRelationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getRhsAssignment_2()); }
	(rule__RelationExpression__RhsAssignment_2)
	{ after(grammarAccess.getRelationExpressionAccess().getRhsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOr__Group__0__Impl
	rule__BooleanOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOrAccess().getBooleanXorParserRuleCall_0()); }
	ruleBooleanXor
	{ after(grammarAccess.getBooleanOrAccess().getBooleanXorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOrAccess().getGroup_1()); }
	(rule__BooleanOr__Group_1__0)*
	{ after(grammarAccess.getBooleanOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanOr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOr__Group_1__0__Impl
	rule__BooleanOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOrAccess().getOrLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBooleanOrAccess().getOrLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOr__Group_1__1__Impl
	rule__BooleanOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
	'||'
	{ after(grammarAccess.getBooleanOrAccess().getVerticalLineVerticalLineKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanOr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanOrAccess().getRightAssignment_1_2()); }
	(rule__BooleanOr__RightAssignment_1_2)
	{ after(grammarAccess.getBooleanOrAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanXor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanXor__Group__0__Impl
	rule__BooleanXor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanXorAccess().getBooleanAndParserRuleCall_0()); }
	ruleBooleanAnd
	{ after(grammarAccess.getBooleanXorAccess().getBooleanAndParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanXor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanXorAccess().getGroup_1()); }
	(rule__BooleanXor__Group_1__0)*
	{ after(grammarAccess.getBooleanXorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanXor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanXor__Group_1__0__Impl
	rule__BooleanXor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanXorAccess().getXorLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBooleanXorAccess().getXorLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanXor__Group_1__1__Impl
	rule__BooleanXor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanXorAccess().getCircumflexAccentKeyword_1_1()); }
	'^'
	{ after(grammarAccess.getBooleanXorAccess().getCircumflexAccentKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanXor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanXorAccess().getRightAssignment_1_2()); }
	(rule__BooleanXor__RightAssignment_1_2)
	{ after(grammarAccess.getBooleanXorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAnd__Group__0__Impl
	rule__BooleanAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAndAccess().getBaseBooleanParserRuleCall_0()); }
	ruleBaseBoolean
	{ after(grammarAccess.getBooleanAndAccess().getBaseBooleanParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAndAccess().getGroup_1()); }
	(rule__BooleanAnd__Group_1__0)*
	{ after(grammarAccess.getBooleanAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAnd__Group_1__0__Impl
	rule__BooleanAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAndAccess().getAndLeftAction_1_0()); }
	()
	{ after(grammarAccess.getBooleanAndAccess().getAndLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAnd__Group_1__1__Impl
	rule__BooleanAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAndAccess().getAmpersandAmpersandKeyword_1_1()); }
	'&&'
	{ after(grammarAccess.getBooleanAndAccess().getAmpersandAmpersandKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanAnd__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAndAccess().getRightAssignment_1_2()); }
	(rule__BooleanAnd__RightAssignment_1_2)
	{ after(grammarAccess.getBooleanAndAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseBoolean__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_0__0__Impl
	rule__BaseBoolean__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getNegatedBooleanAction_0_0()); }
	()
	{ after(grammarAccess.getBaseBooleanAccess().getNegatedBooleanAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_0__1__Impl
	rule__BaseBoolean__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getExclamationMarkKeyword_0_1()); }
	'!'
	{ after(grammarAccess.getBaseBooleanAccess().getExclamationMarkKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_0__2__Impl
	rule__BaseBoolean__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getLeftParenthesisKeyword_0_2()); }
	'('
	{ after(grammarAccess.getBaseBooleanAccess().getLeftParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_0__3__Impl
	rule__BaseBoolean__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getExprAssignment_0_3()); }
	(rule__BaseBoolean__ExprAssignment_0_3)
	{ after(grammarAccess.getBaseBooleanAccess().getExprAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getBaseBooleanAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseBoolean__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_1__0__Impl
	rule__BaseBoolean__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getBaseBooleanAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_1__1__Impl
	rule__BaseBoolean__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getBooleanExpressionParserRuleCall_1_1()); }
	ruleBooleanExpression
	{ after(grammarAccess.getBaseBooleanAccess().getBooleanExpressionParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getBaseBooleanAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseBoolean__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_2__0__Impl
	rule__BaseBoolean__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getBooleanLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getBaseBooleanAccess().getBooleanLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseBoolean__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseBooleanAccess().getValueAssignment_2_1()); }
	(rule__BaseBoolean__ValueAssignment_2_1)
	{ after(grammarAccess.getBaseBooleanAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringConcatenation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConcatenation__Group__0__Impl
	rule__StringConcatenation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConcatenationAccess().getStringLiteralParserRuleCall_0()); }
	ruleStringLiteral
	{ after(grammarAccess.getStringConcatenationAccess().getStringLiteralParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConcatenation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConcatenationAccess().getGroup_1()); }
	(rule__StringConcatenation__Group_1__0)?
	{ after(grammarAccess.getStringConcatenationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StringConcatenation__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConcatenation__Group_1__0__Impl
	rule__StringConcatenation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConcatenationAccess().getConcatLeftAction_1_0()); }
	()
	{ after(grammarAccess.getStringConcatenationAccess().getConcatLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConcatenation__Group_1__1__Impl
	rule__StringConcatenation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConcatenationAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getStringConcatenationAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StringConcatenation__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStringConcatenationAccess().getRightAssignment_1_2()); }
	(rule__StringConcatenation__RightAssignment_1_2)
	{ after(grammarAccess.getStringConcatenationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__0__Impl
	rule__Generator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getGeneratorAction_0()); }
	()
	{ after(grammarAccess.getGeneratorAccess().getGeneratorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__1__Impl
	rule__Generator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getGenKeyword_1()); }
	'gen'
	{ after(grammarAccess.getGeneratorAccess().getGenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__2__Impl
	rule__Generator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__3__Impl
	rule__Generator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__4__Impl
	rule__Generator__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__5__Impl
	rule__Generator__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getCommandsAssignment_5()); }
	(rule__Generator__CommandsAssignment_5)*
	{ after(grammarAccess.getGeneratorAccess().getCommandsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternObjectCreation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObjectCreation__Group__0__Impl
	rule__PatternObjectCreation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0()); }
	(rule__PatternObjectCreation__PObjectAssignment_0)
	{ after(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObjectCreation__Group__1__Impl
	rule__PatternObjectCreation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectCreationAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getPatternObjectCreationAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObjectCreation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2()); }
	(rule__PatternObjectCreation__PatternCallAssignment_2)
	{ after(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObject__Group__0__Impl
	rule__PatternObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectAccess().getTypeAssignment_0()); }
	(rule__PatternObject__TypeAssignment_0)
	{ after(grammarAccess.getPatternObjectAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectAccess().getNameAssignment_1()); }
	(rule__PatternObject__NameAssignment_1)
	{ after(grammarAccess.getPatternObjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getIteratorVarAssignment_1()); }
	(rule__ForLoop__IteratorVarAssignment_1)
	{ after(grammarAccess.getForLoopAccess().getIteratorVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getForLoopAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getIteratingConditionAssignment_3()); }
	(rule__ForLoop__IteratingConditionAssignment_3)
	{ after(grammarAccess.getForLoopAccess().getIteratingConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__4__Impl
	rule__ForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__5__Impl
	rule__ForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getCommandsAssignment_5()); }
	(rule__ForLoop__CommandsAssignment_5)*
	{ after(grammarAccess.getForLoopAccess().getCommandsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__0__Impl
	rule__ForRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getStartAssignment_0()); }
	(rule__ForRange__StartAssignment_0)
	{ after(grammarAccess.getForRangeAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__1__Impl
	rule__ForRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getForRangeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getEndAssignment_2()); }
	(rule__ForRange__EndAssignment_2)
	{ after(grammarAccess.getForRangeAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MofgenFile__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__PatternsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_1_0_0()); }
		rulePattern
		{ after(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__GeneratorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_1_1_0()); }
		ruleGenerator
		{ after(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__AliasAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
		ruleParameter
		{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NodesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNodesNodeParserRuleCall_4_0()); }
		ruleNode
		{ after(grammarAccess.getPatternAccess().getNodesNodeParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ReturnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0()); }
		rulePatternReturn
		{ after(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__ReturnValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternReturnAccess().getReturnValueNodeCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getPatternReturnAccess().getReturnValueNodeIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternReturnAccess().getReturnValueNodeIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getPatternReturnAccess().getReturnValueNodeCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0()); }
		(
			{ before(grammarAccess.getNodeAccess().getTypeEClassIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAccess().getTypeEClassIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__CreatedByAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getCreatedByAlternatives_2_0()); }
		(rule__Node__CreatedByAlternatives_2_0)
		{ after(grammarAccess.getNodeAccess().getCreatedByAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__RefsAssignsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeConstructorAccess().getRefsAssignsNodeReferenceOrAssignmentParserRuleCall_2_0()); }
		ruleNodeReferenceOrAssignment
		{ after(grammarAccess.getNodeConstructorAccess().getRefsAssignsNodeReferenceOrAssignmentParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__CalledAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getCalledPatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternCallAccess().getCalledPatternIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternCallAccess().getCalledPatternIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternCallAccess().getCalledPatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getParamsStringExpressionParserRuleCall_2_0()); }
		ruleStringExpression
		{ after(grammarAccess.getPatternCallAccess().getParamsStringExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__ConditionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionBooleanExpressionParserRuleCall_1_1_0()); }
		ruleBooleanExpression
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionBooleanExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__TargetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TargetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getTargetEAttributeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getTargetEAttributeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getTargetEAttributeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getTargetEAttributeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueStringExpressionParserRuleCall_2_0()); }
		ruleStringExpression
		{ after(grammarAccess.getAssignmentAccess().getValueStringExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__NodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAttributeCallAccess().getNodeNodeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getNodeAttributeCallAccess().getNodeNodeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAttributeCallAccess().getNodeNodeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getNodeAttributeCallAccess().getNodeNodeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__AttributeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveParameterAccess().getTypePrimitiveTypeEnumRuleCall_0_0()); }
		rulePrimitiveType
		{ after(grammarAccess.getPrimitiveParameterAccess().getTypePrimitiveTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPrimitiveParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectParameter__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectParameterAccess().getTypeEClassifierCrossReference_0_0()); }
		(
			{ before(grammarAccess.getObjectParameterAccess().getTypeEClassifierIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObjectParameterAccess().getTypeEClassifierIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getObjectParameterAccess().getTypeEClassifierCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectParameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getObjectParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterRef__RefAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterRefAccess().getRefParameterCrossReference_0()); }
		(
			{ before(grammarAccess.getParameterRefAccess().getRefParameterIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParameterRefAccess().getRefParameterIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getParameterRefAccess().getRefParameterCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__CalledNodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getCalledNodeNodeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getCalledNodeNodeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMethodCallAccess().getCalledNodeNodeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getCalledNodeNodeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMethodCallAccess().getMethodEOperationCrossReference_2_0()); }
		(
			{ before(grammarAccess.getMethodCallAccess().getMethodEOperationIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMethodCallAccess().getMethodEOperationIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getMethodCallAccess().getMethodEOperationCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getLhsParameterOrMethodCallParserRuleCall_0_0()); }
		ruleParameterOrMethodCall
		{ after(grammarAccess.getRelationExpressionAccess().getLhsParameterOrMethodCallParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__RelationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getRelationRelationalOpEnumRuleCall_1_0()); }
		ruleRelationalOp
		{ after(grammarAccess.getRelationExpressionAccess().getRelationRelationalOpEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__RhsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getRhsParameterOrMethodCallParserRuleCall_2_0()); }
		ruleParameterOrMethodCall
		{ after(grammarAccess.getRelationExpressionAccess().getRhsParameterOrMethodCallParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanOr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanOrAccess().getRightBooleanXorParserRuleCall_1_2_0()); }
		ruleBooleanXor
		{ after(grammarAccess.getBooleanOrAccess().getRightBooleanXorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanXor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanXorAccess().getRightBooleanAndParserRuleCall_1_2_0()); }
		ruleBooleanAnd
		{ after(grammarAccess.getBooleanXorAccess().getRightBooleanAndParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanAnd__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAndAccess().getRightBaseBooleanParserRuleCall_1_2_0()); }
		ruleBaseBoolean
		{ after(grammarAccess.getBooleanAndAccess().getRightBaseBooleanParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__ExprAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseBooleanAccess().getExprBooleanExpressionParserRuleCall_0_3_0()); }
		ruleBooleanExpression
		{ after(grammarAccess.getBaseBooleanAccess().getExprBooleanExpressionParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseBoolean__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseBooleanAccess().getValueBooleanEnumRuleCall_2_1_0()); }
		ruleBoolean
		{ after(grammarAccess.getBaseBooleanAccess().getValueBooleanEnumRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringConcatenation__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringConcatenationAccess().getRightStringConcatenationParserRuleCall_1_2_0()); }
		ruleStringConcatenation
		{ after(grammarAccess.getStringConcatenationAccess().getRightStringConcatenationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__CommandsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorAccess().getCommandsGeneratorElementParserRuleCall_5_0()); }
		ruleGeneratorElement
		{ after(grammarAccess.getGeneratorAccess().getCommandsGeneratorElementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__PObjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectCreationAccess().getPObjectPatternObjectParserRuleCall_0_0()); }
		rulePatternObject
		{ after(grammarAccess.getPatternObjectCreationAccess().getPObjectPatternObjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__PatternCallAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectCreationAccess().getPatternCallPatternCallParserRuleCall_2_0()); }
		rulePatternCall
		{ after(grammarAccess.getPatternObjectCreationAccess().getPatternCallPatternCallParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectAccess().getTypePatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternObjectAccess().getTypePatternIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternObjectAccess().getTypePatternIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternObjectAccess().getTypePatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatternObjectAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__IteratorVarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getIteratorVarIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getForLoopAccess().getIteratorVarIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__IteratingConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getIteratingConditionForConditionParserRuleCall_3_0()); }
		ruleForCondition
		{ after(grammarAccess.getForLoopAccess().getIteratingConditionForConditionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__CommandsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getCommandsGeneratorCommandParserRuleCall_5_0()); }
		ruleGeneratorCommand
		{ after(grammarAccess.getForLoopAccess().getCommandsGeneratorCommandParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachCollection__CollAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachCollectionAccess().getCollNodeAttributeCallParserRuleCall_0()); }
		ruleNodeAttributeCall
		{ after(grammarAccess.getForEachCollectionAccess().getCollNodeAttributeCallParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForRangeAccess().getStartINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getForRangeAccess().getStartINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForRangeAccess().getEndINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getForRangeAccess().getEndINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INT : ('0'..'9')+;

RULE_NUMBER : '-'? RULE_INT ('.' RULE_INT)?;

RULE_ASSIGNMENT_OP : '=';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
