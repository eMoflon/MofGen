/*
 * generated by Xtext 2.20.0
 */
grammar InternalMGLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.mofgen.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.mofgen.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mofgen.services.MGLangGrammarAccess;

}
@parser::members {
	private MGLangGrammarAccess grammarAccess;

	public void setGrammarAccess(MGLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMofgenFile
entryRuleMofgenFile
:
{ before(grammarAccess.getMofgenFileRule()); }
	 ruleMofgenFile
{ after(grammarAccess.getMofgenFileRule()); } 
	 EOF 
;

// Rule MofgenFile
ruleMofgenFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMofgenFileAccess().getGroup()); }
		(rule__MofgenFile__Group__0)
		{ after(grammarAccess.getMofgenFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfig
entryRuleConfig
:
{ before(grammarAccess.getConfigRule()); }
	 ruleConfig
{ after(grammarAccess.getConfigRule()); } 
	 EOF 
;

// Rule Config
ruleConfig 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigAccess().getGroup()); }
		(rule__Config__Group__0)
		{ after(grammarAccess.getConfigAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConfigExpression
entryRuleConfigExpression
:
{ before(grammarAccess.getConfigExpressionRule()); }
	 ruleConfigExpression
{ after(grammarAccess.getConfigExpressionRule()); } 
	 EOF 
;

// Rule ConfigExpression
ruleConfigExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConfigExpressionAccess().getTestKeyword()); }
		'test'
		{ after(grammarAccess.getConfigExpressionAccess().getTestKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternReturn
entryRulePatternReturn
:
{ before(grammarAccess.getPatternReturnRule()); }
	 rulePatternReturn
{ after(grammarAccess.getPatternReturnRule()); } 
	 EOF 
;

// Rule PatternReturn
rulePatternReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternReturnAccess().getGroup()); }
		(rule__PatternReturn__Group__0)
		{ after(grammarAccess.getPatternReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParamManipulation
entryRuleParamManipulation
:
{ before(grammarAccess.getParamManipulationRule()); }
	 ruleParamManipulation
{ after(grammarAccess.getParamManipulationRule()); } 
	 EOF 
;

// Rule ParamManipulation
ruleParamManipulation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParamManipulationAccess().getGroup()); }
		(rule__ParamManipulation__Group__0)
		{ after(grammarAccess.getParamManipulationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getGroup()); }
		(rule__Node__Group__0)
		{ after(grammarAccess.getNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeContent
entryRuleNodeContent
:
{ before(grammarAccess.getNodeContentRule()); }
	 ruleNodeContent
{ after(grammarAccess.getNodeContentRule()); } 
	 EOF 
;

// Rule NodeContent
ruleNodeContent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeContentAccess().getGroup()); }
		(rule__NodeContent__Group__0)
		{ after(grammarAccess.getNodeContentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternCall
entryRulePatternCall
:
{ before(grammarAccess.getPatternCallRule()); }
	 rulePatternCall
{ after(grammarAccess.getPatternCallRule()); } 
	 EOF 
;

// Rule PatternCall
rulePatternCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternCallAccess().getGroup()); }
		(rule__PatternCall__Group__0)
		{ after(grammarAccess.getPatternCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeReferenceOrAssignmentOrControlFlow
entryRuleNodeReferenceOrAssignmentOrControlFlow
:
{ before(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowRule()); }
	 ruleNodeReferenceOrAssignmentOrControlFlow
{ after(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowRule()); } 
	 EOF 
;

// Rule NodeReferenceOrAssignmentOrControlFlow
ruleNodeReferenceOrAssignmentOrControlFlow 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getAlternatives()); }
		(rule__NodeReferenceOrAssignmentOrControlFlow__Alternatives)
		{ after(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternNodeReference
entryRulePatternNodeReference
:
{ before(grammarAccess.getPatternNodeReferenceRule()); }
	 rulePatternNodeReference
{ after(grammarAccess.getPatternNodeReferenceRule()); } 
	 EOF 
;

// Rule PatternNodeReference
rulePatternNodeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getGroup()); }
		(rule__PatternNodeReference__Group__0)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getAlternatives()); }
		(rule__Parameter__Alternatives)
		{ after(grammarAccess.getParameterAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimitiveParameter
entryRulePrimitiveParameter
:
{ before(grammarAccess.getPrimitiveParameterRule()); }
	 rulePrimitiveParameter
{ after(grammarAccess.getPrimitiveParameterRule()); } 
	 EOF 
;

// Rule PrimitiveParameter
rulePrimitiveParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimitiveParameterAccess().getGroup()); }
		(rule__PrimitiveParameter__Group__0)
		{ after(grammarAccess.getPrimitiveParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterNode
entryRuleParameterNode
:
{ before(grammarAccess.getParameterNodeRule()); }
	 ruleParameterNode
{ after(grammarAccess.getParameterNodeRule()); } 
	 EOF 
;

// Rule ParameterNode
ruleParameterNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterNodeAccess().getGroup()); }
		(rule__ParameterNode__Group__0)
		{ after(grammarAccess.getParameterNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefOrCall
entryRuleRefOrCall
:
{ before(grammarAccess.getRefOrCallRule()); }
	 ruleRefOrCall
{ after(grammarAccess.getRefOrCallRule()); } 
	 EOF 
;

// Rule RefOrCall
ruleRefOrCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefOrCallAccess().getGroup()); }
		(rule__RefOrCall__Group__0)
		{ after(grammarAccess.getRefOrCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRefParams
entryRuleRefParams
:
{ before(grammarAccess.getRefParamsRule()); }
	 ruleRefParams
{ after(grammarAccess.getRefParamsRule()); } 
	 EOF 
;

// Rule RefParams
ruleRefParams 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRefParamsAccess().getGroup()); }
		(rule__RefParams__Group__0)
		{ after(grammarAccess.getRefParamsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGenerator
entryRuleGenerator
:
{ before(grammarAccess.getGeneratorRule()); }
	 ruleGenerator
{ after(grammarAccess.getGeneratorRule()); } 
	 EOF 
;

// Rule Generator
ruleGenerator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorAccess().getGroup()); }
		(rule__Generator__Group__0)
		{ after(grammarAccess.getGeneratorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneratorExpression
entryRuleGeneratorExpression
:
{ before(grammarAccess.getGeneratorExpressionRule()); }
	 ruleGeneratorExpression
{ after(grammarAccess.getGeneratorExpressionRule()); } 
	 EOF 
;

// Rule GeneratorExpression
ruleGeneratorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorExpressionAccess().getAlternatives()); }
		(rule__GeneratorExpression__Alternatives)
		{ after(grammarAccess.getGeneratorExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternVariable
entryRulePatternVariable
:
{ before(grammarAccess.getPatternVariableRule()); }
	 rulePatternVariable
{ after(grammarAccess.getPatternVariableRule()); } 
	 EOF 
;

// Rule PatternVariable
rulePatternVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternVariableAccess().getGroup()); }
		(rule__PatternVariable__Group__0)
		{ after(grammarAccess.getPatternVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup()); }
		(rule__ForStatement__Group__0)
		{ after(grammarAccess.getForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForHead
entryRuleForHead
:
{ before(grammarAccess.getForHeadRule()); }
	 ruleForHead
{ after(grammarAccess.getForHeadRule()); } 
	 EOF 
;

// Rule ForHead
ruleForHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForHeadAccess().getAlternatives()); }
		(rule__ForHead__Alternatives)
		{ after(grammarAccess.getForHeadAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneralForHead
entryRuleGeneralForHead
:
{ before(grammarAccess.getGeneralForHeadRule()); }
	 ruleGeneralForHead
{ after(grammarAccess.getGeneralForHeadRule()); } 
	 EOF 
;

// Rule GeneralForHead
ruleGeneralForHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneralForHeadAccess().getGroup()); }
		(rule__GeneralForHead__Group__0)
		{ after(grammarAccess.getGeneralForHeadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForEachHead
entryRuleForEachHead
:
{ before(grammarAccess.getForEachHeadRule()); }
	 ruleForEachHead
{ after(grammarAccess.getForEachHeadRule()); } 
	 EOF 
;

// Rule ForEachHead
ruleForEachHead 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForEachHeadAccess().getGroup()); }
		(rule__ForEachHead__Group__0)
		{ after(grammarAccess.getForEachHeadAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForBody
entryRuleForBody
:
{ before(grammarAccess.getForBodyRule()); }
	 ruleForBody
{ after(grammarAccess.getForBodyRule()); } 
	 EOF 
;

// Rule ForBody
ruleForBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForBodyAccess().getGroup()); }
		(rule__ForBody__Group__0)
		{ after(grammarAccess.getForBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchExpression
entryRuleSwitchExpression
:
{ before(grammarAccess.getSwitchExpressionRule()); }
	 ruleSwitchExpression
{ after(grammarAccess.getSwitchExpressionRule()); } 
	 EOF 
;

// Rule SwitchExpression
ruleSwitchExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getAlternatives()); }
		(rule__SwitchExpression__Alternatives)
		{ after(grammarAccess.getSwitchExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitch
entryRuleSwitch
:
{ before(grammarAccess.getSwitchRule()); }
	 ruleSwitch
{ after(grammarAccess.getSwitchRule()); } 
	 EOF 
;

// Rule Switch
ruleSwitch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchAccess().getAlternatives()); }
		(rule__Switch__Alternatives)
		{ after(grammarAccess.getSwitchAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfElseSwitch
entryRuleIfElseSwitch
:
{ before(grammarAccess.getIfElseSwitchRule()); }
	 ruleIfElseSwitch
{ after(grammarAccess.getIfElseSwitchRule()); } 
	 EOF 
;

// Rule IfElseSwitch
ruleIfElseSwitch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfElseSwitchAccess().getGroup()); }
		(rule__IfElseSwitch__Group__0)
		{ after(grammarAccess.getIfElseSwitchAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfElseCase
entryRuleIfElseCase
:
{ before(grammarAccess.getIfElseCaseRule()); }
	 ruleIfElseCase
{ after(grammarAccess.getIfElseCaseRule()); } 
	 EOF 
;

// Rule IfElseCase
ruleIfElseCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfElseCaseAccess().getGroup()); }
		(rule__IfElseCase__Group__0)
		{ after(grammarAccess.getIfElseCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefault
entryRuleDefault
:
{ before(grammarAccess.getDefaultRule()); }
	 ruleDefault
{ after(grammarAccess.getDefaultRule()); } 
	 EOF 
;

// Rule Default
ruleDefault 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefaultAccess().getGroup()); }
		(rule__Default__Group__0)
		{ after(grammarAccess.getDefaultAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchCase
entryRuleSwitchCase
:
{ before(grammarAccess.getSwitchCaseRule()); }
	 ruleSwitchCase
{ after(grammarAccess.getSwitchCaseRule()); } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchCaseAccess().getGroup()); }
		(rule__SwitchCase__Group__0)
		{ after(grammarAccess.getSwitchCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCase
entryRuleCase
:
{ before(grammarAccess.getCaseRule()); }
	 ruleCase
{ after(grammarAccess.getCaseRule()); } 
	 EOF 
;

// Rule Case
ruleCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseAccess().getAlternatives()); }
		(rule__Case__Alternatives)
		{ after(grammarAccess.getCaseAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseWithCast
entryRuleCaseWithCast
:
{ before(grammarAccess.getCaseWithCastRule()); }
	 ruleCaseWithCast
{ after(grammarAccess.getCaseWithCastRule()); } 
	 EOF 
;

// Rule CaseWithCast
ruleCaseWithCast 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseWithCastAccess().getGroup()); }
		(rule__CaseWithCast__Group__0)
		{ after(grammarAccess.getCaseWithCastAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseWithoutCast
entryRuleCaseWithoutCast
:
{ before(grammarAccess.getCaseWithoutCastRule()); }
	 ruleCaseWithoutCast
{ after(grammarAccess.getCaseWithoutCastRule()); } 
	 EOF 
;

// Rule CaseWithoutCast
ruleCaseWithoutCast 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseWithoutCastAccess().getGroup()); }
		(rule__CaseWithoutCast__Group__0)
		{ after(grammarAccess.getCaseWithoutCastAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseBody
entryRuleCaseBody
:
{ before(grammarAccess.getCaseBodyRule()); }
	 ruleCaseBody
{ after(grammarAccess.getCaseBodyRule()); } 
	 EOF 
;

// Rule CaseBody
ruleCaseBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseBodyAccess().getAlternatives()); }
		(rule__CaseBody__Alternatives)
		{ after(grammarAccess.getCaseBodyAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCollection
entryRuleCollection
:
{ before(grammarAccess.getCollectionRule()); }
	 ruleCollection
{ after(grammarAccess.getCollectionRule()); } 
	 EOF 
;

// Rule Collection
ruleCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCollectionAccess().getAlternatives()); }
		(rule__Collection__Alternatives)
		{ after(grammarAccess.getCollectionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListAssignment
entryRuleListAssignment
:
{ before(grammarAccess.getListAssignmentRule()); }
	 ruleListAssignment
{ after(grammarAccess.getListAssignmentRule()); } 
	 EOF 
;

// Rule ListAssignment
ruleListAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAssignmentAccess().getAlternatives()); }
		(rule__ListAssignment__Alternatives)
		{ after(grammarAccess.getListAssignmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListAdHoc
entryRuleListAdHoc
:
{ before(grammarAccess.getListAdHocRule()); }
	 ruleListAdHoc
{ after(grammarAccess.getListAdHocRule()); } 
	 EOF 
;

// Rule ListAdHoc
ruleListAdHoc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAdHocAccess().getGroup()); }
		(rule__ListAdHoc__Group__0)
		{ after(grammarAccess.getListAdHocAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMap
entryRuleMap
:
{ before(grammarAccess.getMapRule()); }
	 ruleMap
{ after(grammarAccess.getMapRule()); } 
	 EOF 
;

// Rule Map
ruleMap 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapAccess().getGroup()); }
		(rule__Map__Group__0)
		{ after(grammarAccess.getMapAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapAssignment
entryRuleMapAssignment
:
{ before(grammarAccess.getMapAssignmentRule()); }
	 ruleMapAssignment
{ after(grammarAccess.getMapAssignmentRule()); } 
	 EOF 
;

// Rule MapAssignment
ruleMapAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapAssignmentAccess().getAlternatives()); }
		(rule__MapAssignment__Alternatives)
		{ after(grammarAccess.getMapAssignmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapAdHoc
entryRuleMapAdHoc
:
{ before(grammarAccess.getMapAdHocRule()); }
	 ruleMapAdHoc
{ after(grammarAccess.getMapAdHocRule()); } 
	 EOF 
;

// Rule MapAdHoc
ruleMapAdHoc 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapAdHocAccess().getGroup()); }
		(rule__MapAdHoc__Group__0)
		{ after(grammarAccess.getMapAdHocAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMapTupel
entryRuleMapTupel
:
{ before(grammarAccess.getMapTupelRule()); }
	 ruleMapTupel
{ after(grammarAccess.getMapTupelRule()); } 
	 EOF 
;

// Rule MapTupel
ruleMapTupel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMapTupelAccess().getGroup()); }
		(rule__MapTupel__Group__0)
		{ after(grammarAccess.getMapTupelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForRange
entryRuleForRange
:
{ before(grammarAccess.getForRangeRule()); }
	 ruleForRange
{ after(grammarAccess.getForRangeRule()); } 
	 EOF 
;

// Rule ForRange
ruleForRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForRangeAccess().getGroup()); }
		(rule__ForRange__Group__0)
		{ after(grammarAccess.getForRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression
:
{ before(grammarAccess.getArithmeticExpressionRule()); }
	 ruleArithmeticExpression
{ after(grammarAccess.getArithmeticExpressionRule()); } 
	 EOF 
;

// Rule ArithmeticExpression
ruleArithmeticExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArithmeticExpressionAccess().getTertiaryExpressionParserRuleCall()); }
		ruleTertiaryExpression
		{ after(grammarAccess.getArithmeticExpressionAccess().getTertiaryExpressionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTertiaryExpression
entryRuleTertiaryExpression
:
{ before(grammarAccess.getTertiaryExpressionRule()); }
	 ruleTertiaryExpression
{ after(grammarAccess.getTertiaryExpressionRule()); } 
	 EOF 
;

// Rule TertiaryExpression
ruleTertiaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTertiaryExpressionAccess().getGroup()); }
		(rule__TertiaryExpression__Group__0)
		{ after(grammarAccess.getTertiaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSecondaryExpression
entryRuleSecondaryExpression
:
{ before(grammarAccess.getSecondaryExpressionRule()); }
	 ruleSecondaryExpression
{ after(grammarAccess.getSecondaryExpressionRule()); } 
	 EOF 
;

// Rule SecondaryExpression
ruleSecondaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSecondaryExpressionAccess().getGroup()); }
		(rule__SecondaryExpression__Group__0)
		{ after(grammarAccess.getSecondaryExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpr
entryRulePrimaryExpr
:
{ before(grammarAccess.getPrimaryExprRule()); }
	 rulePrimaryExpr
{ after(grammarAccess.getPrimaryExprRule()); } 
	 EOF 
;

// Rule PrimaryExpr
rulePrimaryExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getGroup()); }
		(rule__PrimaryExpr__Group__0)
		{ after(grammarAccess.getPrimaryExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationExpression
entryRuleRelationExpression
:
{ before(grammarAccess.getRelationExpressionRule()); }
	 ruleRelationExpression
{ after(grammarAccess.getRelationExpressionRule()); } 
	 EOF 
;

// Rule RelationExpression
ruleRelationExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getGroup()); }
		(rule__RelationExpression__Group__0)
		{ after(grammarAccess.getRelationExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBaseExpr
entryRuleBaseExpr
:
{ before(grammarAccess.getBaseExprRule()); }
	 ruleBaseExpr
{ after(grammarAccess.getBaseExprRule()); } 
	 EOF 
;

// Rule BaseExpr
ruleBaseExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBaseExprAccess().getAlternatives()); }
		(rule__BaseExpr__Alternatives)
		{ after(grammarAccess.getBaseExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValAssignment()); }
		(rule__BooleanLiteral__ValAssignment)
		{ after(grammarAccess.getBooleanLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValAssignment()); }
		(rule__StringLiteral__ValAssignment)
		{ after(grammarAccess.getStringLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValAssignment()); }
		(rule__NumberLiteral__ValAssignment)
		{ after(grammarAccess.getNumberLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MathFunc
ruleMathFunc
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathFuncAccess().getAlternatives()); }
		(rule__MathFunc__Alternatives)
		{ after(grammarAccess.getMathFuncAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PrimitiveType
rulePrimitiveType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
		(rule__PrimitiveType__Alternatives)
		{ after(grammarAccess.getPrimitiveTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationalOp
ruleRelationalOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
		(rule__RelationalOp__Alternatives)
		{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TertiaryOp
ruleTertiaryOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTertiaryOpAccess().getAlternatives()); }
		(rule__TertiaryOp__Alternatives)
		{ after(grammarAccess.getTertiaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SecondaryOp
ruleSecondaryOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSecondaryOpAccess().getAlternatives()); }
		(rule__SecondaryOp__Alternatives)
		{ after(grammarAccess.getSecondaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule PrimaryOp
rulePrimaryOp
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryOpAccess().getAlternatives()); }
		(rule__PrimaryOp__Alternatives)
		{ after(grammarAccess.getPrimaryOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getPatternsAssignment_2_0()); }
		(rule__MofgenFile__PatternsAssignment_2_0)
		{ after(grammarAccess.getMofgenFileAccess().getPatternsAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_2_1()); }
		(rule__MofgenFile__GeneratorsAssignment_2_1)
		{ after(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getCreatedByAssignment_2_0()); }
		(rule__Node__CreatedByAssignment_2_0)
		{ after(grammarAccess.getNodeAccess().getCreatedByAssignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeAccess().getGroup_2_1()); }
		(rule__Node__Group_2_1__0)
		{ after(grammarAccess.getNodeAccess().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignmentOrControlFlow__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getPatternNodeReferenceParserRuleCall_0()); }
		rulePatternNodeReference
		{ after(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getPatternNodeReferenceParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getAssignmentParserRuleCall_1()); }
		ruleAssignment
		{ after(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getAssignmentParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getSwitchParserRuleCall_2()); }
		ruleSwitch
		{ after(grammarAccess.getNodeReferenceOrAssignmentOrControlFlowAccess().getSwitchParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getPrimitiveParameterParserRuleCall_0()); }
		rulePrimitiveParameter
		{ after(grammarAccess.getParameterAccess().getPrimitiveParameterParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getParameterAccess().getParameterNodeParserRuleCall_1()); }
		ruleParameterNode
		{ after(grammarAccess.getParameterAccess().getParameterNodeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratorExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorExpressionAccess().getForStatementParserRuleCall_0()); }
		ruleForStatement
		{ after(grammarAccess.getGeneratorExpressionAccess().getForStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorExpressionAccess().getSwitchParserRuleCall_1()); }
		ruleSwitch
		{ after(grammarAccess.getGeneratorExpressionAccess().getSwitchParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorExpressionAccess().getCollectionParserRuleCall_2()); }
		ruleCollection
		{ after(grammarAccess.getGeneratorExpressionAccess().getCollectionParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorExpressionAccess().getPatternCallParserRuleCall_3()); }
		rulePatternCall
		{ after(grammarAccess.getGeneratorExpressionAccess().getPatternCallParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorExpressionAccess().getPatternVariableParserRuleCall_4()); }
		rulePatternVariable
		{ after(grammarAccess.getGeneratorExpressionAccess().getPatternVariableParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForHead__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForHeadAccess().getGeneralForHeadParserRuleCall_0()); }
		ruleGeneralForHead
		{ after(grammarAccess.getForHeadAccess().getGeneralForHeadParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getForHeadAccess().getForEachHeadParserRuleCall_1()); }
		ruleForEachHead
		{ after(grammarAccess.getForHeadAccess().getForEachHeadParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getForStatementParserRuleCall_0()); }
		ruleForStatement
		{ after(grammarAccess.getSwitchExpressionAccess().getForStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getCollectionParserRuleCall_1()); }
		ruleCollection
		{ after(grammarAccess.getSwitchExpressionAccess().getCollectionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getPatternCallParserRuleCall_2()); }
		rulePatternCall
		{ after(grammarAccess.getSwitchExpressionAccess().getPatternCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getPatternVariableParserRuleCall_3()); }
		rulePatternVariable
		{ after(grammarAccess.getSwitchExpressionAccess().getPatternVariableParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchExpressionAccess().getNodeReferenceOrAssignmentOrControlFlowParserRuleCall_4()); }
		ruleNodeReferenceOrAssignmentOrControlFlow
		{ after(grammarAccess.getSwitchExpressionAccess().getNodeReferenceOrAssignmentOrControlFlowParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Switch__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchAccess().getIfElseSwitchParserRuleCall_0()); }
		ruleIfElseSwitch
		{ after(grammarAccess.getSwitchAccess().getIfElseSwitchParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getSwitchAccess().getSwitchCaseParserRuleCall_1()); }
		ruleSwitchCase
		{ after(grammarAccess.getSwitchAccess().getSwitchCaseParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Case__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseAccess().getCaseWithCastParserRuleCall_0()); }
		ruleCaseWithCast
		{ after(grammarAccess.getCaseAccess().getCaseWithCastParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCaseAccess().getCaseWithoutCastParserRuleCall_1()); }
		ruleCaseWithoutCast
		{ after(grammarAccess.getCaseAccess().getCaseWithoutCastParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseBodyAccess().getGroup_0()); }
		(rule__CaseBody__Group_0__0)
		{ after(grammarAccess.getCaseBodyAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getCaseBodyAccess().getGroup_1()); }
		(rule__CaseBody__Group_1__0)
		{ after(grammarAccess.getCaseBodyAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Collection__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCollectionAccess().getListParserRuleCall_0()); }
		ruleList
		{ after(grammarAccess.getCollectionAccess().getListParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getCollectionAccess().getMapParserRuleCall_1()); }
		ruleMap
		{ after(grammarAccess.getCollectionAccess().getMapParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAssignment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAssignmentAccess().getListAdHocParserRuleCall_0()); }
		ruleListAdHoc
		{ after(grammarAccess.getListAssignmentAccess().getListAdHocParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getListAssignmentAccess().getRefOrCallParserRuleCall_1()); }
		ruleRefOrCall
		{ after(grammarAccess.getListAssignmentAccess().getRefOrCallParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAssignment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAssignmentAccess().getMapAdHocParserRuleCall_0()); }
		ruleMapAdHoc
		{ after(grammarAccess.getMapAssignmentAccess().getMapAdHocParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMapAssignmentAccess().getRefOrCallParserRuleCall_1()); }
		ruleRefOrCall
		{ after(grammarAccess.getMapAssignmentAccess().getRefOrCallParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseExprAccess().getGroup_0()); }
		(rule__BaseExpr__Group_0__0)
		{ after(grammarAccess.getBaseExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExprAccess().getGroup_1()); }
		(rule__BaseExpr__Group_1__0)
		{ after(grammarAccess.getBaseExprAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExprAccess().getGroup_2()); }
		(rule__BaseExpr__Group_2__0)
		{ after(grammarAccess.getBaseExprAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExprAccess().getLiteralParserRuleCall_3()); }
		ruleLiteral
		{ after(grammarAccess.getBaseExprAccess().getLiteralParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBaseExprAccess().getRefOrCallParserRuleCall_4()); }
		ruleRefOrCall
		{ after(grammarAccess.getBaseExprAccess().getRefOrCallParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
		ruleBooleanLiteral
		{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
		ruleStringLiteral
		{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2()); }
		ruleNumberLiteral
		{ after(grammarAccess.getLiteralAccess().getNumberLiteralParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValTRUETerminalRuleCall_0_0()); }
		RULE_TRUE
		{ after(grammarAccess.getBooleanLiteralAccess().getValTRUETerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValFALSETerminalRuleCall_0_1()); }
		RULE_FALSE
		{ after(grammarAccess.getBooleanLiteralAccess().getValFALSETerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MathFunc__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathFuncAccess().getSQRTEnumLiteralDeclaration_0()); }
		('sqrt')
		{ after(grammarAccess.getMathFuncAccess().getSQRTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathFuncAccess().getABSEnumLiteralDeclaration_1()); }
		('abs')
		{ after(grammarAccess.getMathFuncAccess().getABSEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0()); }
		('int')
		{ after(grammarAccess.getPrimitiveTypeAccess().getINTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1()); }
		('char')
		{ after(grammarAccess.getPrimitiveTypeAccess().getCHAREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2()); }
		('double')
		{ after(grammarAccess.getPrimitiveTypeAccess().getDOUBLEEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimitiveTypeAccess().getSTRINGEnumLiteralDeclaration_3()); }
		('String')
		{ after(grammarAccess.getPrimitiveTypeAccess().getSTRINGEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOpAccess().getGREATEREnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getRelationalOpAccess().getGREATEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); }
		('>=')
		{ after(grammarAccess.getRelationalOpAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getEQUALEnumLiteralDeclaration_2()); }
		('==')
		{ after(grammarAccess.getRelationalOpAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getUNEQUALEnumLiteralDeclaration_3()); }
		('!=')
		{ after(grammarAccess.getRelationalOpAccess().getUNEQUALEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getRelationalOpAccess().getLESS_OR_EQUALEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLESSEnumLiteralDeclaration_5()); }
		('<')
		{ after(grammarAccess.getRelationalOpAccess().getLESSEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTertiaryOpAccess().getPLUSEnumLiteralDeclaration_0()); }
		('+')
		{ after(grammarAccess.getTertiaryOpAccess().getPLUSEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTertiaryOpAccess().getMINUSEnumLiteralDeclaration_1()); }
		('-')
		{ after(grammarAccess.getTertiaryOpAccess().getMINUSEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTertiaryOpAccess().getOREnumLiteralDeclaration_2()); }
		('||')
		{ after(grammarAccess.getTertiaryOpAccess().getOREnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSecondaryOpAccess().getMODEnumLiteralDeclaration_0()); }
		('%')
		{ after(grammarAccess.getSecondaryOpAccess().getMODEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSecondaryOpAccess().getXOREnumLiteralDeclaration_1()); }
		('^')
		{ after(grammarAccess.getSecondaryOpAccess().getXOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryOpAccess().getMULEnumLiteralDeclaration_0()); }
		('*')
		{ after(grammarAccess.getPrimaryOpAccess().getMULEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryOpAccess().getDIVEnumLiteralDeclaration_1()); }
		('/')
		{ after(grammarAccess.getPrimaryOpAccess().getDIVEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryOpAccess().getANDEnumLiteralDeclaration_2()); }
		('&&')
		{ after(grammarAccess.getPrimaryOpAccess().getANDEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__0__Impl
	rule__MofgenFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getImportsAssignment_0()); }
	(rule__MofgenFile__ImportsAssignment_0)*
	{ after(grammarAccess.getMofgenFileAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__1__Impl
	rule__MofgenFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getConfigAssignment_1()); }
	(rule__MofgenFile__ConfigAssignment_1)
	{ after(grammarAccess.getMofgenFileAccess().getConfigAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getAlternatives_2()); }
	(rule__MofgenFile__Alternatives_2)*
	{ after(grammarAccess.getMofgenFileAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getNameAssignment_1()); }
	(rule__Import__NameAssignment_1)
	{ after(grammarAccess.getImportAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getImportAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAliasAssignment_3()); }
	(rule__Import__AliasAssignment_3)
	{ after(grammarAccess.getImportAccess().getAliasAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Config__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__0__Impl
	rule__Config__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getConfigAction_0()); }
	()
	{ after(grammarAccess.getConfigAccess().getConfigAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__1__Impl
	rule__Config__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getConfigKeyword_1()); }
	'config'
	{ after(grammarAccess.getConfigAccess().getConfigKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__2__Impl
	rule__Config__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getConfigAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__3__Impl
	rule__Config__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getConfigAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__4__Impl
	rule__Config__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getConfigAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__5__Impl
	rule__Config__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getExpressionsAssignment_5()); }
	(rule__Config__ExpressionsAssignment_5)*
	{ after(grammarAccess.getConfigAccess().getExpressionsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Config__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConfigAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getConfigAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
	'pattern'
	{ after(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
	rule__Pattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getNameAssignment_1()); }
	(rule__Pattern__NameAssignment_1)
	{ after(grammarAccess.getPatternAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__2__Impl
	rule__Pattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2()); }
	(rule__Pattern__Group_2__0)
	{ after(grammarAccess.getPatternAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__3__Impl
	rule__Pattern__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__4__Impl
	rule__Pattern__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getUnorderedGroup_4()); }
	(rule__Pattern__UnorderedGroup_4)
	{ after(grammarAccess.getPatternAccess().getUnorderedGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__5__Impl
	rule__Pattern__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getReturnAssignment_6()); }
	(rule__Pattern__ReturnAssignment_6)?
	{ after(grammarAccess.getPatternAccess().getReturnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__0__Impl
	rule__Pattern__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__1__Impl
	rule__Pattern__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2_1()); }
	(rule__Pattern__Group_2_1__0)?
	{ after(grammarAccess.getPatternAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1__0__Impl
	rule__Pattern__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0()); }
	(rule__Pattern__ParametersAssignment_2_1_0)
	{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2_1_1()); }
	(rule__Pattern__Group_2_1_1__0)*
	{ after(grammarAccess.getPatternAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1_1__0__Impl
	rule__Pattern__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0()); }
	','
	{ after(grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1()); }
	(rule__Pattern__ParametersAssignment_2_1_1_1)
	{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__0__Impl
	rule__PatternReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getPatternReturnAction_0()); }
	()
	{ after(grammarAccess.getPatternReturnAccess().getPatternReturnAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__1__Impl
	rule__PatternReturn__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getReturnKeyword_1()); }
	'return'
	{ after(grammarAccess.getPatternReturnAccess().getReturnKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__2__Impl
	rule__PatternReturn__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getThisKeyword_2()); }
	'this'
	{ after(grammarAccess.getPatternReturnAccess().getThisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getGroup_3()); }
	(rule__PatternReturn__Group_3__0)?
	{ after(grammarAccess.getPatternReturnAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternReturn__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group_3__0__Impl
	rule__PatternReturn__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getFullStopKeyword_3_0()); }
	'.'
	{ after(grammarAccess.getPatternReturnAccess().getFullStopKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getReturnValueAssignment_3_1()); }
	(rule__PatternReturn__ReturnValueAssignment_3_1)
	{ after(grammarAccess.getPatternReturnAccess().getReturnValueAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParamManipulation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamManipulation__Group__0__Impl
	rule__ParamManipulation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamManipulation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamManipulationAccess().getParamAssignment_0()); }
	(rule__ParamManipulation__ParamAssignment_0)
	{ after(grammarAccess.getParamManipulationAccess().getParamAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamManipulation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParamManipulation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamManipulation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParamManipulationAccess().getContentAssignment_1()); }
	(rule__ParamManipulation__ContentAssignment_1)
	{ after(grammarAccess.getParamManipulationAccess().getContentAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getTypeAssignment_0()); }
	(rule__Node__TypeAssignment_0)
	{ after(grammarAccess.getNodeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__1__Impl
	rule__Node__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNameAssignment_1()); }
	(rule__Node__NameAssignment_1)
	{ after(grammarAccess.getNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getAlternatives_2()); }
	(rule__Node__Alternatives_2)?
	{ after(grammarAccess.getNodeAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group_2_1__0__Impl
	rule__Node__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getASSIGNMENT_OPTerminalRuleCall_2_1_0()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getNodeAccess().getASSIGNMENT_OPTerminalRuleCall_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getCreatedByAssignment_2_1_1()); }
	(rule__Node__CreatedByAssignment_2_1_1)
	{ after(grammarAccess.getNodeAccess().getCreatedByAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeContent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeContent__Group__0__Impl
	rule__NodeContent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeContentAccess().getNodeContentAction_0()); }
	()
	{ after(grammarAccess.getNodeContentAccess().getNodeContentAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeContent__Group__1__Impl
	rule__NodeContent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeContentAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getNodeContentAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeContent__Group__2__Impl
	rule__NodeContent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeContentAccess().getRefsAssignsAssignment_2()); }
	(rule__NodeContent__RefsAssignsAssignment_2)*
	{ after(grammarAccess.getNodeContentAccess().getRefsAssignsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeContent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeContentAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getNodeContentAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__0__Impl
	rule__PatternCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getCalledAssignment_0()); }
	(rule__PatternCall__CalledAssignment_0)
	{ after(grammarAccess.getPatternCallAccess().getCalledAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__1__Impl
	rule__PatternCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__2__Impl
	rule__PatternCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getGroup_2()); }
	(rule__PatternCall__Group_2__0)?
	{ after(grammarAccess.getPatternCallAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternCall__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_2__0__Impl
	rule__PatternCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getParamsAssignment_2_0()); }
	(rule__PatternCall__ParamsAssignment_2_0)
	{ after(grammarAccess.getPatternCallAccess().getParamsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getGroup_2_1()); }
	(rule__PatternCall__Group_2_1__0)*
	{ after(grammarAccess.getPatternCallAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternCall__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_2_1__0__Impl
	rule__PatternCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getCommaKeyword_2_1_0()); }
	','
	{ after(grammarAccess.getPatternCallAccess().getCommaKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getParamsAssignment_2_1_1()); }
	(rule__PatternCall__ParamsAssignment_2_1_1)
	{ after(grammarAccess.getPatternCallAccess().getParamsAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternNodeReference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__0__Impl
	rule__PatternNodeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_0()); }
	(rule__PatternNodeReference__TypeAssignment_0)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__1__Impl
	rule__PatternNodeReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
	'->'
	{ after(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_2()); }
	(rule__PatternNodeReference__TargetAssignment_2)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
	(rule__Assignment__TargetAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getAssignmentAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimitiveParameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveParameter__Group__0__Impl
	rule__PrimitiveParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveParameterAccess().getTypeAssignment_0()); }
	(rule__PrimitiveParameter__TypeAssignment_0)
	{ after(grammarAccess.getPrimitiveParameterAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimitiveParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimitiveParameterAccess().getNameAssignment_1()); }
	(rule__PrimitiveParameter__NameAssignment_1)
	{ after(grammarAccess.getPrimitiveParameterAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterNode__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterNode__Group__0__Impl
	rule__ParameterNode__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterNode__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterNodeAccess().getTypeAssignment_0()); }
	(rule__ParameterNode__TypeAssignment_0)
	{ after(grammarAccess.getParameterNodeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterNode__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterNode__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterNode__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterNodeAccess().getNameAssignment_1()); }
	(rule__ParameterNode__NameAssignment_1)
	{ after(grammarAccess.getParameterNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefOrCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group__0__Impl
	rule__RefOrCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getRefAssignment_0()); }
	(rule__RefOrCall__RefAssignment_0)
	{ after(grammarAccess.getRefOrCallAccess().getRefAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getGroup_1()); }
	(rule__RefOrCall__Group_1__0)*
	{ after(grammarAccess.getRefOrCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefOrCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1__0__Impl
	rule__RefOrCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getRefOrCallTargetAction_1_0()); }
	()
	{ after(grammarAccess.getRefOrCallAccess().getRefOrCallTargetAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1__1__Impl
	rule__RefOrCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getFullStopKeyword_1_1()); }
	'.'
	{ after(grammarAccess.getRefOrCallAccess().getFullStopKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1__2__Impl
	rule__RefOrCall__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getRefAssignment_1_2()); }
	(rule__RefOrCall__RefAssignment_1_2)
	{ after(grammarAccess.getRefOrCallAccess().getRefAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getGroup_1_3()); }
	(rule__RefOrCall__Group_1_3__0)?
	{ after(grammarAccess.getRefOrCallAccess().getGroup_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefOrCall__Group_1_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1_3__0__Impl
	rule__RefOrCall__Group_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getLeftParenthesisKeyword_1_3_0()); }
	'('
	{ after(grammarAccess.getRefOrCallAccess().getLeftParenthesisKeyword_1_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1_3__1__Impl
	rule__RefOrCall__Group_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getParamsAssignment_1_3_1()); }
	(rule__RefOrCall__ParamsAssignment_1_3_1)?
	{ after(grammarAccess.getRefOrCallAccess().getParamsAssignment_1_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefOrCall__Group_1_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__Group_1_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefOrCallAccess().getRightParenthesisKeyword_1_3_2()); }
	')'
	{ after(grammarAccess.getRefOrCallAccess().getRightParenthesisKeyword_1_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefParams__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefParams__Group__0__Impl
	rule__RefParams__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefParamsAccess().getParamsAssignment_0()); }
	(rule__RefParams__ParamsAssignment_0)
	{ after(grammarAccess.getRefParamsAccess().getParamsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefParams__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefParamsAccess().getGroup_1()); }
	(rule__RefParams__Group_1__0)*
	{ after(grammarAccess.getRefParamsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RefParams__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefParams__Group_1__0__Impl
	rule__RefParams__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefParamsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getRefParamsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RefParams__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRefParamsAccess().getParamsAssignment_1_1()); }
	(rule__RefParams__ParamsAssignment_1_1)
	{ after(grammarAccess.getRefParamsAccess().getParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__0__Impl
	rule__Generator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getGeneratorAction_0()); }
	()
	{ after(grammarAccess.getGeneratorAccess().getGeneratorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__1__Impl
	rule__Generator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getGenKeyword_1()); }
	'gen'
	{ after(grammarAccess.getGeneratorAccess().getGenKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__2__Impl
	rule__Generator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__3__Impl
	rule__Generator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getParamsAssignment_3()); }
	(rule__Generator__ParamsAssignment_3)*
	{ after(grammarAccess.getGeneratorAccess().getParamsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__4__Impl
	rule__Generator__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__5__Impl
	rule__Generator__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__6__Impl
	rule__Generator__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getCommandsAssignment_6()); }
	(rule__Generator__CommandsAssignment_6)*
	{ after(grammarAccess.getGeneratorAccess().getCommandsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternVariable__Group__0__Impl
	rule__PatternVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternVariableAccess().getTypeAssignment_0()); }
	(rule__PatternVariable__TypeAssignment_0)
	{ after(grammarAccess.getPatternVariableAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternVariable__Group__1__Impl
	rule__PatternVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternVariableAccess().getNameAssignment_1()); }
	(rule__PatternVariable__NameAssignment_1)
	{ after(grammarAccess.getPatternVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternVariable__Group__2__Impl
	rule__PatternVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternVariableAccess().getASSIGNMENT_OPTerminalRuleCall_2()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getPatternVariableAccess().getASSIGNMENT_OPTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternVariable__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternVariableAccess().getPatternCallAssignment_3()); }
	(rule__PatternVariable__PatternCallAssignment_3)
	{ after(grammarAccess.getPatternVariableAccess().getPatternCallAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForStatementAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getHeadAssignment_1()); }
	(rule__ForStatement__HeadAssignment_1)
	{ after(grammarAccess.getForStatementAccess().getHeadAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getForStatementAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getBodyAssignment_3()); }
	(rule__ForStatement__BodyAssignment_3)
	{ after(grammarAccess.getForStatementAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getForStatementAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GeneralForHead__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GeneralForHead__Group__0__Impl
	rule__GeneralForHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralForHeadAccess().getIteratorVarAssignment_0()); }
	(rule__GeneralForHead__IteratorVarAssignment_0)
	{ after(grammarAccess.getGeneralForHeadAccess().getIteratorVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GeneralForHead__Group__1__Impl
	rule__GeneralForHead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralForHeadAccess().getInKeyword_1()); }
	'in'
	{ after(grammarAccess.getGeneralForHeadAccess().getInKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GeneralForHead__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneralForHeadAccess().getRangeAssignment_2()); }
	(rule__GeneralForHead__RangeAssignment_2)
	{ after(grammarAccess.getGeneralForHeadAccess().getRangeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForEachHead__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEachHead__Group__0__Impl
	rule__ForEachHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachHeadAccess().getSrcAssignment_0()); }
	(rule__ForEachHead__SrcAssignment_0)
	{ after(grammarAccess.getForEachHeadAccess().getSrcAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEachHead__Group__1__Impl
	rule__ForEachHead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachHeadAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getForEachHeadAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEachHead__Group__2__Impl
	rule__ForEachHead__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachHeadAccess().getErefAssignment_2()); }
	(rule__ForEachHead__ErefAssignment_2)
	{ after(grammarAccess.getForEachHeadAccess().getErefAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEachHead__Group__3__Impl
	rule__ForEachHead__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachHeadAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
	'->'
	{ after(grammarAccess.getForEachHeadAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForEachHead__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForEachHeadAccess().getIteratorVarAssignment_4()); }
	(rule__ForEachHead__IteratorVarAssignment_4)
	{ after(grammarAccess.getForEachHeadAccess().getIteratorVarAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForBody__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForBody__Group__0__Impl
	rule__ForBody__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForBody__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForBodyAccess().getForBodyAction_0()); }
	()
	{ after(grammarAccess.getForBodyAccess().getForBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForBody__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForBody__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForBody__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForBodyAccess().getCommandsAssignment_1()); }
	(rule__ForBody__CommandsAssignment_1)*
	{ after(grammarAccess.getForBodyAccess().getCommandsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseSwitch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseSwitch__Group__0__Impl
	rule__IfElseSwitch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseSwitchAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getIfElseSwitchAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseSwitch__Group__1__Impl
	rule__IfElseSwitch__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseSwitchAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getIfElseSwitchAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseSwitch__Group__2__Impl
	rule__IfElseSwitch__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getIfElseSwitchAccess().getCasesAssignment_2()); }
		(rule__IfElseSwitch__CasesAssignment_2)
		{ after(grammarAccess.getIfElseSwitchAccess().getCasesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getIfElseSwitchAccess().getCasesAssignment_2()); }
		(rule__IfElseSwitch__CasesAssignment_2)*
		{ after(grammarAccess.getIfElseSwitchAccess().getCasesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseSwitch__Group__3__Impl
	rule__IfElseSwitch__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseSwitchAccess().getDefaultAssignment_3()); }
	(rule__IfElseSwitch__DefaultAssignment_3)?
	{ after(grammarAccess.getIfElseSwitchAccess().getDefaultAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseSwitch__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseSwitchAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getIfElseSwitchAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseCase__Group__0__Impl
	rule__IfElseCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseCaseAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getIfElseCaseAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseCase__Group__1__Impl
	rule__IfElseCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseCaseAccess().getValAssignment_1()); }
	(rule__IfElseCase__ValAssignment_1)
	{ after(grammarAccess.getIfElseCaseAccess().getValAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseCase__Group__2__Impl
	rule__IfElseCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseCaseAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getIfElseCaseAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfElseCase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfElseCaseAccess().getBodyAssignment_3()); }
	(rule__IfElseCase__BodyAssignment_3)
	{ after(grammarAccess.getIfElseCaseAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Default__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__0__Impl
	rule__Default__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getDefaultKeyword_0()); }
	'default'
	{ after(grammarAccess.getDefaultAccess().getDefaultKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__1__Impl
	rule__Default__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getDefaultAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Default__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Default__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefaultAccess().getCaseBodyParserRuleCall_2()); }
	ruleCaseBody
	{ after(grammarAccess.getDefaultAccess().getCaseBodyParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__0__Impl
	rule__SwitchCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getSwitchCaseAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__1__Impl
	rule__SwitchCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSwitchCaseAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__2__Impl
	rule__SwitchCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getAttributeAssignment_2()); }
	(rule__SwitchCase__AttributeAssignment_2)
	{ after(grammarAccess.getSwitchCaseAccess().getAttributeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__3__Impl
	rule__SwitchCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSwitchCaseAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__4__Impl
	rule__SwitchCase__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getSwitchCaseAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__5__Impl
	rule__SwitchCase__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSwitchCaseAccess().getCasesAssignment_5()); }
		(rule__SwitchCase__CasesAssignment_5)
		{ after(grammarAccess.getSwitchCaseAccess().getCasesAssignment_5()); }
	)
	(
		{ before(grammarAccess.getSwitchCaseAccess().getCasesAssignment_5()); }
		(rule__SwitchCase__CasesAssignment_5)*
		{ after(grammarAccess.getSwitchCaseAccess().getCasesAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__6__Impl
	rule__SwitchCase__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getDefaultAssignment_6()); }
	(rule__SwitchCase__DefaultAssignment_6)?
	{ after(grammarAccess.getSwitchCaseAccess().getDefaultAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getSwitchCaseAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseWithCast__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group__0__Impl
	rule__CaseWithCast__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getCaseWithCastAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group__1__Impl
	rule__CaseWithCast__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getNodeAssignment_1()); }
	(rule__CaseWithCast__NodeAssignment_1)
	{ after(grammarAccess.getCaseWithCastAccess().getNodeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group__2__Impl
	rule__CaseWithCast__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getGroup_2()); }
	(rule__CaseWithCast__Group_2__0)?
	{ after(grammarAccess.getCaseWithCastAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group__3__Impl
	rule__CaseWithCast__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getCaseWithCastAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getBodyAssignment_4()); }
	(rule__CaseWithCast__BodyAssignment_4)
	{ after(grammarAccess.getCaseWithCastAccess().getBodyAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseWithCast__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group_2__0__Impl
	rule__CaseWithCast__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getWhenKeyword_2_0()); }
	'when'
	{ after(grammarAccess.getCaseWithCastAccess().getWhenKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithCast__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithCastAccess().getWhenAssignment_2_1()); }
	(rule__CaseWithCast__WhenAssignment_2_1)
	{ after(grammarAccess.getCaseWithCastAccess().getWhenAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseWithoutCast__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithoutCast__Group__0__Impl
	rule__CaseWithoutCast__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithoutCastAccess().getCaseKeyword_0()); }
	'case'
	{ after(grammarAccess.getCaseWithoutCastAccess().getCaseKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithoutCast__Group__1__Impl
	rule__CaseWithoutCast__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithoutCastAccess().getValAssignment_1()); }
	(rule__CaseWithoutCast__ValAssignment_1)
	{ after(grammarAccess.getCaseWithoutCastAccess().getValAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithoutCast__Group__2__Impl
	rule__CaseWithoutCast__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithoutCastAccess().getColonKeyword_2()); }
	':'
	{ after(grammarAccess.getCaseWithoutCastAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseWithoutCast__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseWithoutCastAccess().getBodyAssignment_3()); }
	(rule__CaseWithoutCast__BodyAssignment_3)
	{ after(grammarAccess.getCaseWithoutCastAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseBody__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseBody__Group_0__0__Impl
	rule__CaseBody__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseBodyAccess().getCaseBodyAction_0_0()); }
	()
	{ after(grammarAccess.getCaseBodyAccess().getCaseBodyAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseBody__Group_0__1__Impl
	rule__CaseBody__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseBodyAccess().getLeftCurlyBracketKeyword_0_1()); }
	'{'
	{ after(grammarAccess.getCaseBodyAccess().getLeftCurlyBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseBody__Group_0__2__Impl
	rule__CaseBody__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseBodyAccess().getExpressionsAssignment_0_2()); }
	(rule__CaseBody__ExpressionsAssignment_0_2)*
	{ after(grammarAccess.getCaseBodyAccess().getExpressionsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseBody__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseBodyAccess().getRightCurlyBracketKeyword_0_3()); }
	'}'
	{ after(grammarAccess.getCaseBodyAccess().getRightCurlyBracketKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseBody__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseBody__Group_1__0__Impl
	rule__CaseBody__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseBodyAccess().getExpressionsAssignment_1_0()); }
	(rule__CaseBody__ExpressionsAssignment_1_0)
	{ after(grammarAccess.getCaseBodyAccess().getExpressionsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseBody__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseBodyAccess().getNEWLINETerminalRuleCall_1_1()); }
	RULE_NEWLINE
	{ after(grammarAccess.getCaseBodyAccess().getNEWLINETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getListKeyword_0()); }
	'List'
	{ after(grammarAccess.getListAccess().getListKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
	rule__List__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getNameAssignment_1()); }
	(rule__List__NameAssignment_1)
	{ after(grammarAccess.getListAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_2()); }
	(rule__List__Group_2__0)?
	{ after(grammarAccess.getListAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_2__0__Impl
	rule__List__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getASSIGNMENT_OPTerminalRuleCall_2_0()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getListAccess().getASSIGNMENT_OPTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getCreatedByAssignment_2_1()); }
	(rule__List__CreatedByAssignment_2_1)
	{ after(grammarAccess.getListAccess().getCreatedByAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListAdHoc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListAdHoc__Group__0__Impl
	rule__ListAdHoc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAdHocAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getListAdHocAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListAdHoc__Group__1__Impl
	rule__ListAdHoc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAdHocAccess().getElementsAssignment_1()); }
	(rule__ListAdHoc__ElementsAssignment_1)
	{ after(grammarAccess.getListAdHocAccess().getElementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListAdHoc__Group__2__Impl
	rule__ListAdHoc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAdHocAccess().getGroup_2()); }
	(rule__ListAdHoc__Group_2__0)*
	{ after(grammarAccess.getListAdHocAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListAdHoc__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAdHocAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getListAdHocAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListAdHoc__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListAdHoc__Group_2__0__Impl
	rule__ListAdHoc__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAdHocAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getListAdHocAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListAdHoc__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAdHocAccess().getElementsAssignment_2_1()); }
	(rule__ListAdHoc__ElementsAssignment_2_1)
	{ after(grammarAccess.getListAdHocAccess().getElementsAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__0__Impl
	rule__Map__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getMapKeyword_0()); }
	'Map'
	{ after(grammarAccess.getMapAccess().getMapKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__1__Impl
	rule__Map__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getNameAssignment_1()); }
	(rule__Map__NameAssignment_1)
	{ after(grammarAccess.getMapAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getGroup_2()); }
	(rule__Map__Group_2__0)?
	{ after(grammarAccess.getMapAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Map__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group_2__0__Impl
	rule__Map__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getASSIGNMENT_OPTerminalRuleCall_2_0()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getMapAccess().getASSIGNMENT_OPTerminalRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Map__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAccess().getCreatedByAssignment_2_1()); }
	(rule__Map__CreatedByAssignment_2_1)
	{ after(grammarAccess.getMapAccess().getCreatedByAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapAdHoc__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapAdHoc__Group__0__Impl
	rule__MapAdHoc__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAdHocAccess().getLeftSquareBracketKeyword_0()); }
	'['
	{ after(grammarAccess.getMapAdHocAccess().getLeftSquareBracketKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapAdHoc__Group__1__Impl
	rule__MapAdHoc__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAdHocAccess().getEntriesAssignment_1()); }
	(rule__MapAdHoc__EntriesAssignment_1)
	{ after(grammarAccess.getMapAdHocAccess().getEntriesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapAdHoc__Group__2__Impl
	rule__MapAdHoc__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAdHocAccess().getGroup_2()); }
	(rule__MapAdHoc__Group_2__0)*
	{ after(grammarAccess.getMapAdHocAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapAdHoc__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAdHocAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getMapAdHocAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapAdHoc__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapAdHoc__Group_2__0__Impl
	rule__MapAdHoc__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAdHocAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getMapAdHocAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapAdHoc__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapAdHocAccess().getEntriesAssignment_2_1()); }
	(rule__MapAdHoc__EntriesAssignment_2_1)
	{ after(grammarAccess.getMapAdHocAccess().getEntriesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MapTupel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapTupel__Group__0__Impl
	rule__MapTupel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTupelAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getMapTupelAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapTupel__Group__1__Impl
	rule__MapTupel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTupelAccess().getKeyAssignment_1()); }
	(rule__MapTupel__KeyAssignment_1)
	{ after(grammarAccess.getMapTupelAccess().getKeyAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapTupel__Group__2__Impl
	rule__MapTupel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTupelAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getMapTupelAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapTupel__Group__3__Impl
	rule__MapTupel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTupelAccess().getValueAssignment_3()); }
	(rule__MapTupel__ValueAssignment_3)
	{ after(grammarAccess.getMapTupelAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MapTupel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMapTupelAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getMapTupelAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__0__Impl
	rule__ForRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getStartAssignment_0()); }
	(rule__ForRange__StartAssignment_0)
	{ after(grammarAccess.getForRangeAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__1__Impl
	rule__ForRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getForRangeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getEndAssignment_2()); }
	(rule__ForRange__EndAssignment_2)
	{ after(grammarAccess.getForRangeAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TertiaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TertiaryExpression__Group__0__Impl
	rule__TertiaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTertiaryExpressionAccess().getSecondaryExpressionParserRuleCall_0()); }
	ruleSecondaryExpression
	{ after(grammarAccess.getTertiaryExpressionAccess().getSecondaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TertiaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTertiaryExpressionAccess().getGroup_1()); }
	(rule__TertiaryExpression__Group_1__0)*
	{ after(grammarAccess.getTertiaryExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TertiaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TertiaryExpression__Group_1__0__Impl
	rule__TertiaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTertiaryExpressionAccess().getTertiaryLeftAction_1_0()); }
	()
	{ after(grammarAccess.getTertiaryExpressionAccess().getTertiaryLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TertiaryExpression__Group_1__1__Impl
	rule__TertiaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTertiaryExpressionAccess().getOpAssignment_1_1()); }
	(rule__TertiaryExpression__OpAssignment_1_1)
	{ after(grammarAccess.getTertiaryExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TertiaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTertiaryExpressionAccess().getRightAssignment_1_2()); }
	(rule__TertiaryExpression__RightAssignment_1_2)
	{ after(grammarAccess.getTertiaryExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SecondaryExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SecondaryExpression__Group__0__Impl
	rule__SecondaryExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSecondaryExpressionAccess().getPrimaryExprParserRuleCall_0()); }
	rulePrimaryExpr
	{ after(grammarAccess.getSecondaryExpressionAccess().getPrimaryExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SecondaryExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSecondaryExpressionAccess().getGroup_1()); }
	(rule__SecondaryExpression__Group_1__0)*
	{ after(grammarAccess.getSecondaryExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SecondaryExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SecondaryExpression__Group_1__0__Impl
	rule__SecondaryExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSecondaryExpressionAccess().getSecondaryLeftAction_1_0()); }
	()
	{ after(grammarAccess.getSecondaryExpressionAccess().getSecondaryLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SecondaryExpression__Group_1__1__Impl
	rule__SecondaryExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSecondaryExpressionAccess().getOpAssignment_1_1()); }
	(rule__SecondaryExpression__OpAssignment_1_1)
	{ after(grammarAccess.getSecondaryExpressionAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SecondaryExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSecondaryExpressionAccess().getRightAssignment_1_2()); }
	(rule__SecondaryExpression__RightAssignment_1_2)
	{ after(grammarAccess.getSecondaryExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group__0__Impl
	rule__PrimaryExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getRelationExpressionParserRuleCall_0()); }
	ruleRelationExpression
	{ after(grammarAccess.getPrimaryExprAccess().getRelationExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getGroup_1()); }
	(rule__PrimaryExpr__Group_1__0)*
	{ after(grammarAccess.getPrimaryExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_1__0__Impl
	rule__PrimaryExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getPrimaryLeftAction_1_0()); }
	()
	{ after(grammarAccess.getPrimaryExprAccess().getPrimaryLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_1__1__Impl
	rule__PrimaryExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getOpAssignment_1_1()); }
	(rule__PrimaryExpr__OpAssignment_1_1)
	{ after(grammarAccess.getPrimaryExprAccess().getOpAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExprAccess().getRightAssignment_1_2()); }
	(rule__PrimaryExpr__RightAssignment_1_2)
	{ after(grammarAccess.getPrimaryExprAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group__0__Impl
	rule__RelationExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getBaseExprParserRuleCall_0()); }
	ruleBaseExpr
	{ after(grammarAccess.getRelationExpressionAccess().getBaseExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getGroup_1()); }
	(rule__RelationExpression__Group_1__0)*
	{ after(grammarAccess.getRelationExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group_1__0__Impl
	rule__RelationExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getRelLeftAction_1_0()); }
	()
	{ after(grammarAccess.getRelationExpressionAccess().getRelLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group_1__1__Impl
	rule__RelationExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getRelationAssignment_1_1()); }
	(rule__RelationExpression__RelationAssignment_1_1)
	{ after(grammarAccess.getRelationExpressionAccess().getRelationAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationExpressionAccess().getRightAssignment_1_2()); }
	(rule__RelationExpression__RightAssignment_1_2)
	{ after(grammarAccess.getRelationExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_0__0__Impl
	rule__BaseExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getLeftParenthesisKeyword_0_0()); }
	'('
	{ after(grammarAccess.getBaseExprAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_0__1__Impl
	rule__BaseExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getArithmeticExpressionParserRuleCall_0_1()); }
	ruleArithmeticExpression
	{ after(grammarAccess.getBaseExprAccess().getArithmeticExpressionParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getRightParenthesisKeyword_0_2()); }
	')'
	{ after(grammarAccess.getBaseExprAccess().getRightParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_1__0__Impl
	rule__BaseExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getNegationExpressionAction_1_0()); }
	()
	{ after(grammarAccess.getBaseExprAccess().getNegationExpressionAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_1__1__Impl
	rule__BaseExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getExclamationMarkKeyword_1_1()); }
	'!'
	{ after(grammarAccess.getBaseExprAccess().getExclamationMarkKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getExprAssignment_1_2()); }
	(rule__BaseExpr__ExprAssignment_1_2)
	{ after(grammarAccess.getBaseExprAccess().getExprAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BaseExpr__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_2__0__Impl
	rule__BaseExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getFunctionCallAction_2_0()); }
	()
	{ after(grammarAccess.getBaseExprAccess().getFunctionCallAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_2__1__Impl
	rule__BaseExpr__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getFuncAssignment_2_1()); }
	(rule__BaseExpr__FuncAssignment_2_1)
	{ after(grammarAccess.getBaseExprAccess().getFuncAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_2__2__Impl
	rule__BaseExpr__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getLeftParenthesisKeyword_2_2()); }
	'('
	{ after(grammarAccess.getBaseExprAccess().getLeftParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_2__3__Impl
	rule__BaseExpr__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getExprAssignment_2_3()); }
	(rule__BaseExpr__ExprAssignment_2_3)
	{ after(grammarAccess.getBaseExprAccess().getExprAssignment_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BaseExpr__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__Group_2__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBaseExprAccess().getRightParenthesisKeyword_2_4()); }
	')'
	{ after(grammarAccess.getBaseExprAccess().getRightParenthesisKeyword_2_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__UnorderedGroup_4
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getPatternAccess().getUnorderedGroup_4());
	}
:
	rule__Pattern__UnorderedGroup_4__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getPatternAccess().getUnorderedGroup_4());
	restoreStackSize(stackSize);
}

rule__Pattern__UnorderedGroup_4__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 0);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getPatternAccess().getCollsAssignment_4_0()); }
						(rule__Pattern__CollsAssignment_4_0)
						{ after(grammarAccess.getPatternAccess().getCollsAssignment_4_0()); }
					)
					(
						{ before(grammarAccess.getPatternAccess().getCollsAssignment_4_0()); }
						((rule__Pattern__CollsAssignment_4_0)=>rule__Pattern__CollsAssignment_4_0)*
						{ after(grammarAccess.getPatternAccess().getCollsAssignment_4_0()); }
					)
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 1);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getPatternAccess().getNodesAssignment_4_1()); }
						(rule__Pattern__NodesAssignment_4_1)
						{ after(grammarAccess.getPatternAccess().getNodesAssignment_4_1()); }
					)
					(
						{ before(grammarAccess.getPatternAccess().getNodesAssignment_4_1()); }
						((rule__Pattern__NodesAssignment_4_1)=>rule__Pattern__NodesAssignment_4_1)*
						{ after(grammarAccess.getPatternAccess().getNodesAssignment_4_1()); }
					)
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 2)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 2);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getPatternAccess().getParamManipulationsAssignment_4_2()); }
						(rule__Pattern__ParamManipulationsAssignment_4_2)
						{ after(grammarAccess.getPatternAccess().getParamManipulationsAssignment_4_2()); }
					)
					(
						{ before(grammarAccess.getPatternAccess().getParamManipulationsAssignment_4_2()); }
						((rule__Pattern__ParamManipulationsAssignment_4_2)=>rule__Pattern__ParamManipulationsAssignment_4_2)*
						{ after(grammarAccess.getPatternAccess().getParamManipulationsAssignment_4_2()); }
					)
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 3)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getPatternAccess().getUnorderedGroup_4(), 3);
				}
				{
					selected = true;
				}
				(
					(
						{ before(grammarAccess.getPatternAccess().getSwitchesAssignment_4_3()); }
						(rule__Pattern__SwitchesAssignment_4_3)
						{ after(grammarAccess.getPatternAccess().getSwitchesAssignment_4_3()); }
					)
					(
						{ before(grammarAccess.getPatternAccess().getSwitchesAssignment_4_3()); }
						((rule__Pattern__SwitchesAssignment_4_3)=>rule__Pattern__SwitchesAssignment_4_3)*
						{ after(grammarAccess.getPatternAccess().getSwitchesAssignment_4_3()); }
					)
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getPatternAccess().getUnorderedGroup_4());
	restoreStackSize(stackSize);
}

rule__Pattern__UnorderedGroup_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__UnorderedGroup_4__Impl
	rule__Pattern__UnorderedGroup_4__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__UnorderedGroup_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__UnorderedGroup_4__Impl
	rule__Pattern__UnorderedGroup_4__2?
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__UnorderedGroup_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__UnorderedGroup_4__Impl
	rule__Pattern__UnorderedGroup_4__3?
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__UnorderedGroup_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__UnorderedGroup_4__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__MofgenFile__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__ConfigAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getConfigConfigParserRuleCall_1_0()); }
		ruleConfig
		{ after(grammarAccess.getMofgenFileAccess().getConfigConfigParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__PatternsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_2_0_0()); }
		rulePattern
		{ after(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__GeneratorsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_2_1_0()); }
		ruleGenerator
		{ after(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__AliasAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Config__ExpressionsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConfigAccess().getExpressionsConfigExpressionParserRuleCall_5_0()); }
		ruleConfigExpression
		{ after(grammarAccess.getConfigAccess().getExpressionsConfigExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
		ruleParameter
		{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__CollsAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getCollsCollectionParserRuleCall_4_0_0()); }
		ruleCollection
		{ after(grammarAccess.getPatternAccess().getCollsCollectionParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NodesAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNodesNodeParserRuleCall_4_1_0()); }
		ruleNode
		{ after(grammarAccess.getPatternAccess().getNodesNodeParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParamManipulationsAssignment_4_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParamManipulationsParamManipulationParserRuleCall_4_2_0()); }
		ruleParamManipulation
		{ after(grammarAccess.getPatternAccess().getParamManipulationsParamManipulationParserRuleCall_4_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__SwitchesAssignment_4_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getSwitchesSwitchParserRuleCall_4_3_0()); }
		ruleSwitch
		{ after(grammarAccess.getPatternAccess().getSwitchesSwitchParserRuleCall_4_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ReturnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0()); }
		rulePatternReturn
		{ after(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__ReturnValueAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternReturnAccess().getReturnValueNodeCrossReference_3_1_0()); }
		(
			{ before(grammarAccess.getPatternReturnAccess().getReturnValueNodeIDTerminalRuleCall_3_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternReturnAccess().getReturnValueNodeIDTerminalRuleCall_3_1_0_1()); }
		)
		{ after(grammarAccess.getPatternReturnAccess().getReturnValueNodeCrossReference_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamManipulation__ParamAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamManipulationAccess().getParamParameterNodeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getParamManipulationAccess().getParamParameterNodeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParamManipulationAccess().getParamParameterNodeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getParamManipulationAccess().getParamParameterNodeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParamManipulation__ContentAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParamManipulationAccess().getContentNodeContentParserRuleCall_1_0()); }
		ruleNodeContent
		{ after(grammarAccess.getParamManipulationAccess().getContentNodeContentParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0()); }
		(
			{ before(grammarAccess.getNodeAccess().getTypeEClassIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAccess().getTypeEClassIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__CreatedByAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getCreatedByNodeContentParserRuleCall_2_0_0()); }
		ruleNodeContent
		{ after(grammarAccess.getNodeAccess().getCreatedByNodeContentParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__CreatedByAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getCreatedByPatternCallParserRuleCall_2_1_1_0()); }
		rulePatternCall
		{ after(grammarAccess.getNodeAccess().getCreatedByPatternCallParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeContent__RefsAssignsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeContentAccess().getRefsAssignsNodeReferenceOrAssignmentOrControlFlowParserRuleCall_2_0()); }
		ruleNodeReferenceOrAssignmentOrControlFlow
		{ after(grammarAccess.getNodeContentAccess().getRefsAssignsNodeReferenceOrAssignmentOrControlFlowParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__CalledAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getCalledPatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternCallAccess().getCalledPatternIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternCallAccess().getCalledPatternIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternCallAccess().getCalledPatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__ParamsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getParamsArithmeticExpressionParserRuleCall_2_0_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getPatternCallAccess().getParamsArithmeticExpressionParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__ParamsAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getParamsArithmeticExpressionParserRuleCall_2_1_1_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getPatternCallAccess().getParamsArithmeticExpressionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__TargetAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TargetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getTargetEAttributeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getTargetEAttributeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getTargetEAttributeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getTargetEAttributeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueArithmeticExpressionParserRuleCall_2_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getAssignmentAccess().getValueArithmeticExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveParameterAccess().getTypePrimitiveTypeEnumRuleCall_0_0()); }
		rulePrimitiveType
		{ after(grammarAccess.getPrimitiveParameterAccess().getTypePrimitiveTypeEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimitiveParameter__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimitiveParameterAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPrimitiveParameterAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterNode__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterNodeAccess().getTypeEClassifierCrossReference_0_0()); }
		(
			{ before(grammarAccess.getParameterNodeAccess().getTypeEClassifierIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParameterNodeAccess().getTypeEClassifierIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getParameterNodeAccess().getTypeEClassifierCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterNode__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__RefAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefOrCallAccess().getRefRefTypeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getRefOrCallAccess().getRefRefTypeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRefOrCallAccess().getRefRefTypeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getRefOrCallAccess().getRefRefTypeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__RefAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefOrCallAccess().getRefETypedElementCrossReference_1_2_0()); }
		(
			{ before(grammarAccess.getRefOrCallAccess().getRefETypedElementIDTerminalRuleCall_1_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRefOrCallAccess().getRefETypedElementIDTerminalRuleCall_1_2_0_1()); }
		)
		{ after(grammarAccess.getRefOrCallAccess().getRefETypedElementCrossReference_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefOrCall__ParamsAssignment_1_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefOrCallAccess().getParamsRefParamsParserRuleCall_1_3_1_0()); }
		ruleRefParams
		{ after(grammarAccess.getRefOrCallAccess().getParamsRefParamsParserRuleCall_1_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__ParamsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefParamsAccess().getParamsArithmeticExpressionParserRuleCall_0_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getRefParamsAccess().getParamsArithmeticExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RefParams__ParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRefParamsAccess().getParamsArithmeticExpressionParserRuleCall_1_1_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getRefParamsAccess().getParamsArithmeticExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__ParamsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorAccess().getParamsParameterParserRuleCall_3_0()); }
		ruleParameter
		{ after(grammarAccess.getGeneratorAccess().getParamsParameterParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__CommandsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorAccess().getCommandsGeneratorExpressionParserRuleCall_6_0()); }
		ruleGeneratorExpression
		{ after(grammarAccess.getGeneratorAccess().getCommandsGeneratorExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternVariableAccess().getTypePatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternVariableAccess().getTypePatternIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternVariableAccess().getTypePatternIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternVariableAccess().getTypePatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatternVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternVariable__PatternCallAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternVariableAccess().getPatternCallPatternCallParserRuleCall_3_0()); }
		rulePatternCall
		{ after(grammarAccess.getPatternVariableAccess().getPatternCallPatternCallParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__HeadAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getHeadForHeadParserRuleCall_1_0()); }
		ruleForHead
		{ after(grammarAccess.getForStatementAccess().getHeadForHeadParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getBodyForBodyParserRuleCall_3_0()); }
		ruleForBody
		{ after(grammarAccess.getForStatementAccess().getBodyForBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__IteratorVarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneralForHeadAccess().getIteratorVarIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getGeneralForHeadAccess().getIteratorVarIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneralForHead__RangeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneralForHeadAccess().getRangeForRangeParserRuleCall_2_0()); }
		ruleForRange
		{ after(grammarAccess.getGeneralForHeadAccess().getRangeForRangeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__SrcAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachHeadAccess().getSrcRefOrCallParserRuleCall_0_0()); }
		ruleRefOrCall
		{ after(grammarAccess.getForEachHeadAccess().getSrcRefOrCallParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__ErefAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachHeadAccess().getErefEReferenceCrossReference_2_0()); }
		(
			{ before(grammarAccess.getForEachHeadAccess().getErefEReferenceIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForEachHeadAccess().getErefEReferenceIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getForEachHeadAccess().getErefEReferenceCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachHead__IteratorVarAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachHeadAccess().getIteratorVarIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getForEachHeadAccess().getIteratorVarIDTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForBody__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForBodyAccess().getCommandsGeneratorExpressionParserRuleCall_1_0()); }
		ruleGeneratorExpression
		{ after(grammarAccess.getForBodyAccess().getCommandsGeneratorExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__CasesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseSwitchAccess().getCasesIfElseCaseParserRuleCall_2_0()); }
		ruleIfElseCase
		{ after(grammarAccess.getIfElseSwitchAccess().getCasesIfElseCaseParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseSwitch__DefaultAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseSwitchAccess().getDefaultDefaultParserRuleCall_3_0()); }
		ruleDefault
		{ after(grammarAccess.getIfElseSwitchAccess().getDefaultDefaultParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__ValAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseCaseAccess().getValArithmeticExpressionParserRuleCall_1_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getIfElseCaseAccess().getValArithmeticExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseCase__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfElseCaseAccess().getBodyCaseBodyParserRuleCall_3_0()); }
		ruleCaseBody
		{ after(grammarAccess.getIfElseCaseAccess().getBodyCaseBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__AttributeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseAccess().getAttributeRefOrCallParserRuleCall_2_0()); }
		ruleRefOrCall
		{ after(grammarAccess.getSwitchCaseAccess().getAttributeRefOrCallParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__CasesAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseAccess().getCasesCaseParserRuleCall_5_0()); }
		ruleCase
		{ after(grammarAccess.getSwitchCaseAccess().getCasesCaseParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__DefaultAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseAccess().getDefaultDefaultParserRuleCall_6_0()); }
		ruleDefault
		{ after(grammarAccess.getSwitchCaseAccess().getDefaultDefaultParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__NodeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseWithCastAccess().getNodeNodeParserRuleCall_1_0()); }
		ruleNode
		{ after(grammarAccess.getCaseWithCastAccess().getNodeNodeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__WhenAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseWithCastAccess().getWhenArithmeticExpressionParserRuleCall_2_1_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getCaseWithCastAccess().getWhenArithmeticExpressionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithCast__BodyAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseWithCastAccess().getBodyCaseBodyParserRuleCall_4_0()); }
		ruleCaseBody
		{ after(grammarAccess.getCaseWithCastAccess().getBodyCaseBodyParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__ValAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseWithoutCastAccess().getValArithmeticExpressionParserRuleCall_1_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getCaseWithoutCastAccess().getValArithmeticExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseWithoutCast__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseWithoutCastAccess().getBodyCaseBodyParserRuleCall_3_0()); }
		ruleCaseBody
		{ after(grammarAccess.getCaseWithoutCastAccess().getBodyCaseBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__ExpressionsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseBodyAccess().getExpressionsSwitchExpressionParserRuleCall_0_2_0()); }
		ruleSwitchExpression
		{ after(grammarAccess.getCaseBodyAccess().getExpressionsSwitchExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseBody__ExpressionsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseBodyAccess().getExpressionsSwitchExpressionParserRuleCall_1_0_0()); }
		ruleSwitchExpression
		{ after(grammarAccess.getCaseBodyAccess().getExpressionsSwitchExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getListAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__CreatedByAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getCreatedByListAssignmentParserRuleCall_2_1_0()); }
		ruleListAssignment
		{ after(grammarAccess.getListAccess().getCreatedByListAssignmentParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__ElementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAdHocAccess().getElementsLiteralParserRuleCall_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getListAdHocAccess().getElementsLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListAdHoc__ElementsAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAdHocAccess().getElementsLiteralParserRuleCall_2_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getListAdHocAccess().getElementsLiteralParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMapAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Map__CreatedByAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAccess().getCreatedByMapAssignmentParserRuleCall_2_1_0()); }
		ruleMapAssignment
		{ after(grammarAccess.getMapAccess().getCreatedByMapAssignmentParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__EntriesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAdHocAccess().getEntriesMapTupelParserRuleCall_1_0()); }
		ruleMapTupel
		{ after(grammarAccess.getMapAdHocAccess().getEntriesMapTupelParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapAdHoc__EntriesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapAdHocAccess().getEntriesMapTupelParserRuleCall_2_1_0()); }
		ruleMapTupel
		{ after(grammarAccess.getMapAdHocAccess().getEntriesMapTupelParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__KeyAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapTupelAccess().getKeyLiteralParserRuleCall_1_0()); }
		ruleLiteral
		{ after(grammarAccess.getMapTupelAccess().getKeyLiteralParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MapTupel__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMapTupelAccess().getValueArithmeticExpressionParserRuleCall_3_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getMapTupelAccess().getValueArithmeticExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForRangeAccess().getStartArithmeticExpressionParserRuleCall_0_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getForRangeAccess().getStartArithmeticExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForRangeAccess().getEndArithmeticExpressionParserRuleCall_2_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getForRangeAccess().getEndArithmeticExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTertiaryExpressionAccess().getOpTertiaryOpEnumRuleCall_1_1_0()); }
		ruleTertiaryOp
		{ after(grammarAccess.getTertiaryExpressionAccess().getOpTertiaryOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TertiaryExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTertiaryExpressionAccess().getRightSecondaryExpressionParserRuleCall_1_2_0()); }
		ruleSecondaryExpression
		{ after(grammarAccess.getTertiaryExpressionAccess().getRightSecondaryExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSecondaryExpressionAccess().getOpSecondaryOpEnumRuleCall_1_1_0()); }
		ruleSecondaryOp
		{ after(grammarAccess.getSecondaryExpressionAccess().getOpSecondaryOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SecondaryExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSecondaryExpressionAccess().getRightPrimaryExprParserRuleCall_1_2_0()); }
		rulePrimaryExpr
		{ after(grammarAccess.getSecondaryExpressionAccess().getRightPrimaryExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__OpAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getOpPrimaryOpEnumRuleCall_1_1_0()); }
		rulePrimaryOp
		{ after(grammarAccess.getPrimaryExprAccess().getOpPrimaryOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpr__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExprAccess().getRightRelationExpressionParserRuleCall_1_2_0()); }
		ruleRelationExpression
		{ after(grammarAccess.getPrimaryExprAccess().getRightRelationExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__RelationAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getRelationRelationalOpEnumRuleCall_1_1_0()); }
		ruleRelationalOp
		{ after(grammarAccess.getRelationExpressionAccess().getRelationRelationalOpEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationExpressionAccess().getRightBaseExprParserRuleCall_1_2_0()); }
		ruleBaseExpr
		{ after(grammarAccess.getRelationExpressionAccess().getRightBaseExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__ExprAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseExprAccess().getExprBaseExprParserRuleCall_1_2_0()); }
		ruleBaseExpr
		{ after(grammarAccess.getBaseExprAccess().getExprBaseExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__FuncAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseExprAccess().getFuncMathFuncEnumRuleCall_2_1_0()); }
		ruleMathFunc
		{ after(grammarAccess.getBaseExprAccess().getFuncMathFuncEnumRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseExpr__ExprAssignment_2_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBaseExprAccess().getExprArithmeticExpressionParserRuleCall_2_3_0()); }
		ruleArithmeticExpression
		{ after(grammarAccess.getBaseExprAccess().getExprArithmeticExpressionParserRuleCall_2_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getValAlternatives_0()); }
		(rule__BooleanLiteral__ValAlternatives_0)
		{ after(grammarAccess.getBooleanLiteralAccess().getValAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringLiteralAccess().getValSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValDOUBLETerminalRuleCall_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getNumberLiteralAccess().getValDOUBLETerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : RULE_INT ('.' RULE_INT)?;

RULE_TRUE : 'true';

RULE_FALSE : 'false';

RULE_ASSIGNMENT_OP : '=';

RULE_NEWLINE : '\n';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
