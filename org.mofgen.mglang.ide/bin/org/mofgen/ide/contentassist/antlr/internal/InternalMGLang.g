/*
 * generated by Xtext 2.20.0
 */
grammar InternalMGLang;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.mofgen.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.mofgen.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mofgen.services.MGLangGrammarAccess;

}
@parser::members {
	private MGLangGrammarAccess grammarAccess;

	public void setGrammarAccess(MGLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleMofgenFile
entryRuleMofgenFile
:
{ before(grammarAccess.getMofgenFileRule()); }
	 ruleMofgenFile
{ after(grammarAccess.getMofgenFileRule()); } 
	 EOF 
;

// Rule MofgenFile
ruleMofgenFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMofgenFileAccess().getGroup()); }
		(rule__MofgenFile__Group__0)
		{ after(grammarAccess.getMofgenFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePattern
entryRulePattern
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternAccess().getGroup()); }
		(rule__Pattern__Group__0)
		{ after(grammarAccess.getPatternAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternReturn
entryRulePatternReturn
:
{ before(grammarAccess.getPatternReturnRule()); }
	 rulePatternReturn
{ after(grammarAccess.getPatternReturnRule()); } 
	 EOF 
;

// Rule PatternReturn
rulePatternReturn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternReturnAccess().getGroup()); }
		(rule__PatternReturn__Group__0)
		{ after(grammarAccess.getPatternReturnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternNodeCreation
entryRulePatternNodeCreation
:
{ before(grammarAccess.getPatternNodeCreationRule()); }
	 rulePatternNodeCreation
{ after(grammarAccess.getPatternNodeCreationRule()); } 
	 EOF 
;

// Rule PatternNodeCreation
rulePatternNodeCreation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternNodeCreationAccess().getGroup()); }
		(rule__PatternNodeCreation__Group__0)
		{ after(grammarAccess.getPatternNodeCreationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeConstructor
entryRuleNodeConstructor
:
{ before(grammarAccess.getNodeConstructorRule()); }
	 ruleNodeConstructor
{ after(grammarAccess.getNodeConstructorRule()); } 
	 EOF 
;

// Rule NodeConstructor
ruleNodeConstructor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeConstructorAccess().getGroup()); }
		(rule__NodeConstructor__Group__0)
		{ after(grammarAccess.getNodeConstructorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNode
entryRuleNode
:
{ before(grammarAccess.getNodeRule()); }
	 ruleNode
{ after(grammarAccess.getNodeRule()); } 
	 EOF 
;

// Rule Node
ruleNode 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAccess().getGroup()); }
		(rule__Node__Group__0)
		{ after(grammarAccess.getNodeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeReferenceOrAssignment
entryRuleNodeReferenceOrAssignment
:
{ before(grammarAccess.getNodeReferenceOrAssignmentRule()); }
	 ruleNodeReferenceOrAssignment
{ after(grammarAccess.getNodeReferenceOrAssignmentRule()); } 
	 EOF 
;

// Rule NodeReferenceOrAssignment
ruleNodeReferenceOrAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup()); }
		(rule__NodeReferenceOrAssignment__Group__0)
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternNodeReference
entryRulePatternNodeReference
:
{ before(grammarAccess.getPatternNodeReferenceRule()); }
	 rulePatternNodeReference
{ after(grammarAccess.getPatternNodeReferenceRule()); } 
	 EOF 
;

// Rule PatternNodeReference
rulePatternNodeReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getGroup()); }
		(rule__PatternNodeReference__Group__0)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNodeAttributeCall
entryRuleNodeAttributeCall
:
{ before(grammarAccess.getNodeAttributeCallRule()); }
	 ruleNodeAttributeCall
{ after(grammarAccess.getNodeAttributeCallRule()); } 
	 EOF 
;

// Rule NodeAttributeCall
ruleNodeAttributeCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNodeAttributeCallAccess().getGroup()); }
		(rule__NodeAttributeCall__Group__0)
		{ after(grammarAccess.getNodeAttributeCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGenerator
entryRuleGenerator
:
{ before(grammarAccess.getGeneratorRule()); }
	 ruleGenerator
{ after(grammarAccess.getGeneratorRule()); } 
	 EOF 
;

// Rule Generator
ruleGenerator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorAccess().getGroup()); }
		(rule__Generator__Group__0)
		{ after(grammarAccess.getGeneratorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneratorElement
entryRuleGeneratorElement
:
{ before(grammarAccess.getGeneratorElementRule()); }
	 ruleGeneratorElement
{ after(grammarAccess.getGeneratorElementRule()); } 
	 EOF 
;

// Rule GeneratorElement
ruleGeneratorElement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorElementAccess().getAlternatives()); }
		(rule__GeneratorElement__Alternatives)
		{ after(grammarAccess.getGeneratorElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGeneratorCommand
entryRuleGeneratorCommand
:
{ before(grammarAccess.getGeneratorCommandRule()); }
	 ruleGeneratorCommand
{ after(grammarAccess.getGeneratorCommandRule()); } 
	 EOF 
;

// Rule GeneratorCommand
ruleGeneratorCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeneratorCommandAccess().getAlternatives()); }
		(rule__GeneratorCommand__Alternatives)
		{ after(grammarAccess.getGeneratorCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternCall
entryRulePatternCall
:
{ before(grammarAccess.getPatternCallRule()); }
	 rulePatternCall
{ after(grammarAccess.getPatternCallRule()); } 
	 EOF 
;

// Rule PatternCall
rulePatternCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternCallAccess().getGroup()); }
		(rule__PatternCall__Group__0)
		{ after(grammarAccess.getPatternCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternObjectCreation
entryRulePatternObjectCreation
:
{ before(grammarAccess.getPatternObjectCreationRule()); }
	 rulePatternObjectCreation
{ after(grammarAccess.getPatternObjectCreationRule()); } 
	 EOF 
;

// Rule PatternObjectCreation
rulePatternObjectCreation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternObjectCreationAccess().getGroup()); }
		(rule__PatternObjectCreation__Group__0)
		{ after(grammarAccess.getPatternObjectCreationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePatternObject
entryRulePatternObject
:
{ before(grammarAccess.getPatternObjectRule()); }
	 rulePatternObject
{ after(grammarAccess.getPatternObjectRule()); } 
	 EOF 
;

// Rule PatternObject
rulePatternObject 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPatternObjectAccess().getGroup()); }
		(rule__PatternObject__Group__0)
		{ after(grammarAccess.getPatternObjectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForLoop
entryRuleForLoop
:
{ before(grammarAccess.getForLoopRule()); }
	 ruleForLoop
{ after(grammarAccess.getForLoopRule()); } 
	 EOF 
;

// Rule ForLoop
ruleForLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForLoopAccess().getGroup()); }
		(rule__ForLoop__Group__0)
		{ after(grammarAccess.getForLoopAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForCondition
entryRuleForCondition
:
{ before(grammarAccess.getForConditionRule()); }
	 ruleForCondition
{ after(grammarAccess.getForConditionRule()); } 
	 EOF 
;

// Rule ForCondition
ruleForCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForConditionAccess().getAlternatives()); }
		(rule__ForCondition__Alternatives)
		{ after(grammarAccess.getForConditionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForEachCollection
entryRuleForEachCollection
:
{ before(grammarAccess.getForEachCollectionRule()); }
	 ruleForEachCollection
{ after(grammarAccess.getForEachCollectionRule()); } 
	 EOF 
;

// Rule ForEachCollection
ruleForEachCollection 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForEachCollectionAccess().getCollAssignment()); }
		(rule__ForEachCollection__CollAssignment)
		{ after(grammarAccess.getForEachCollectionAccess().getCollAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForRange
entryRuleForRange
:
{ before(grammarAccess.getForRangeRule()); }
	 ruleForRange
{ after(grammarAccess.getForRangeRule()); } 
	 EOF 
;

// Rule ForRange
ruleForRange 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForRangeAccess().getGroup()); }
		(rule__ForRange__Group__0)
		{ after(grammarAccess.getForRangeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression
:
{ before(grammarAccess.getLiteralExpressionRule()); }
	 ruleLiteralExpression
{ after(grammarAccess.getLiteralExpressionRule()); } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
		(rule__LiteralExpression__Alternatives)
		{ after(grammarAccess.getLiteralExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getGroup()); }
		(rule__NumberLiteral__Group__0)
		{ after(grammarAccess.getNumberLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule EditorRelation
ruleEditorRelation
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditorRelationAccess().getAlternatives()); }
		(rule__EditorRelation__Alternatives)
		{ after(grammarAccess.getEditorRelationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0()); }
		(rule__MofgenFile__PatternsAssignment_1_0)
		{ after(grammarAccess.getMofgenFileAccess().getPatternsAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1()); }
		(rule__MofgenFile__GeneratorsAssignment_1_1)
		{ after(grammarAccess.getMofgenFileAccess().getGeneratorsAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNodesAssignment_4_0()); }
		(rule__Pattern__NodesAssignment_4_0)
		{ after(grammarAccess.getPatternAccess().getNodesAssignment_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getPatternAccess().getRefsAssignsAssignment_4_1()); }
		(rule__Pattern__RefsAssignsAssignment_4_1)
		{ after(grammarAccess.getPatternAccess().getRefsAssignsAssignment_4_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getPatternNodeReferenceParserRuleCall_0_0()); }
		rulePatternNodeReference
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getPatternNodeReferenceParserRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getAssignmentParserRuleCall_0_1()); }
		ruleAssignment
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getAssignmentParserRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratorElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorElementAccess().getGeneratorCommandParserRuleCall_0()); }
		ruleGeneratorCommand
		{ after(grammarAccess.getGeneratorElementAccess().getGeneratorCommandParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorElementAccess().getForLoopParserRuleCall_1()); }
		ruleForLoop
		{ after(grammarAccess.getGeneratorElementAccess().getForLoopParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneratorCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorCommandAccess().getPatternCallParserRuleCall_0()); }
		rulePatternCall
		{ after(grammarAccess.getGeneratorCommandAccess().getPatternCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeneratorCommandAccess().getPatternObjectCreationParserRuleCall_1()); }
		rulePatternObjectCreation
		{ after(grammarAccess.getGeneratorCommandAccess().getPatternObjectCreationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForCondition__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForConditionAccess().getForEachCollectionParserRuleCall_0()); }
		ruleForEachCollection
		{ after(grammarAccess.getForConditionAccess().getForEachCollectionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getForConditionAccess().getForRangeParserRuleCall_1()); }
		ruleForRange
		{ after(grammarAccess.getForConditionAccess().getForRangeParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
		(rule__LiteralExpression__Group_0__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
		(rule__LiteralExpression__Group_1__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getGroup_2()); }
		(rule__LiteralExpression__Group_2__0)
		{ after(grammarAccess.getLiteralExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
		'true'
		{ after(grammarAccess.getLiteralExpressionAccess().getValueTrueKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueFalseKeyword_0_1_0_1()); }
		'false'
		{ after(grammarAccess.getLiteralExpressionAccess().getValueFalseKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EditorRelation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEditorRelationAccess().getGREATEREnumLiteralDeclaration_0()); }
		('>')
		{ after(grammarAccess.getEditorRelationAccess().getGREATEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getEditorRelationAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); }
		('>=')
		{ after(grammarAccess.getEditorRelationAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getEditorRelationAccess().getEQUALEnumLiteralDeclaration_2()); }
		('==')
		{ after(grammarAccess.getEditorRelationAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getEditorRelationAccess().getUNEQUALEnumLiteralDeclaration_3()); }
		('!=')
		{ after(grammarAccess.getEditorRelationAccess().getUNEQUALEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getEditorRelationAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4()); }
		('<=')
		{ after(grammarAccess.getEditorRelationAccess().getSMALLER_OR_EQUALEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getEditorRelationAccess().getSMALLEREnumLiteralDeclaration_5()); }
		('<')
		{ after(grammarAccess.getEditorRelationAccess().getSMALLEREnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__0__Impl
	rule__MofgenFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getImportsAssignment_0()); }
	(rule__MofgenFile__ImportsAssignment_0)*
	{ after(grammarAccess.getMofgenFileAccess().getImportsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MofgenFile__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMofgenFileAccess().getAlternatives_1()); }
	(rule__MofgenFile__Alternatives_1)*
	{ after(grammarAccess.getMofgenFileAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
	rule__Import__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getNameAssignment_1()); }
	(rule__Import__NameAssignment_1)
	{ after(grammarAccess.getImportAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__2__Impl
	rule__Import__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAsKeyword_2()); }
	'as'
	{ after(grammarAccess.getImportAccess().getAsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getAliasAssignment_3()); }
	(rule__Import__AliasAssignment_3)
	{ after(grammarAccess.getImportAccess().getAliasAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__0__Impl
	rule__Pattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
	'pattern'
	{ after(grammarAccess.getPatternAccess().getPatternKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__1__Impl
	rule__Pattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getNameAssignment_1()); }
	(rule__Pattern__NameAssignment_1)
	{ after(grammarAccess.getPatternAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__2__Impl
	rule__Pattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2()); }
	(rule__Pattern__Group_2__0)
	{ after(grammarAccess.getPatternAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__3__Impl
	rule__Pattern__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getPatternAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__4__Impl
	rule__Pattern__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getAlternatives_4()); }
	(rule__Pattern__Alternatives_4)*
	{ after(grammarAccess.getPatternAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__5__Impl
	rule__Pattern__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getPatternAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getReturnAssignment_6()); }
	(rule__Pattern__ReturnAssignment_6)
	{ after(grammarAccess.getPatternAccess().getReturnAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__0__Impl
	rule__Pattern__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPatternAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__1__Impl
	rule__Pattern__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2_1()); }
	(rule__Pattern__Group_2_1__0)?
	{ after(grammarAccess.getPatternAccess().getGroup_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPatternAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1__0__Impl
	rule__Pattern__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0()); }
	(rule__Pattern__ParametersAssignment_2_1_0)
	{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getGroup_2_1_1()); }
	(rule__Pattern__Group_2_1_1__0)*
	{ after(grammarAccess.getPatternAccess().getGroup_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pattern__Group_2_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1_1__0__Impl
	rule__Pattern__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0()); }
	','
	{ after(grammarAccess.getPatternAccess().getCommaKeyword_2_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pattern__Group_2_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Group_2_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1()); }
	(rule__Pattern__ParametersAssignment_2_1_1_1)
	{ after(grammarAccess.getPatternAccess().getParametersAssignment_2_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternReturn__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__0__Impl
	rule__PatternReturn__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getPatternReturnAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternReturn__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternReturnAccess().getThisUsedAssignment_1()); }
	(rule__PatternReturn__ThisUsedAssignment_1)
	{ after(grammarAccess.getPatternReturnAccess().getThisUsedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternNodeCreation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeCreation__Group__0__Impl
	rule__PatternNodeCreation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeCreation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeCreationAccess().getNodeAssignment_0()); }
	(rule__PatternNodeCreation__NodeAssignment_0)
	{ after(grammarAccess.getPatternNodeCreationAccess().getNodeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeCreation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeCreation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeCreation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeCreationAccess().getConstructorAssignment_1()); }
	(rule__PatternNodeCreation__ConstructorAssignment_1)?
	{ after(grammarAccess.getPatternNodeCreationAccess().getConstructorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeConstructor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__0__Impl
	rule__NodeConstructor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getNodeConstructorAction_0()); }
	()
	{ after(grammarAccess.getNodeConstructorAccess().getNodeConstructorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__1__Impl
	rule__NodeConstructor__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getNodeConstructorAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__2__Impl
	rule__NodeConstructor__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getParamsAssignment_2()); }
	(rule__NodeConstructor__ParamsAssignment_2)*
	{ after(grammarAccess.getNodeConstructorAccess().getParamsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeConstructor__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeConstructorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getNodeConstructorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Node__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__0__Impl
	rule__Node__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getTypeAssignment_0()); }
	(rule__Node__TypeAssignment_0)
	{ after(grammarAccess.getNodeAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Node__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAccess().getNameAssignment_1()); }
	(rule__Node__NameAssignment_1)
	{ after(grammarAccess.getNodeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeReferenceOrAssignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group__0__Impl
	rule__NodeReferenceOrAssignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives_0()); }
	(rule__NodeReferenceOrAssignment__Alternatives_0)
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup_1()); }
	(rule__NodeReferenceOrAssignment__Group_1__0)?
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeReferenceOrAssignment__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group_1__0__Impl
	rule__NodeReferenceOrAssignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getLeftSquareBracketKeyword_1_0()); }
	'['
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getLeftSquareBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group_1__1__Impl
	rule__NodeReferenceOrAssignment__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionAssignment_1_1()); }
	(rule__NodeReferenceOrAssignment__ConditionAssignment_1_1)
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeReferenceOrAssignment__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getRightSquareBracketKeyword_1_2()); }
	']'
	{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getRightSquareBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getLhsAssignment_0()); }
	(rule__Condition__LhsAssignment_0)
	{ after(grammarAccess.getConditionAccess().getLhsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getGroup_1()); }
	(rule__Condition__Group_1__0)?
	{ after(grammarAccess.getConditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__0__Impl
	rule__Condition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getRelationAssignment_1_0()); }
	(rule__Condition__RelationAssignment_1_0)
	{ after(grammarAccess.getConditionAccess().getRelationAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getRhsAssignment_1_1()); }
	(rule__Condition__RhsAssignment_1_1)
	{ after(grammarAccess.getConditionAccess().getRhsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternNodeReference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__0__Impl
	rule__PatternNodeReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getSourceAssignment_0()); }
	(rule__PatternNodeReference__SourceAssignment_0)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getSourceAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__1__Impl
	rule__PatternNodeReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusKeyword_1()); }
	'-'
	{ after(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__2__Impl
	rule__PatternNodeReference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_2()); }
	(rule__PatternNodeReference__TypeAssignment_2)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__3__Impl
	rule__PatternNodeReference__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
	'->'
	{ after(grammarAccess.getPatternNodeReferenceAccess().getHyphenMinusGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternNodeReference__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_4()); }
	(rule__PatternNodeReference__TargetAssignment_4)
	{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
	(rule__Assignment__TargetAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getTargetAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getPATTERN_ASSIGNMENT_OPTerminalRuleCall_1()); }
	RULE_PATTERN_ASSIGNMENT_OP
	{ after(grammarAccess.getAssignmentAccess().getPATTERN_ASSIGNMENT_OPTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NodeAttributeCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeAttributeCall__Group__0__Impl
	rule__NodeAttributeCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAttributeCallAccess().getObjectAssignment_0()); }
	(rule__NodeAttributeCall__ObjectAssignment_0)
	{ after(grammarAccess.getNodeAttributeCallAccess().getObjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeAttributeCall__Group__1__Impl
	rule__NodeAttributeCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAttributeCallAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getNodeAttributeCallAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NodeAttributeCall__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNodeAttributeCallAccess().getAttributeAssignment_2()); }
	(rule__NodeAttributeCall__AttributeAssignment_2)
	{ after(grammarAccess.getNodeAttributeCallAccess().getAttributeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getNameAssignment_0()); }
	(rule__Parameter__NameAssignment_0)
	{ after(grammarAccess.getParameterAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getParameterAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
	(rule__Parameter__TypeAssignment_2)
	{ after(grammarAccess.getParameterAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Generator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__0__Impl
	rule__Generator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getGeneratorKeyword_0()); }
	'generator'
	{ after(grammarAccess.getGeneratorAccess().getGeneratorKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__1__Impl
	rule__Generator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getNameAssignment_1()); }
	(rule__Generator__NameAssignment_1)
	{ after(grammarAccess.getGeneratorAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__2__Impl
	rule__Generator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getGeneratorAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__3__Impl
	rule__Generator__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getGeneratorAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__4__Impl
	rule__Generator__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getGeneratorAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__5__Impl
	rule__Generator__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getCommandsAssignment_5()); }
	(rule__Generator__CommandsAssignment_5)*
	{ after(grammarAccess.getGeneratorAccess().getCommandsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Generator__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getGeneratorAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__0__Impl
	rule__PatternCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getCalledPatternAssignment_0()); }
	(rule__PatternCall__CalledPatternAssignment_0)
	{ after(grammarAccess.getPatternCallAccess().getCalledPatternAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getGroup_1()); }
	(rule__PatternCall__Group_1__0)?
	{ after(grammarAccess.getPatternCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_1__0__Impl
	rule__PatternCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getPatternCallAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_1__1__Impl
	rule__PatternCall__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getParamsAssignment_1_1()); }
	(rule__PatternCall__ParamsAssignment_1_1)*
	{ after(grammarAccess.getPatternCallAccess().getParamsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternCall__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getPatternCallAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternObjectCreation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObjectCreation__Group__0__Impl
	rule__PatternObjectCreation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0()); }
	(rule__PatternObjectCreation__PObjectAssignment_0)
	{ after(grammarAccess.getPatternObjectCreationAccess().getPObjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObjectCreation__Group__1__Impl
	rule__PatternObjectCreation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectCreationAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
	RULE_ASSIGNMENT_OP
	{ after(grammarAccess.getPatternObjectCreationAccess().getASSIGNMENT_OPTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObjectCreation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2()); }
	(rule__PatternObjectCreation__PatternCallAssignment_2)
	{ after(grammarAccess.getPatternObjectCreationAccess().getPatternCallAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PatternObject__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObject__Group__0__Impl
	rule__PatternObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectAccess().getTypeAssignment_0()); }
	(rule__PatternObject__TypeAssignment_0)
	{ after(grammarAccess.getPatternObjectAccess().getTypeAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PatternObject__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPatternObjectAccess().getNameAssignment_1()); }
	(rule__PatternObject__NameAssignment_1)
	{ after(grammarAccess.getPatternObjectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForLoop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__0__Impl
	rule__ForLoop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForLoopAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__1__Impl
	rule__ForLoop__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getIteratorVarAssignment_1()); }
	(rule__ForLoop__IteratorVarAssignment_1)
	{ after(grammarAccess.getForLoopAccess().getIteratorVarAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__2__Impl
	rule__ForLoop__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getInKeyword_2()); }
	'in'
	{ after(grammarAccess.getForLoopAccess().getInKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__3__Impl
	rule__ForLoop__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getIteratingConditionAssignment_3()); }
	(rule__ForLoop__IteratingConditionAssignment_3)
	{ after(grammarAccess.getForLoopAccess().getIteratingConditionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__4__Impl
	rule__ForLoop__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4()); }
	'{'
	{ after(grammarAccess.getForLoopAccess().getLeftCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__5__Impl
	rule__ForLoop__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getCommandsAssignment_5()); }
	(rule__ForLoop__CommandsAssignment_5)*
	{ after(grammarAccess.getForLoopAccess().getCommandsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForLoop__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getForLoopAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForRange__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__0__Impl
	rule__ForRange__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getStartAssignment_0()); }
	(rule__ForRange__StartAssignment_0)
	{ after(grammarAccess.getForRangeAccess().getStartAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__1__Impl
	rule__ForRange__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getForRangeAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForRange__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForRangeAccess().getEndAssignment_2()); }
	(rule__ForRange__EndAssignment_2)
	{ after(grammarAccess.getForRangeAccess().getEndAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_0__0__Impl
	rule__LiteralExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getBooleanLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
	(rule__LiteralExpression__ValueAssignment_0_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_1__0__Impl
	rule__LiteralExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getNumberLiteralAction_1_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getNumberLiteralAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getNumberLiteralParserRuleCall_1_1()); }
	ruleNumberLiteral
	{ after(grammarAccess.getLiteralExpressionAccess().getNumberLiteralParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_2__0__Impl
	rule__LiteralExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_2_0()); }
	()
	{ after(grammarAccess.getLiteralExpressionAccess().getStringLiteralAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LiteralExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralExpressionAccess().getValueAssignment_2_1()); }
	(rule__LiteralExpression__ValueAssignment_2_1)
	{ after(grammarAccess.getLiteralExpressionAccess().getValueAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__0__Impl
	rule__NumberLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getNumberLiteralAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__1__Impl
	rule__NumberLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getGroup_2()); }
	(rule__NumberLiteral__Group_2__0)?
	{ after(grammarAccess.getNumberLiteralAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group_2__0__Impl
	rule__NumberLiteral__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getNumberLiteralAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_2_1()); }
	RULE_INT
	{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MofgenFile__ImportsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getMofgenFileAccess().getImportsImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__PatternsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_1_0_0()); }
		rulePattern
		{ after(grammarAccess.getMofgenFileAccess().getPatternsPatternParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MofgenFile__GeneratorsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_1_1_0()); }
		ruleGenerator
		{ after(grammarAccess.getMofgenFileAccess().getGeneratorsGeneratorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__AliasAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getImportAccess().getAliasIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatternAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
		ruleParameter
		{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ParametersAssignment_2_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getPatternAccess().getParametersParameterParserRuleCall_2_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__NodesAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getNodesPatternNodeCreationParserRuleCall_4_0_0()); }
		rulePatternNodeCreation
		{ after(grammarAccess.getPatternAccess().getNodesPatternNodeCreationParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__RefsAssignsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getRefsAssignsNodeReferenceOrAssignmentParserRuleCall_4_1_0()); }
		ruleNodeReferenceOrAssignment
		{ after(grammarAccess.getPatternAccess().getRefsAssignsNodeReferenceOrAssignmentParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__ReturnAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0()); }
		rulePatternReturn
		{ after(grammarAccess.getPatternAccess().getReturnPatternReturnParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternReturn__ThisUsedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternReturnAccess().getThisUsedThisKeyword_1_0()); }
		(
			{ before(grammarAccess.getPatternReturnAccess().getThisUsedThisKeyword_1_0()); }
			'this'
			{ after(grammarAccess.getPatternReturnAccess().getThisUsedThisKeyword_1_0()); }
		)
		{ after(grammarAccess.getPatternReturnAccess().getThisUsedThisKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeCreation__NodeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeCreationAccess().getNodeNodeParserRuleCall_0_0()); }
		ruleNode
		{ after(grammarAccess.getPatternNodeCreationAccess().getNodeNodeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeCreation__ConstructorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeCreationAccess().getConstructorNodeConstructorParserRuleCall_1_0()); }
		ruleNodeConstructor
		{ after(grammarAccess.getPatternNodeCreationAccess().getConstructorNodeConstructorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeConstructor__ParamsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeConstructorAccess().getParamsLiteralExpressionParserRuleCall_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getNodeConstructorAccess().getParamsLiteralExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0()); }
		(
			{ before(grammarAccess.getNodeAccess().getTypeEClassIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAccess().getTypeEClassIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getNodeAccess().getTypeEClassCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Node__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getNodeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeReferenceOrAssignment__ConditionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionConditionParserRuleCall_1_1_0()); }
		ruleCondition
		{ after(grammarAccess.getNodeReferenceOrAssignmentAccess().getConditionConditionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__LhsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getLhsParameterCrossReference_0_0()); }
		(
			{ before(grammarAccess.getConditionAccess().getLhsParameterIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionAccess().getLhsParameterIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getConditionAccess().getLhsParameterCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__RelationAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getRelationEditorRelationEnumRuleCall_1_0_0()); }
		ruleEditorRelation
		{ after(grammarAccess.getConditionAccess().getRelationEditorRelationEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__RhsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getRhsParameterCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getConditionAccess().getRhsParameterIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getConditionAccess().getRhsParameterIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getConditionAccess().getRhsParameterCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__SourceAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getSourceNodeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getSourceNodeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getSourceNodeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getSourceNodeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_2_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getTypeEReferenceCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternNodeReference__TargetAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_4_0()); }
		(
			{ before(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeIDTerminalRuleCall_4_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeIDTerminalRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getPatternNodeReferenceAccess().getTargetNodeCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TargetAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getTargetNodeAttributeCallParserRuleCall_0_0()); }
		ruleNodeAttributeCall
		{ after(grammarAccess.getAssignmentAccess().getTargetNodeAttributeCallParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueLiteralExpressionParserRuleCall_2_0()); }
		ruleLiteralExpression
		{ after(grammarAccess.getAssignmentAccess().getValueLiteralExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__ObjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAttributeCallAccess().getObjectNodeCrossReference_0_0()); }
		(
			{ before(grammarAccess.getNodeAttributeCallAccess().getObjectNodeIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAttributeCallAccess().getObjectNodeIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getNodeAttributeCallAccess().getObjectNodeCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NodeAttributeCall__AttributeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeCrossReference_2_0()); }
		(
			{ before(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getNodeAttributeCallAccess().getAttributeEAttributeCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getTypeEClassifierCrossReference_2_0()); }
		(
			{ before(grammarAccess.getParameterAccess().getTypeEClassifierIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getParameterAccess().getTypeEClassifierIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getParameterAccess().getTypeEClassifierCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGeneratorAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Generator__CommandsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeneratorAccess().getCommandsGeneratorElementParserRuleCall_5_0()); }
		ruleGeneratorElement
		{ after(grammarAccess.getGeneratorAccess().getCommandsGeneratorElementParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__CalledPatternAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getCalledPatternPatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternCallAccess().getCalledPatternPatternIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternCallAccess().getCalledPatternPatternIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternCallAccess().getCalledPatternPatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternCall__ParamsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternCallAccess().getParamsPatternObjectParserRuleCall_1_1_0()); }
		rulePatternObject
		{ after(grammarAccess.getPatternCallAccess().getParamsPatternObjectParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__PObjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectCreationAccess().getPObjectPatternObjectParserRuleCall_0_0()); }
		rulePatternObject
		{ after(grammarAccess.getPatternObjectCreationAccess().getPObjectPatternObjectParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObjectCreation__PatternCallAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectCreationAccess().getPatternCallPatternCallParserRuleCall_2_0()); }
		rulePatternCall
		{ after(grammarAccess.getPatternObjectCreationAccess().getPatternCallPatternCallParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__TypeAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectAccess().getTypePatternCrossReference_0_0()); }
		(
			{ before(grammarAccess.getPatternObjectAccess().getTypePatternIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPatternObjectAccess().getTypePatternIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getPatternObjectAccess().getTypePatternCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PatternObject__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPatternObjectAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getPatternObjectAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__IteratorVarAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getIteratorVarIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getForLoopAccess().getIteratorVarIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__IteratingConditionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getIteratingConditionForConditionParserRuleCall_3_0()); }
		ruleForCondition
		{ after(grammarAccess.getForLoopAccess().getIteratingConditionForConditionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForLoop__CommandsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForLoopAccess().getCommandsGeneratorCommandParserRuleCall_5_0()); }
		ruleGeneratorCommand
		{ after(grammarAccess.getForLoopAccess().getCommandsGeneratorCommandParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForEachCollection__CollAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForEachCollectionAccess().getCollNodeAttributeCallParserRuleCall_0()); }
		ruleNodeAttributeCall
		{ after(grammarAccess.getForEachCollectionAccess().getCollNodeAttributeCallParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__StartAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForRangeAccess().getStartINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getForRangeAccess().getStartINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForRange__EndAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForRangeAccess().getEndINTTerminalRuleCall_2_0()); }
		RULE_INT
		{ after(grammarAccess.getForRangeAccess().getEndINTTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueAlternatives_0_1_0()); }
		(rule__LiteralExpression__ValueAlternatives_0_1_0)
		{ after(grammarAccess.getLiteralExpressionAccess().getValueAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralExpression__ValueAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getLiteralExpressionAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_PATTERN_ASSIGNMENT_OP : ':=';

RULE_ASSIGNMENT_OP : '=';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
