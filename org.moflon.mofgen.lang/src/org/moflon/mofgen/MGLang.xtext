grammar org.moflon.mofgen.MGLang with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate mGLang "http://www.mofgen.org/MGLang"

MofgenFile:
	(imports+=Import)*
	(config=Config)
	(commands+=FileCommand)*;

FileCommand:
	Pattern | Generator;

Import:
	'import' uri=STRING 'as' name=ID;

Config:
	{Config} 'config' '(' ')' '{'
	('modelLocation' ASSIGNMENT_OP modelLocation=STRING)?
	'}';

HomeExpression:
	'modelLocation' ASSIGNMENT_OP uri=STRING;

Pattern:
	'pattern' name=ID ('(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')') '{' (commands+=PatternCommand)* '}'
	(return=PatternReturn)?;

PatternCommand:
	Node | ParamManipulation;

PatternReturn:
	{PatternReturn} 'return' retValue=RefOrCall;

ParamManipulation:
	param=[ParameterNodeOrPattern] content=NodeContent;

Node:
	(srcModel=[Import] '.')? type=[ecore::EClassifier] name=ID (createdBy=NodeContent | (ASSIGNMENT_OP
	createdBy=PatternCall) | (ASSIGNMENT_OP
	createdBy=RefOrCall))?;

NodeContent:
	{NodeContent} '{' (refsAssigns+=NodeReferenceOrAssignmentOrControlFlow)* '}';

PatternCall:
	called=[Pattern] '(' params=PatternCallParameters ')';

PatternCallParameters:
	{PatternCallParameters} (params+=ArithmeticExpression (',' params+=ArithmeticExpression)*)?;

NodeReferenceOrAssignmentOrControlFlow:
	PatternNodeReference | NodeAttributeAssignment | PatternSwitch | PatternForStatement;

PatternForStatement:
	'for' head=ForHead '{' body=PatternForBody '}';

PatternForBody:
	{PatternForBody} (commands+=NodeReferenceOrControlFlow)*;

NodeReferenceOrControlFlow:
	PatternNodeReference | PatternSwitch | PatternForStatement;

PatternNodeReference:
	PatternNodeReferenceToNode | PatternNodeReferenceToPatternCall;

PatternNodeReferenceToNode:
	type=[ecore::EReference] '->' node=RefOrCall;
PatternNodeReferenceToPatternCall:
	type=[ecore::EReference] '->' pc=PatternCall;

NodeAttributeAssignment:
	target=[ecore::ENamedElement] ASSIGNMENT_OP value=ArithmeticExpression;

Parameter:
	PrimitiveParameter | ParameterNodeOrPattern;

PrimitiveParameter:
	type=PrimitiveType name=ID;

ParameterNodeOrPattern:
	(srcModel=[Import] '.')? type=[ecore::EObject] name=ID; //EObject to allow for eClasses from metamodels or for patterns as a whole
PatternSwitch:
	PatternIfElseSwitch | PatternSwitchCase;

PatternIfElseSwitch:
	'switch' '{' (cases+=PatternWhenCase)+ (default=PatternDefault)? '}';

PatternDefault:
	'default' ':' body=PatternCaseBody;

PatternSwitchCase:
	'switch' '(' attribute=RefOrCall ')' '{' (cases+=PatternCase)+ (default=PatternDefault)? '}'; // TODO restrictions in refOrCall-scoping for attribute?
PatternWhenCase:
	'when' when=ArithmeticExpression ':' body=PatternCaseBody;

PatternCase:
	PatternCaseWithCast | PatternCaseWithoutCast;

PatternCaseWithCast:
	'case' node=Node ('when' when=ArithmeticExpression)? ':' body=PatternCaseBody;

PatternCaseWithoutCast:
	'case' val=ArithmeticExpression ':' body=PatternCaseBody;

PatternCaseBody:
	{PatternCaseBody} '{' (expressions+=NodeReferenceOrAssignmentOrControlFlow)* '}' |
	expressions+=NodeReferenceOrAssignmentOrControlFlow;

Case:
	PatternCase | GenCase;

RefOrCall:
	((thisUsed?='this') | ref=[ecore::EObject]) ({RefOrCall.target=current} '.' ref=[ecore::ENamedElement] ('('
	(params=RefParams)? bracesSet?=')')?)*; //Using generic eobject references to make enums possible.
RefParams:
	params+=ArithmeticExpression (',' params+=ArithmeticExpression)*;

Generator:
	'gen' name=ID '(' (params+=Parameter)* ')' '{' (commands+=GeneratorExpression)* '}';

GeneratorExpression: //Only serves as super class for all possible commands within generator
	GenForStatement | GenSwitch | Collection | Variable | VariableManipulation | CollectionManipulation | PatternCall |
	GenReturn;

GenReturn:
	'return' returnValue=RefOrCallOrPatternCall;

RefOrCallOrPatternCall:
	RefOrCall | PatternCall;

CollectionManipulation:
	trg=[Collection] '.' op=[ecore::EOperation] '(' (params=RefParams)? ')';

VariableManipulation:
	var=[Variable] ASSIGNMENT_OP val=ArithmeticExpression;

VariableSuperClass:
	Variable | IteratorVariable | Collection | Node
;

Variable:
	VariableDefinition | VariableDeclaration;

VariableDefinition:
	'var' name=ID ASSIGNMENT_OP value=ArithmeticExpression;

VariableDeclaration:
	'var' name=ID 'of' type=[ecore::EClassifier];

ForStatement:
	GenForStatement | PatternForStatement;

ForBody:
	GenForBody | PatternForBody;

GenForStatement:
	'for' head=ForHead '{' body=GenForBody '}';

ForHead:
	RangeForHead | GeneralForEachHead | ListForEachHead;

RangeForHead:
	iteratorVar=IteratorVariable 'in' range=ForRange;

ForRange:
	start=ArithmeticExpression ':' end=ArithmeticExpression;

GeneralForEachHead:
	src=RefOrCall '-' eref=[ecore::EReference] '->' iteratorVar=IteratorVariable;

ListForEachHead:
	iteratorVar=IteratorVariable 'in' list=[List];

IteratorVariable:
	name=ID;

GenForBody:
	{GenForBody} (commands+=GeneratorExpression)*;

GenSwitchExpression:
	GenForStatement | GenSwitch | Collection | CollectionManipulation | Variable | VariableManipulation | PatternCall | GenReturn;

Switch:
	GenSwitch | PatternSwitch;

GenSwitch:
	GenIfElseSwitch | GenSwitchCase;

GenIfElseSwitch:
	'switch' '{' (cases+=GenWhenCase)+ (default=GenDefault)? '}';

GenWhenCase:
	'when' when=ArithmeticExpression ':' body=GenCaseBody;

GenDefault:
	'default' ':' body=GenCaseBody;

GenSwitchCase:
	'switch' '(' attribute=RefOrCall ')' '{' (cases+=GenCase)+ (default=GenDefault)? '}'; // TODO restrictions in refOrCall-scoping for attribute?
GenCase:
	GenCaseWithCast | GenCaseWithoutCast;

GenCaseWithCast:
	'case' node=Node ('when' when=ArithmeticExpression)? ':' body=GenCaseBody;

GenCaseWithoutCast:
	'case' val=ArithmeticExpression ':' body=GenCaseBody; // TODO test

GenCaseBody:
	{GenCaseBody} '{' (expressions+=GenSwitchExpression)* '}' | expressions+=GenSwitchExpression;

Collection:
	List | Map;

List:
	'List' name=ID (defOrDecl=ListDefOrDecl)?;

ListDefOrDecl:
	ListDefinition | ListDeclaration;

ListDeclaration:
	'of' type=[ecore::EClassifier];

ListDefinition:
	ASSIGNMENT_OP ListAdHoc;

ListAdHoc:
	{ListAdHoc} '[' (elements+=ArithmeticExpression (',' elements+=ArithmeticExpression)*)? ']';

Map:
	'Map' name=ID (defOrDecl=MapDefOrDecl)?;

MapDefOrDecl:
	MapDefinition | MapDeclaration;

MapDeclaration:
	'of' '(' keyType=[ecore::EClassifier] ',' entryType=[ecore::EClassifier] ')';

MapDefinition:
	ASSIGNMENT_OP MapAdHoc;

MapAdHoc:
	{MapAdHoc} '[' (entries+=MapTupel (',' entries+=MapTupel)*)? ']';

MapTupel:
	'(' key=ArithmeticExpression ',' value=ArithmeticExpression ')';

	//======================================Arithmetics============================================
ArithmeticExpression:
	RelationExpression;

RelationExpression returns ArithmeticExpression:
	TertiaryExpression ({Rel.left=current} relation=RelationalOp right=TertiaryExpression)*;

TertiaryExpression returns ArithmeticExpression:
	SecondaryExpression ({Tertiary.left=current} op=TertiaryOp right=SecondaryExpression)*;

SecondaryExpression returns ArithmeticExpression:
	PrimaryExpr ({Secondary.left=current} op=SecondaryOp right=PrimaryExpr)*;

PrimaryExpr returns ArithmeticExpression:
	BaseExpr ({Primary.left=current} op=PrimaryOp right=BaseExpr)*;

BaseExpr returns ArithmeticExpression:
	{BracketExpression} '(' expr=RelationExpression ')' | {NegationExpression} '!' expr=BaseExpr | {FunctionCall}
	func=MathFunc '('
	expr=ArithmeticExpression ')' | {UnaryMinus} '-' expr=BaseExpr | Literal | RefOrCall | PatternCall;

Literal:
	BooleanLiteral | StringLiteral | NumberLiteral | NullLiteral;

BooleanLiteral:
	val=(TRUE | FALSE);

StringLiteral:
	val=STRING;

NumberLiteral:
	IntegerLiteral | DoubleLiteral
;

IntegerLiteral:
	val=INT;

DoubleLiteral:
	val=DOUBLE;

NullLiteral:
	{NullLiteral} NULL;

enum MathFunc:
	SQRT='sqrt' | ABS='abs';

//TODO: Replace by standard eDataTypes?
enum PrimitiveType:
	INT='int' | CHAR='char' | DOUBLE='double' | BOOLEAN='boolean';

terminal DOUBLE returns ecore::EDouble:
	INT '.' INT;

terminal TRUE returns ecore::EBoolean:
	'true';

terminal FALSE returns ecore::EBoolean:
	'false';

terminal NULL:
	'none';

enum RelationalOp:
	GREATER='>' | GREATER_OR_EQUAL='>=' | EQUAL='==' | EQUAL_IDENTITY='==='| UNEQUAL_IDENTITY='!==' | UNEQUAL='!=' | LESS_OR_EQUAL='<=' | LESS='<';

enum TertiaryOp:
	PLUS='+' | MINUS='-' | OR='||';

enum SecondaryOp:
	MOD='%' | XOR='^';

enum PrimaryOp:
	MUL='*' | DIV='/' | AND='&&';

terminal ASSIGNMENT_OP:
	'=';